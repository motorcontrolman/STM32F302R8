
STM32F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080063f8  080063f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063f8  080063f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000070  08006470  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08006470  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019589  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f39  00000000  00000000  00039627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012722  00000000  00000000  0003c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  0004ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  0004fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d906  00000000  00000000  00050c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7d7  00000000  00000000  0006e54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad03a  00000000  00000000  0008ad25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137d5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d58  00000000  00000000  00137db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f98 	.word	0x08005f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005f98 	.word	0x08005f98

080001c8 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 80001c8:	ee07 0a90 	vmov	s15, r0
 80001cc:	ee06 1a90 	vmov	s13, r1
 80001d0:	ee07 2a10 	vmov	s14, r2
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 80001d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80001d8:	ed93 6a00 	vldr	s12, [r3]
 80001dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80001e0:	ed83 7a00 	vstr	s14, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 80001e4:	ee67 7aa6 	vmul.f32	s15, s15, s13

	return ElectAngVeloEstimate;
}
 80001e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80001ec:	ee17 0a90 	vmov	r0, s15
 80001f0:	4770      	bx	lr

080001f2 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 80001f2:	ee06 0a90 	vmov	s13, r0
 80001f6:	ee07 1a90 	vmov	s15, r1
 80001fa:	ee07 2a10 	vmov	s14, r2
	float result;
	if ( den >= 0 && den < threshold )
 80001fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000206:	db04      	blt.n	8000212 <gfDivideAvoidZero+0x20>
 8000208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800020c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000210:	d413      	bmi.n	800023a <gfDivideAvoidZero+0x48>
		den = threshold;
	else if( den < 0 && den > -threshold)
 8000212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800021a:	d404      	bmi.n	8000226 <gfDivideAvoidZero+0x34>
		den = -threshold;

	result = num / den;
	return result;
}
 800021c:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8000220:	ee17 0a90 	vmov	r0, s15
 8000224:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 8000226:	eeb1 7a47 	vneg.f32	s14, s14
 800022a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000232:	d5f3      	bpl.n	800021c <gfDivideAvoidZero+0x2a>
		den = -threshold;
 8000234:	eef0 7a47 	vmov.f32	s15, s14
 8000238:	e7f0      	b.n	800021c <gfDivideAvoidZero+0x2a>
		den = threshold;
 800023a:	ee07 2a90 	vmov	s15, r2
 800023e:	e7ed      	b.n	800021c <gfDivideAvoidZero+0x2a>

08000240 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000240:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000242:	490f      	ldr	r1, [pc, #60]	; (8000280 <gfWrapTheta+0x40>)
 8000244:	f004 ff08 	bl	8005058 <fmodf>
 8000248:	ee07 0a90 	vmov	s15, r0
	if( theta > PI)
 800024c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000284 <gfWrapTheta+0x44>
 8000250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000258:	dd06      	ble.n	8000268 <gfWrapTheta+0x28>
		theta -= TWOPI;
 800025a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000288 <gfWrapTheta+0x48>
 800025e:	ee77 7ac7 	vsub.f32	s15, s15, s14
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000262:	ee17 0a90 	vmov	r0, s15
 8000266:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000268:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800028c <gfWrapTheta+0x4c>
 800026c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000274:	d5f5      	bpl.n	8000262 <gfWrapTheta+0x22>
		theta += TWOPI;
 8000276:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8000288 <gfWrapTheta+0x48>
 800027a:	ee77 7a87 	vadd.f32	s15, s15, s14
	return theta;
 800027e:	e7f0      	b.n	8000262 <gfWrapTheta+0x22>
 8000280:	40c90fdb 	.word	0x40c90fdb
 8000284:	40490fdb 	.word	0x40490fdb
 8000288:	40c90fdb 	.word	0x40c90fdb
 800028c:	c0490fdb 	.word	0xc0490fdb

08000290 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000290:	ee06 0a90 	vmov	s13, r0
 8000294:	ee07 1a90 	vmov	s15, r1
 8000298:	ee07 2a10 	vmov	s14, r2
	if(input > Upper) input = Upper;
 800029c:	eef4 6ae7 	vcmpe.f32	s13, s15
 80002a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a4:	dc01      	bgt.n	80002aa <gUpperLowerLimit+0x1a>
 80002a6:	ee07 0a90 	vmov	s15, r0
	if(input < Lower) input = Lower;
 80002aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b2:	d401      	bmi.n	80002b8 <gUpperLowerLimit+0x28>
 80002b4:	eeb0 7a67 	vmov.f32	s14, s15
	return input;
}
 80002b8:	ee17 0a10 	vmov	r0, s14
 80002bc:	4770      	bx	lr

080002be <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	outputMode[0] = OUTPUTMODE_OPEN;
 80002be:	2300      	movs	r3, #0
 80002c0:	700b      	strb	r3, [r1, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80002c2:	704b      	strb	r3, [r1, #1]
	outputMode[2] = OUTPUTMODE_OPEN;
 80002c4:	708b      	strb	r3, [r1, #2]
	Duty[0] = 0.0f;
 80002c6:	2300      	movs	r3, #0
 80002c8:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 80002ca:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 80002cc:	6083      	str	r3, [r0, #8]
}
 80002ce:	4770      	bx	lr

080002d0 <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 80002d0:	ee06 0a90 	vmov	s13, r0
 80002d4:	ee07 1a10 	vmov	s14, r1
 80002d8:	ee07 2a90 	vmov	s15, r2
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 80002dc:	ee27 7a27 	vmul.f32	s14, s14, s15
	yn_1 = *y;
 80002e0:	ed93 6a00 	vldr	s12, [r3]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 80002e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80002e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80002ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80002f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80002f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80002f8:	edc3 7a00 	vstr	s15, [r3]
}
 80002fc:	4770      	bx	lr

080002fe <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 80002fe:	ee07 0a90 	vmov	s15, r0
 8000302:	ee07 1a10 	vmov	s14, r1
 8000306:	ee06 2a90 	vmov	s13, r2
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 800030a:	ee27 7a26 	vmul.f32	s14, s14, s13
	yn_1 = *y;
 800030e:	edd3 6a00 	vldr	s13, [r3]

	if( r > yn_1 )
 8000312:	eef4 6ae7 	vcmpe.f32	s13, s15
 8000316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031a:	d504      	bpl.n	8000326 <gRateLimit+0x28>
		ytmp = yn_1 + dy;
 800031c:	ee37 6a26 	vadd.f32	s12, s14, s13
	else if( r < yn_1 )
		ytmp = yn_1 - dy;

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 8000320:	ed83 6a00 	vstr	s12, [r3]

}
 8000324:	4770      	bx	lr
	else if( r < yn_1 )
 8000326:	eef4 6ae7 	vcmpe.f32	s13, s15
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	ddf7      	ble.n	8000320 <gRateLimit+0x22>
		ytmp = yn_1 - dy;
 8000330:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8000334:	e7f4      	b.n	8000320 <gRateLimit+0x22>
	...

08000338 <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 8000338:	b510      	push	{r4, lr}
	uint8_t posMode_pre;
	uint8_t drvMode_pre;


	//read IO signals
	gButton1 = readButton1();
 800033a:	f000 f9f7 	bl	800072c <readButton1>
 800033e:	4b5c      	ldr	r3, [pc, #368]	; (80004b0 <Sequence_Low_Freq+0x178>)
 8000340:	7018      	strb	r0, [r3, #0]
	gVolume = readVolume();
 8000342:	f000 fa3d 	bl	80007c0 <readVolume>
 8000346:	4b5b      	ldr	r3, [pc, #364]	; (80004b4 <Sequence_Low_Freq+0x17c>)
 8000348:	6018      	str	r0, [r3, #0]
	readHallSignal(gHall);
 800034a:	485b      	ldr	r0, [pc, #364]	; (80004b8 <Sequence_Low_Freq+0x180>)
 800034c:	f000 faa2 	bl	8000894 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 8000350:	485a      	ldr	r0, [pc, #360]	; (80004bc <Sequence_Low_Freq+0x184>)
 8000352:	f000 fab7 	bl	80008c4 <readElectFreqFromHallSignal>

	sSensData.Vdc = readVdc();
 8000356:	f000 fa51 	bl	80007fc <readVdc>
 800035a:	4c59      	ldr	r4, [pc, #356]	; (80004c0 <Sequence_Low_Freq+0x188>)
 800035c:	62a0      	str	r0, [r4, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 800035e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8000362:	4a58      	ldr	r2, [pc, #352]	; (80004c4 <Sequence_Low_Freq+0x18c>)
 8000364:	4958      	ldr	r1, [pc, #352]	; (80004c8 <Sequence_Low_Freq+0x190>)
 8000366:	f7ff ffb3 	bl	80002d0 <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 800036a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800036e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000370:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000374:	f7ff ff3d 	bl	80001f2 <gfDivideAvoidZero>
 8000378:	6320      	str	r0, [r4, #48]	; 0x30

	if(sInitCnt < 100){
 800037a:	4b54      	ldr	r3, [pc, #336]	; (80004cc <Sequence_Low_Freq+0x194>)
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	2b63      	cmp	r3, #99	; 0x63
 8000380:	d83f      	bhi.n	8000402 <Sequence_Low_Freq+0xca>
		sInitCnt++;
 8000382:	3301      	adds	r3, #1
 8000384:	b29b      	uxth	r3, r3
 8000386:	4a51      	ldr	r2, [pc, #324]	; (80004cc <Sequence_Low_Freq+0x194>)
 8000388:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 800038a:	4a51      	ldr	r2, [pc, #324]	; (80004d0 <Sequence_Low_Freq+0x198>)
 800038c:	2102      	movs	r1, #2
 800038e:	7011      	strb	r1, [r2, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000390:	4a50      	ldr	r2, [pc, #320]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 8000392:	2100      	movs	r1, #0
 8000394:	7011      	strb	r1, [r2, #0]
		sElectAngVeloRefRateLimit = 0;
 8000396:	4a50      	ldr	r2, [pc, #320]	; (80004d8 <Sequence_Low_Freq+0x1a0>)
 8000398:	2100      	movs	r1, #0
 800039a:	6011      	str	r1, [r2, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= 10){
 800039c:	2b0a      	cmp	r3, #10
 800039e:	d803      	bhi.n	80003a8 <Sequence_Low_Freq+0x70>
			sSensData.Iuvw_AD_Offset[0] = 0.0f;
 80003a0:	61e1      	str	r1, [r4, #28]
			sSensData.Iuvw_AD_Offset[1] = 0.0f;
 80003a2:	6221      	str	r1, [r4, #32]
			sSensData.Iuvw_AD_Offset[2] = 0.0f;
 80003a4:	6261      	str	r1, [r4, #36]	; 0x24
 80003a6:	e05b      	b.n	8000460 <Sequence_Low_Freq+0x128>
		}
		else if(sInitCnt <= 10 + 40){
 80003a8:	2b32      	cmp	r3, #50	; 0x32
 80003aa:	d859      	bhi.n	8000460 <Sequence_Low_Freq+0x128>
			sSensData.Iuvw_AD_Offset[0] += (float)sSensData.Iuvw_AD[0] * 0.025f;
 80003ac:	4b44      	ldr	r3, [pc, #272]	; (80004c0 <Sequence_Low_Freq+0x188>)
 80003ae:	8a9a      	ldrh	r2, [r3, #20]
 80003b0:	ee07 2a10 	vmov	s14, r2
 80003b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80003b8:	eddf 6a48 	vldr	s13, [pc, #288]	; 80004dc <Sequence_Low_Freq+0x1a4>
 80003bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80003c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80003c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80003c8:	ed83 7a07 	vstr	s14, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] += (float)sSensData.Iuvw_AD[1] * 0.025f;
 80003cc:	8ada      	ldrh	r2, [r3, #22]
 80003ce:	ee07 2a10 	vmov	s14, r2
 80003d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80003d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80003da:	edd3 7a08 	vldr	s15, [r3, #32]
 80003de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80003e2:	ed83 7a08 	vstr	s14, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] += (float)sSensData.Iuvw_AD[2] * 0.025f;
 80003e6:	8b1a      	ldrh	r2, [r3, #24]
 80003e8:	ee07 2a90 	vmov	s15, r2
 80003ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003f4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80003f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8000400:	e02e      	b.n	8000460 <Sequence_Low_Freq+0x128>
		}
	}
	else {
		posMode_pre = sPosMode;
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <Sequence_Low_Freq+0x198>)
 8000404:	781a      	ldrb	r2, [r3, #0]
		drvMode_pre = sDrvMode;
 8000406:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 8000408:	781b      	ldrb	r3, [r3, #0]

		slctPosMode(gElectFreq, &sPosMode);
 800040a:	492c      	ldr	r1, [pc, #176]	; (80004bc <Sequence_Low_Freq+0x184>)
 800040c:	edd1 7a00 	vldr	s15, [r1]
	gFreerunCnt = readFreeRunCnt();
	gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
void inline slctPosMode(float electFreq, uint8_t* posMode){

	if(*posMode != POSMODE_HALL_PLL){
 8000410:	2a03      	cmp	r2, #3
 8000412:	d02a      	beq.n	800046a <Sequence_Low_Freq+0x132>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000414:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000420:	dd1f      	ble.n	8000462 <Sequence_Low_Freq+0x12a>
			*posMode = POSMODE_HALL_PLL;
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <Sequence_Low_Freq+0x198>)
 8000424:	2103      	movs	r1, #3
 8000426:	7011      	strb	r1, [r2, #0]

}

void inline slctDrvMode(float electFreq, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000428:	2b04      	cmp	r3, #4
 800042a:	d031      	beq.n	8000490 <Sequence_Low_Freq+0x158>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 800042c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80004e0 <Sequence_Low_Freq+0x1a8>
 8000430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dd26      	ble.n	8000488 <Sequence_Low_Freq+0x150>
			*drvMode = DRVMODE_VECTORCONTROL;
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 800043c:	2204      	movs	r2, #4
 800043e:	701a      	strb	r2, [r3, #0]
		sPosMode = POSMODE_FREERUN;
 8000440:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <Sequence_Low_Freq+0x198>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OPENLOOP;
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 8000448:	2202      	movs	r2, #2
 800044a:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 100;
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <Sequence_Low_Freq+0x1a0>)
 800044e:	4a25      	ldr	r2, [pc, #148]	; (80004e4 <Sequence_Low_Freq+0x1ac>)
 8000450:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
			break;
		case DRVMODE_OPENLOOP:
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <Sequence_Low_Freq+0x1b0>)
 8000454:	6999      	ldr	r1, [r3, #24]
 8000456:	6019      	str	r1, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000458:	69da      	ldr	r2, [r3, #28]
 800045a:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 800045c:	6099      	str	r1, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 800045e:	60da      	str	r2, [r3, #12]
}
 8000460:	bd10      	pop	{r4, pc}
			*posMode = POSMODE_HALL;
 8000462:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <Sequence_Low_Freq+0x198>)
 8000464:	2102      	movs	r1, #2
 8000466:	7011      	strb	r1, [r2, #0]
 8000468:	e7de      	b.n	8000428 <Sequence_Low_Freq+0xf0>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 800046a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800046e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000476:	d503      	bpl.n	8000480 <Sequence_Low_Freq+0x148>
			*posMode = POSMODE_HALL;
 8000478:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <Sequence_Low_Freq+0x198>)
 800047a:	2102      	movs	r1, #2
 800047c:	7011      	strb	r1, [r2, #0]
 800047e:	e7d3      	b.n	8000428 <Sequence_Low_Freq+0xf0>
			*posMode = POSMODE_HALL_PLL;
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <Sequence_Low_Freq+0x198>)
 8000482:	2103      	movs	r1, #3
 8000484:	7011      	strb	r1, [r2, #0]
 8000486:	e7cf      	b.n	8000428 <Sequence_Low_Freq+0xf0>
			*drvMode = DRVMODE_OPENLOOP;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 800048a:	2202      	movs	r2, #2
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	e7d7      	b.n	8000440 <Sequence_Low_Freq+0x108>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000490:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80004ec <Sequence_Low_Freq+0x1b4>
 8000494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049c:	d503      	bpl.n	80004a6 <Sequence_Low_Freq+0x16e>
			*drvMode = DRVMODE_OPENLOOP;
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 80004a0:	2202      	movs	r2, #2
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e7cc      	b.n	8000440 <Sequence_Low_Freq+0x108>
			*drvMode = DRVMODE_VECTORCONTROL;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <Sequence_Low_Freq+0x19c>)
 80004a8:	2204      	movs	r2, #4
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	e7c8      	b.n	8000440 <Sequence_Low_Freq+0x108>
 80004ae:	bf00      	nop
 80004b0:	20000090 	.word	0x20000090
 80004b4:	200000a4 	.word	0x200000a4
 80004b8:	2000009c 	.word	0x2000009c
 80004bc:	20000094 	.word	0x20000094
 80004c0:	200000d8 	.word	0x200000d8
 80004c4:	3a83126f 	.word	0x3a83126f
 80004c8:	42fb3333 	.word	0x42fb3333
 80004cc:	200000d0 	.word	0x200000d0
 80004d0:	200000d7 	.word	0x200000d7
 80004d4:	200000a8 	.word	0x200000a8
 80004d8:	200000b8 	.word	0x200000b8
 80004dc:	3ccccccd 	.word	0x3ccccccd
 80004e0:	42c80000 	.word	0x42c80000
 80004e4:	42c80000 	.word	0x42c80000
 80004e8:	2000010c 	.word	0x2000010c
 80004ec:	42a00000 	.word	0x42a00000

080004f0 <Sequence_High_Freq>:
void Sequence_High_Freq(void){
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	b0ad      	sub	sp, #180	; 0xb4
	writeFreeRunCnt(ZERO);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 fa7d 	bl	80009f4 <writeFreeRunCnt>
	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 80004fa:	487b      	ldr	r0, [pc, #492]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 80004fc:	f100 0208 	add.w	r2, r0, #8
 8000500:	f100 011c 	add.w	r1, r0, #28
 8000504:	3014      	adds	r0, #20
 8000506:	f000 f98b 	bl	8000820 <readCurrent>
	slctElectAngleFromPosMode(sPosMode, &sSensData);
 800050a:	4b78      	ldr	r3, [pc, #480]	; (80006ec <Sequence_High_Freq+0x1fc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
	switch(posMode){
 800050e:	2b04      	cmp	r3, #4
 8000510:	f200 8090 	bhi.w	8000634 <Sequence_High_Freq+0x144>
 8000514:	e8df f003 	tbb	[pc, r3]
 8000518:	62532503 	.word	0x62532503
 800051c:	71          	.byte	0x71
 800051d:	00          	.byte	0x00
		sensData->electAngle = 0.0f;
 800051e:	4b72      	ldr	r3, [pc, #456]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000524:	605a      	str	r2, [r3, #4]
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8000526:	4b72      	ldr	r3, [pc, #456]	; (80006f0 <Sequence_High_Freq+0x200>)
 8000528:	781d      	ldrb	r5, [r3, #0]
 800052a:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 800052e:	4c6e      	ldr	r4, [pc, #440]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 8000530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800053c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	f8cc 3000 	str.w	r3, [ip]
	switch(drvMode){
 8000548:	2d02      	cmp	r5, #2
 800054a:	f000 8097 	beq.w	800067c <Sequence_High_Freq+0x18c>
 800054e:	2d04      	cmp	r5, #4
 8000550:	f000 80b7 	beq.w	80006c2 <Sequence_High_Freq+0x1d2>
 8000554:	2d00      	cmp	r5, #0
 8000556:	d072      	beq.n	800063e <Sequence_High_Freq+0x14e>
			gOffDuty(Duty, outputMode);
 8000558:	4966      	ldr	r1, [pc, #408]	; (80006f4 <Sequence_High_Freq+0x204>)
 800055a:	4867      	ldr	r0, [pc, #412]	; (80006f8 <Sequence_High_Freq+0x208>)
 800055c:	f7ff feaf 	bl	80002be <gOffDuty>
 8000560:	e071      	b.n	8000646 <Sequence_High_Freq+0x156>
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000562:	4b66      	ldr	r3, [pc, #408]	; (80006fc <Sequence_High_Freq+0x20c>)
 8000564:	ed93 7a00 	vldr	s14, [r3]
 8000568:	4e5f      	ldr	r6, [pc, #380]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 800056a:	ed86 7a01 	vstr	s14, [r6, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 800056e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8000700 <Sequence_High_Freq+0x210>
 8000572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000576:	4b63      	ldr	r3, [pc, #396]	; (8000704 <Sequence_High_Freq+0x214>)
 8000578:	ed93 7a00 	vldr	s14, [r3]
 800057c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000580:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 8000584:	ee17 0a90 	vmov	r0, s15
 8000588:	f7ff fe5a 	bl	8000240 <gfWrapTheta>
 800058c:	4634      	mov	r4, r6
 800058e:	f844 0b0c 	str.w	r0, [r4], #12
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000592:	4b5d      	ldr	r3, [pc, #372]	; (8000708 <Sequence_High_Freq+0x218>)
 8000594:	931d      	str	r3, [sp, #116]	; 0x74
 8000596:	224c      	movs	r2, #76	; 0x4c
 8000598:	495c      	ldr	r1, [pc, #368]	; (800070c <Sequence_High_Freq+0x21c>)
 800059a:	a80a      	add	r0, sp, #40	; 0x28
 800059c:	f005 fce6 	bl	8005f6c <memcpy>
 80005a0:	466d      	mov	r5, sp
 80005a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80005b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 fed4 	bl	8001364 <calcElectAngleEstimate>
		break;
 80005bc:	e7b3      	b.n	8000526 <Sequence_High_Freq+0x36>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80005be:	ab1f      	add	r3, sp, #124	; 0x7c
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	ab1e      	add	r3, sp, #120	; 0x78
 80005c4:	2200      	movs	r2, #0
 80005c6:	4952      	ldr	r1, [pc, #328]	; (8000710 <Sequence_High_Freq+0x220>)
 80005c8:	6809      	ldr	r1, [r1, #0]
 80005ca:	4852      	ldr	r0, [pc, #328]	; (8000714 <Sequence_High_Freq+0x224>)
 80005cc:	f000 fa3e 	bl	8000a4c <calcElectAngle>
		sensData->electAngle = electAngle;
 80005d0:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 80005d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80005d4:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80005d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80005d8:	605a      	str	r2, [r3, #4]
		break;
 80005da:	e7a4      	b.n	8000526 <Sequence_High_Freq+0x36>
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80005dc:	ab1f      	add	r3, sp, #124	; 0x7c
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	ab1e      	add	r3, sp, #120	; 0x78
 80005e2:	2201      	movs	r2, #1
 80005e4:	494a      	ldr	r1, [pc, #296]	; (8000710 <Sequence_High_Freq+0x220>)
 80005e6:	6809      	ldr	r1, [r1, #0]
 80005e8:	484a      	ldr	r0, [pc, #296]	; (8000714 <Sequence_High_Freq+0x224>)
 80005ea:	f000 fa2f 	bl	8000a4c <calcElectAngle>
		sensData->electAngle = electAngle;
 80005ee:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 80005f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80005f2:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80005f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80005f6:	605a      	str	r2, [r3, #4]
		break;
 80005f8:	e795      	b.n	8000526 <Sequence_High_Freq+0x36>
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 80005fa:	4e3b      	ldr	r6, [pc, #236]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 80005fc:	4f42      	ldr	r7, [pc, #264]	; (8000708 <Sequence_High_Freq+0x218>)
 80005fe:	971d      	str	r7, [sp, #116]	; 0x74
 8000600:	224c      	movs	r2, #76	; 0x4c
 8000602:	4942      	ldr	r1, [pc, #264]	; (800070c <Sequence_High_Freq+0x21c>)
 8000604:	a80a      	add	r0, sp, #40	; 0x28
 8000606:	f005 fcb1 	bl	8005f6c <memcpy>
 800060a:	466c      	mov	r4, sp
 800060c:	f106 050c 	add.w	r5, r6, #12
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0003 	ldmia.w	r5, {r0, r1}
 800061c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000620:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000624:	2001      	movs	r0, #1
 8000626:	f000 fe9d 	bl	8001364 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	6033      	str	r3, [r6, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6073      	str	r3, [r6, #4]
		break;
 8000632:	e778      	b.n	8000526 <Sequence_High_Freq+0x36>
		sensData->electAngle = 0.0f;
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 800063a:	605a      	str	r2, [r3, #4]
		break;
 800063c:	e773      	b.n	8000526 <Sequence_High_Freq+0x36>
			gOffDuty(Duty, outputMode);
 800063e:	492d      	ldr	r1, [pc, #180]	; (80006f4 <Sequence_High_Freq+0x204>)
 8000640:	482d      	ldr	r0, [pc, #180]	; (80006f8 <Sequence_High_Freq+0x208>)
 8000642:	f7ff fe3c 	bl	80002be <gOffDuty>
	writeOutputMode(sOutputMode);
 8000646:	482b      	ldr	r0, [pc, #172]	; (80006f4 <Sequence_High_Freq+0x204>)
 8000648:	f000 f976 	bl	8000938 <writeOutputMode>
	writeDuty(sDuty);
 800064c:	482a      	ldr	r0, [pc, #168]	; (80006f8 <Sequence_High_Freq+0x208>)
 800064e:	f000 f9a9 	bl	80009a4 <writeDuty>
	gFreerunCnt = readFreeRunCnt();
 8000652:	f000 f9d5 	bl	8000a00 <readFreeRunCnt>
 8000656:	4b30      	ldr	r3, [pc, #192]	; (8000718 <Sequence_High_Freq+0x228>)
 8000658:	8018      	strh	r0, [r3, #0]
	gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
 800065a:	ee07 0a90 	vmov	s15, r0
 800065e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000662:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000700 <Sequence_High_Freq+0x210>
 8000666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800066a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800071c <Sequence_High_Freq+0x22c>
 800066e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <Sequence_High_Freq+0x230>)
 8000674:	ed83 7a00 	vstr	s14, [r3]
}
 8000678:	b02d      	add	sp, #180	; 0xb4
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * gVolume;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <Sequence_High_Freq+0x1f8>)
 800067e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000682:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000724 <Sequence_High_Freq+0x234>
 8000686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <Sequence_High_Freq+0x238>)
 800068c:	ed93 7a00 	vldr	s14, [r3]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <Sequence_High_Freq+0x204>)
 8000692:	930c      	str	r3, [sp, #48]	; 0x30
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <Sequence_High_Freq+0x208>)
 8000696:	930b      	str	r3, [sp, #44]	; 0x2c
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <Sequence_High_Freq+0x21c>)
 800069a:	930a      	str	r3, [sp, #40]	; 0x28
 800069c:	466c      	mov	r4, sp
 800069e:	ad22      	add	r5, sp, #136	; 0x88
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80006b0:	ab1f      	add	r3, sp, #124	; 0x7c
 80006b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b8:	ee17 0a90 	vmov	r0, s15
 80006bc:	f000 fcc4 	bl	8001048 <OpenLoopTasks>
			break;
 80006c0:	e7c1      	b.n	8000646 <Sequence_High_Freq+0x156>
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <Sequence_High_Freq+0x204>)
 80006c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <Sequence_High_Freq+0x208>)
 80006c8:	930a      	str	r3, [sp, #40]	; 0x28
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <Sequence_High_Freq+0x21c>)
 80006cc:	9309      	str	r3, [sp, #36]	; 0x24
 80006ce:	466c      	mov	r4, sp
 80006d0:	ad23      	add	r5, sp, #140	; 0x8c
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	682b      	ldr	r3, [r5, #0]
 80006dc:	6023      	str	r3, [r4, #0]
 80006de:	ab1f      	add	r3, sp, #124	; 0x7c
 80006e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e2:	f000 faa1 	bl	8000c28 <VectorControlTasks>
			break;
 80006e6:	e7ae      	b.n	8000646 <Sequence_High_Freq+0x156>
 80006e8:	200000d8 	.word	0x200000d8
 80006ec:	200000d7 	.word	0x200000d7
 80006f0:	200000a8 	.word	0x200000a8
 80006f4:	200000d4 	.word	0x200000d4
 80006f8:	200000ac 	.word	0x200000ac
 80006fc:	200000b8 	.word	0x200000b8
 8000700:	467a0000 	.word	0x467a0000
 8000704:	200000cc 	.word	0x200000cc
 8000708:	200000bc 	.word	0x200000bc
 800070c:	2000010c 	.word	0x2000010c
 8000710:	20000094 	.word	0x20000094
 8000714:	2000009c 	.word	0x2000009c
 8000718:	20000098 	.word	0x20000098
 800071c:	4c895440 	.word	0x4c895440
 8000720:	200000a0 	.word	0x200000a0
 8000724:	3f1cc471 	.word	0x3f1cc471
 8000728:	200000a4 	.word	0x200000a4

0800072c <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 800072c:	b500      	push	{lr}
 800072e:	b083      	sub	sp, #12
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <readButton1+0x2c>)
 8000736:	f002 fd45 	bl	80031c4 <HAL_GPIO_ReadPin>
 800073a:	f88d 0007 	strb.w	r0, [sp, #7]
	B1 = 0b00000001 & (~B1);
 800073e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000742:	f083 0301 	eor.w	r3, r3, #1
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	f88d 3007 	strb.w	r3, [sp, #7]
	return B1;
 800074e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000752:	b003      	add	sp, #12
 8000754:	f85d fb04 	ldr.w	pc, [sp], #4
 8000758:	48000800 	.word	0x48000800

0800075c <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 800075c:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000764:	9301      	str	r3, [sp, #4]

	return inputCaptureCnt;
 8000766:	9801      	ldr	r0, [sp, #4]
}
 8000768:	b002      	add	sp, #8
 800076a:	4770      	bx	lr

0800076c <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 800076c:	ee07 0a90 	vmov	s15, r0
 8000770:	ee06 1a90 	vmov	s13, r1
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 800077a:	1c53      	adds	r3, r2, #1
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ee07 3a10 	vmov	s14, r3


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000786:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800078a:	ee77 7ae6 	vsub.f32	s15, s15, s13

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800078e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000792:	eeb1 7a47 	vneg.f32	s14, s14
 8000796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	dd05      	ble.n	80007ac <readTimeInterval+0x40>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 80007a0:	ee07 2a10 	vmov	s14, r2
 80007a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80007a8:	ee77 7a87 	vadd.f32	s15, s15, s14

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}
 80007ac:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80007bc <readTimeInterval+0x50>
 80007b0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80007b4:	ee17 0a90 	vmov	r0, s15
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	4c895440 	.word	0x4c895440

080007c0 <readVolume>:
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <readVolume+0x30>)
 80007c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007c6:	3b63      	subs	r3, #99	; 0x63
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80007f4 <readVolume+0x34>
 80007d4:	ee67 7a87 	vmul.f32	s15, s15, s14
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 80007d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e0:	d402      	bmi.n	80007e8 <readVolume+0x28>
	return Volume;
}
 80007e2:	ee17 0a90 	vmov	r0, s15
 80007e6:	4770      	bx	lr
	if( Volume < 0) Volume = 0;
 80007e8:	eddf 7a03 	vldr	s15, [pc, #12]	; 80007f8 <readVolume+0x38>
	return Volume;
 80007ec:	e7f9      	b.n	80007e2 <readVolume+0x22>
 80007ee:	bf00      	nop
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	398007f8 	.word	0x398007f8
 80007f8:	00000000 	.word	0x00000000

080007fc <readVdc>:

float readVdc(void){
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <readVdc+0x1c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	ee07 3a90 	vmov	s15, r3
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return Vdc;
}
 8000808:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800081c <readVdc+0x20>
 800080c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000810:	ee17 0a90 	vmov	r0, s15
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	2000008c 	.word	0x2000008c
 800081c:	3c7cd035 	.word	0x3c7cd035

08000820 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000820:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000822:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 8000826:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 800082a:	b29b      	uxth	r3, r3
 800082c:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 800082e:	f8dc 4084 	ldr.w	r4, [ip, #132]	; 0x84
 8000832:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000834:	f8dc 4088 	ldr.w	r4, [ip, #136]	; 0x88
 8000838:	8084      	strh	r4, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000842:	ed91 7a00 	vldr	s14, [r1]
 8000846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800084a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000890 <readCurrent+0x70>
 800084e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000852:	edc2 7a00 	vstr	s15, [r2]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 8000856:	8843      	ldrh	r3, [r0, #2]
 8000858:	ee07 3a10 	vmov	s14, r3
 800085c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000860:	edd1 7a01 	vldr	s15, [r1, #4]
 8000864:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000868:	ee27 7a26 	vmul.f32	s14, s14, s13
 800086c:	ed82 7a01 	vstr	s14, [r2, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000870:	8883      	ldrh	r3, [r0, #4]
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800087a:	ed91 7a02 	vldr	s14, [r1, #8]
 800087e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000882:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000886:	edc2 7a02 	vstr	s15, [r2, #8]
}
 800088a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	bafdbcc5 	.word	0xbafdbcc5

08000894 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4604      	mov	r4, r0
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fc90 	bl	80031c4 <HAL_GPIO_ReadPin>
 80008a4:	7020      	strb	r0, [r4, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 80008a6:	4d06      	ldr	r5, [pc, #24]	; (80008c0 <readHallSignal+0x2c>)
 80008a8:	2108      	movs	r1, #8
 80008aa:	4628      	mov	r0, r5
 80008ac:	f002 fc8a 	bl	80031c4 <HAL_GPIO_ReadPin>
 80008b0:	7060      	strb	r0, [r4, #1]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4628      	mov	r0, r5
 80008b8:	f002 fc84 	bl	80031c4 <HAL_GPIO_ReadPin>
 80008bc:	70a0      	strb	r0, [r4, #2]
}
 80008be:	bd38      	pop	{r3, r4, r5, pc}
 80008c0:	48000400 	.word	0x48000400

080008c4 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4606      	mov	r6, r0
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 80008c8:	4c16      	ldr	r4, [pc, #88]	; (8000924 <readElectFreqFromHallSignal+0x60>)
 80008ca:	4d17      	ldr	r5, [pc, #92]	; (8000928 <readElectFreqFromHallSignal+0x64>)
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	6023      	str	r3, [r4, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 80008d0:	f7ff ff44 	bl	800075c <readInputCaptureCnt>
 80008d4:	6028      	str	r0, [r5, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 80008d6:	6821      	ldr	r1, [r4, #0]
 80008d8:	4288      	cmp	r0, r1
 80008da:	d108      	bne.n	80008ee <readElectFreqFromHallSignal+0x2a>
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);

		sNoInputCaptureCnt = 0;
	}
	// If Input Capture Count keep same value, Set Electrical Freq Zero
	else if(sNoInputCaptureCnt < 2000)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <readElectFreqFromHallSignal+0x68>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008e4:	d21a      	bcs.n	800091c <readElectFreqFromHallSignal+0x58>
		sNoInputCaptureCnt ++;
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <readElectFreqFromHallSignal+0x68>)
 80008ea:	8013      	strh	r3, [r2, #0]
 80008ec:	e00d      	b.n	800090a <readElectFreqFromHallSignal+0x46>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 80008ee:	f7ff ff3d 	bl	800076c <readTimeInterval>
 80008f2:	ee07 0a90 	vmov	s15, r0
		if( timeInterval > 0.0001f)
 80008f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000930 <readElectFreqFromHallSignal+0x6c>
 80008fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000902:	dc03      	bgt.n	800090c <readElectFreqFromHallSignal+0x48>
		sNoInputCaptureCnt = 0;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <readElectFreqFromHallSignal+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	801a      	strh	r2, [r3, #0]
	else
		*electFreq = 0;
}
 800090a:	bd70      	pop	{r4, r5, r6, pc}
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <readElectFreqFromHallSignal+0x70>)
 800090e:	4601      	mov	r1, r0
 8000910:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000914:	f7ff fc6d 	bl	80001f2 <gfDivideAvoidZero>
 8000918:	6030      	str	r0, [r6, #0]
 800091a:	e7f3      	b.n	8000904 <readElectFreqFromHallSignal+0x40>
		*electFreq = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	6033      	str	r3, [r6, #0]
}
 8000920:	e7f3      	b.n	800090a <readElectFreqFromHallSignal+0x46>
 8000922:	bf00      	nop
 8000924:	2000015c 	.word	0x2000015c
 8000928:	20000158 	.word	0x20000158
 800092c:	20000160 	.word	0x20000160
 8000930:	38d1b717 	.word	0x38d1b717
 8000934:	326e9bfb 	.word	0x326e9bfb

08000938 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000938:	b510      	push	{r4, lr}
 800093a:	4604      	mov	r4, r0

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 800093c:	f990 3000 	ldrsb.w	r3, [r0]
 8000940:	b9c3      	cbnz	r3, 8000974 <writeOutputMode+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000948:	4815      	ldr	r0, [pc, #84]	; (80009a0 <writeOutputMode+0x68>)
 800094a:	f002 fc42 	bl	80031d2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);

	if(outputMode[1] == OUTPUTMODE_OPEN )
 800094e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000952:	b9b3      	cbnz	r3, 8000982 <writeOutputMode+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	4811      	ldr	r0, [pc, #68]	; (80009a0 <writeOutputMode+0x68>)
 800095c:	f002 fc39 	bl	80031d2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000960:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000964:	b9a3      	cbnz	r3, 8000990 <writeOutputMode+0x58>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <writeOutputMode+0x68>)
 800096e:	f002 fc30 	bl	80031d2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000972:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097a:	4809      	ldr	r0, [pc, #36]	; (80009a0 <writeOutputMode+0x68>)
 800097c:	f002 fc29 	bl	80031d2 <HAL_GPIO_WritePin>
 8000980:	e7e5      	b.n	800094e <writeOutputMode+0x16>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <writeOutputMode+0x68>)
 800098a:	f002 fc22 	bl	80031d2 <HAL_GPIO_WritePin>
 800098e:	e7e7      	b.n	8000960 <writeOutputMode+0x28>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000996:	4802      	ldr	r0, [pc, #8]	; (80009a0 <writeOutputMode+0x68>)
 8000998:	f002 fc1b 	bl	80031d2 <HAL_GPIO_WritePin>
}
 800099c:	e7e9      	b.n	8000972 <writeOutputMode+0x3a>
 800099e:	bf00      	nop
 80009a0:	48000800 	.word	0x48000800

080009a4 <writeDuty>:

void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 80009a4:	ed90 7a00 	vldr	s14, [r0]
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <writeDuty+0x4c>)
 80009aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80009be:	ed90 7a01 	vldr	s14, [r0, #4]
 80009c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 80009d6:	ed90 7a02 	vldr	s14, [r0, #8]
 80009da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80009ee:	4770      	bx	lr
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <writeFreeRunCnt>:

void writeFreeRunCnt(uint16_t Cnt){
	TIM16 -> CNT = Cnt;
 80009f4:	4b01      	ldr	r3, [pc, #4]	; (80009fc <writeFreeRunCnt+0x8>)
 80009f6:	6258      	str	r0, [r3, #36]	; 0x24
}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40014400 	.word	0x40014400

08000a00 <readFreeRunCnt>:

uint16_t readFreeRunCnt(void){
	uint16_t Cnt;
	Cnt = TIM16 -> CNT;
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <readFreeRunCnt+0x8>)
 8000a02:	6a58      	ldr	r0, [r3, #36]	; 0x24
	return Cnt;
}
 8000a04:	b280      	uxth	r0, r0
 8000a06:	4770      	bx	lr
 8000a08:	40014400 	.word	0x40014400

08000a0c <calcVoltageMode>:

	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000a0c:	7883      	ldrb	r3, [r0, #2]
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	7842      	ldrb	r2, [r0, #1]
 8000a14:	0052      	lsls	r2, r2, #1
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	4413      	add	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	7800      	ldrb	r0, [r0, #0]
 8000a1e:	4418      	add	r0, r3
 8000a20:	b2c0      	uxtb	r0, r0

	// Decode digital signal to voltage mode
	switch(hallInput){
 8000a22:	1e43      	subs	r3, r0, #1
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d80c      	bhi.n	8000a42 <calcVoltageMode+0x36>
 8000a28:	e8df f003 	tbb	[pc, r3]
 8000a2c:	050e0d09 	.word	0x050e0d09
 8000a30:	0307      	.short	0x0307
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 8000a32:	2005      	movs	r0, #5
		break;
 8000a34:	4770      	bx	lr
	  case 4:
		voltageMode = 6;
 8000a36:	2006      	movs	r0, #6
		break;
 8000a38:	4770      	bx	lr
	  case 5:
		voltageMode = 1;
 8000a3a:	2001      	movs	r0, #1
		break;
 8000a3c:	4770      	bx	lr
	  case 1:
		voltageMode = 2;
 8000a3e:	2002      	movs	r0, #2
		break;
 8000a40:	4770      	bx	lr
	  default :
		voltageMode = 0;
 8000a42:	2000      	movs	r0, #0
	  break;
 8000a44:	4770      	bx	lr
		voltageMode = 4;
 8000a46:	2004      	movs	r0, #4
	}

	return voltageMode;
}
 8000a48:	4770      	bx	lr
	...

08000a4c <calcElectAngle>:
void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8000a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a50:	ed2d 8b04 	vpush	{d8-d9}
 8000a54:	4607      	mov	r7, r0
 8000a56:	ee08 1a90 	vmov	s17, r1
 8000a5a:	4615      	mov	r5, r2
 8000a5c:	461e      	mov	r6, r3
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8000a5e:	4c60      	ldr	r4, [pc, #384]	; (8000be0 <calcElectAngle+0x194>)
 8000a60:	ed94 7a00 	vldr	s14, [r4]
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 8000a64:	2200      	movs	r2, #0
 8000a66:	495f      	ldr	r1, [pc, #380]	; (8000be4 <calcElectAngle+0x198>)
 8000a68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a70:	ee17 0a90 	vmov	r0, s15
 8000a74:	f7ff fc0c 	bl	8000290 <gUpperLowerLimit>
 8000a78:	ee09 0a10 	vmov	s18, r0
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000a7c:	ed94 7a00 	vldr	s14, [r4]
 8000a80:	eddf 7a59 	vldr	s15, [pc, #356]	; 8000be8 <calcElectAngle+0x19c>
 8000a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a88:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8000a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000a94:	ee87 8a87 	vdiv.f32	s16, s15, s14
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000a98:	eddf 7a54 	vldr	s15, [pc, #336]	; 8000bec <calcElectAngle+0x1a0>
 8000a9c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8000aa0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000aa4:	ee27 8a88 	vmul.f32	s16, s15, s16
	sVoltageMode_pre = sVoltageMode;
 8000aa8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8000c24 <calcElectAngle+0x1d8>
 8000aac:	f898 4000 	ldrb.w	r4, [r8]
 8000ab0:	4b4f      	ldr	r3, [pc, #316]	; (8000bf0 <calcElectAngle+0x1a4>)
 8000ab2:	701c      	strb	r4, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	f7ff ffa9 	bl	8000a0c <calcVoltageMode>
 8000aba:	f888 0000 	strb.w	r0, [r8]
	sElectAngleActual_pre = sElectAngleActual;
 8000abe:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <calcElectAngle+0x1a8>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <calcElectAngle+0x1ac>)
 8000ac4:	601a      	str	r2, [r3, #0]

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8000ac6:	1b01      	subs	r1, r0, r4
 8000ac8:	b2cb      	uxtb	r3, r1
 8000aca:	b249      	sxtb	r1, r1

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8000acc:	2901      	cmp	r1, #1
 8000ace:	dd40      	ble.n	8000b52 <calcElectAngle+0x106>
		voltageMode_Diff -= 6;
 8000ad0:	3b06      	subs	r3, #6
 8000ad2:	b259      	sxtb	r1, r3
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8000ad4:	b109      	cbz	r1, 8000ada <calcElectAngle+0x8e>
		*rotDir = voltageMode_Diff;
 8000ad6:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <calcElectAngle+0x1b0>)
 8000ad8:	7019      	strb	r1, [r3, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000ada:	4b48      	ldr	r3, [pc, #288]	; (8000bfc <calcElectAngle+0x1b0>)
 8000adc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae0:	ee07 3a90 	vmov	s15, r3
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 8000ae4:	ee07 0a10 	vmov	s14, r0
 8000ae8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000aec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000af0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000af4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8000c00 <calcElectAngle+0x1b4>
 8000af8:	ee27 7a26 	vmul.f32	s14, s14, s13

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8000afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b00:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000c04 <calcElectAngle+0x1b8>
 8000b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b08:	ee77 7a67 	vsub.f32	s15, s14, s15
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000b0c:	4c39      	ldr	r4, [pc, #228]	; (8000bf4 <calcElectAngle+0x1a8>)
 8000b0e:	edc4 7a00 	vstr	s15, [r4]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000b12:	ee17 0a90 	vmov	r0, s15
 8000b16:	f7ff fb93 	bl	8000240 <gfWrapTheta>
 8000b1a:	6020      	str	r0, [r4, #0]
	sFlgPLL_pre = sFlgPLL;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <calcElectAngle+0x1bc>)
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	493a      	ldr	r1, [pc, #232]	; (8000c0c <calcElectAngle+0x1c0>)
 8000b22:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 8000b24:	701d      	strb	r5, [r3, #0]
	if(flgPLL == 1){
 8000b26:	2d01      	cmp	r5, #1
 8000b28:	d019      	beq.n	8000b5e <calcElectAngle+0x112>
		sElectAngleEstimate = sElectAngleActual;
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <calcElectAngle+0x1c4>)
 8000b2c:	6018      	str	r0, [r3, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 8000b2e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8000c14 <calcElectAngle+0x1c8>
 8000b32:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <calcElectAngle+0x194>)
 8000b38:	edc3 8a00 	vstr	s17, [r3]
	*electAngle = sElectAngleEstimate;
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <calcElectAngle+0x1c4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6033      	str	r3, [r6, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <calcElectAngle+0x194>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	ecbd 8b04 	vpop	{d8-d9}
 8000b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(voltageMode_Diff < -1)
 8000b52:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000b56:	dabd      	bge.n	8000ad4 <calcElectAngle+0x88>
		voltageMode_Diff += 6;
 8000b58:	3306      	adds	r3, #6
 8000b5a:	b259      	sxtb	r1, r3
 8000b5c:	e7ba      	b.n	8000ad4 <calcElectAngle+0x88>
		if ( sFlgPLL_pre == 0 ){
 8000b5e:	b95a      	cbnz	r2, 8000b78 <calcElectAngle+0x12c>
			sElectAngVeloEstimate = electFreq * TWOPI;
 8000b60:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8000c14 <calcElectAngle+0x1c8>
 8000b64:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <calcElectAngle+0x194>)
 8000b6a:	edc3 8a00 	vstr	s17, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <calcElectAngle+0x1cc>)
 8000b70:	edc3 8a00 	vstr	s17, [r3]
			sElectAngleEstimate = sElectAngleActual;
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <calcElectAngle+0x1c4>)
 8000b76:	6018      	str	r0, [r3, #0]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <calcElectAngle+0x194>)
 8000b7a:	edd3 6a00 	vldr	s13, [r3]
 8000b7e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c1c <calcElectAngle+0x1d0>
 8000b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b86:	4c22      	ldr	r4, [pc, #136]	; (8000c10 <calcElectAngle+0x1c4>)
 8000b88:	ed94 7a00 	vldr	s14, [r4]
 8000b8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b90:	edc4 7a00 	vstr	s15, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000b94:	ee17 0a90 	vmov	r0, s15
 8000b98:	f7ff fb52 	bl	8000240 <gfWrapTheta>
 8000b9c:	ee07 0a90 	vmov	s15, r0
 8000ba0:	6020      	str	r0, [r4, #0]
		if( sElectAngleActual != sElectAngleActual_pre){
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <calcElectAngle+0x1a8>)
 8000ba4:	ed93 7a00 	vldr	s14, [r3]
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <calcElectAngle+0x1ac>)
 8000baa:	edd3 6a00 	vldr	s13, [r3]
 8000bae:	eeb4 7a66 	vcmp.f32	s14, s13
 8000bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb6:	d0c1      	beq.n	8000b3c <calcElectAngle+0xf0>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	4c18      	ldr	r4, [pc, #96]	; (8000c20 <calcElectAngle+0x1d4>)
 8000bbe:	edc4 7a00 	vstr	s15, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000bc2:	ee17 0a90 	vmov	r0, s15
 8000bc6:	f7ff fb3b 	bl	8000240 <gfWrapTheta>
 8000bca:	6020      	str	r0, [r4, #0]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <calcElectAngle+0x1cc>)
 8000bce:	ee18 2a10 	vmov	r2, s16
 8000bd2:	ee19 1a10 	vmov	r1, s18
 8000bd6:	f7ff faf7 	bl	80001c8 <cfPhaseLockedLoop>
 8000bda:	4b01      	ldr	r3, [pc, #4]	; (8000be0 <calcElectAngle+0x194>)
 8000bdc:	6018      	str	r0, [r3, #0]
 8000bde:	e7ad      	b.n	8000b3c <calcElectAngle+0xf0>
 8000be0:	20000164 	.word	0x20000164
 8000be4:	43fa0000 	.word	0x43fa0000
 8000be8:	3e22f983 	.word	0x3e22f983
 8000bec:	3e4ccccd 	.word	0x3e4ccccd
 8000bf0:	20000182 	.word	0x20000182
 8000bf4:	20000168 	.word	0x20000168
 8000bf8:	2000016c 	.word	0x2000016c
 8000bfc:	20000180 	.word	0x20000180
 8000c00:	3f860a92 	.word	0x3f860a92
 8000c04:	3f060a92 	.word	0x3f060a92
 8000c08:	20000178 	.word	0x20000178
 8000c0c:	20000179 	.word	0x20000179
 8000c10:	20000174 	.word	0x20000174
 8000c14:	40c90fdb 	.word	0x40c90fdb
 8000c18:	2000017c 	.word	0x2000017c
 8000c1c:	467a0000 	.word	0x467a0000
 8000c20:	20000170 	.word	0x20000170
 8000c24:	20000181 	.word	0x20000181

08000c28 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000c28:	b084      	sub	sp, #16
 8000c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c2e:	ed2d 8b04 	vpush	{d8-d9}
 8000c32:	b09c      	sub	sp, #112	; 0x70
 8000c34:	ac26      	add	r4, sp, #152	; 0x98
 8000c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c3a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8000c3c:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 8000c3e:	9b35      	ldr	r3, [sp, #212]	; 0xd4

	outputMode[0] = OUTPUTMODE_POSITIVE;
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8000c44:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8000c46:	709a      	strb	r2, [r3, #2]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
}

static inline void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8000c48:	eddd 7a28 	vldr	s15, [sp, #160]	; 0xa0
 8000c4c:	ed9d 6a29 	vldr	s12, [sp, #164]	; 0xa4
 8000c50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c54:	ee26 8a07 	vmul.f32	s16, s12, s14
 8000c58:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8000c5c:	eddd 6a2a 	vldr	s13, [sp, #168]	; 0xa8
 8000c60:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000c64:	ee38 8a47 	vsub.f32	s16, s16, s14
 8000c68:	eddf 8ae6 	vldr	s17, [pc, #920]	; 8001004 <VectorControlTasks+0x3dc>
 8000c6c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000c70:	4ee5      	ldr	r6, [pc, #916]	; (8001008 <VectorControlTasks+0x3e0>)
 8000c72:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 8000c76:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800100c <VectorControlTasks+0x3e4>
 8000c7a:	ee26 9a07 	vmul.f32	s18, s12, s14
 8000c7e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000c82:	ee39 9a47 	vsub.f32	s18, s18, s14
 8000c86:	ee29 9a28 	vmul.f32	s18, s18, s17
 8000c8a:	ed86 9a01 	vstr	s18, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8000c8e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c96:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001010 <VectorControlTasks+0x3e8>
 8000c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9e:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8000ca2:	9f26      	ldr	r7, [sp, #152]	; 0x98
}

static inline void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f004 f993 	bl	8004fd0 <sinf>
 8000caa:	ee09 0a90 	vmov	s19, r0
	cosTheta = cosf(theta);
 8000cae:	4638      	mov	r0, r7
 8000cb0:	f004 f94e 	bl	8004f50 <cosf>
 8000cb4:	ee07 0a90 	vmov	s15, r0
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000cb8:	ee27 8a88 	vmul.f32	s16, s15, s16
 8000cbc:	ee29 9a89 	vmul.f32	s18, s19, s18
 8000cc0:	ee38 9a09 	vadd.f32	s18, s16, s18
 8000cc4:	ed84 9a04 	vstr	s18, [r4, #16]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000cc8:	ed96 7a00 	vldr	s14, [r6]
 8000ccc:	ee27 7a69 	vnmul.f32	s14, s14, s19
 8000cd0:	edd6 6a01 	vldr	s13, [r6, #4]
 8000cd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc4 7a05 	vstr	s15, [r4, #20]
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 8000ce0:	4fcc      	ldr	r7, [pc, #816]	; (8001014 <VectorControlTasks+0x3ec>)
 8000ce2:	4ecd      	ldr	r6, [pc, #820]	; (8001018 <VectorControlTasks+0x3f0>)
 8000ce4:	f104 0318 	add.w	r3, r4, #24
 8000ce8:	463a      	mov	r2, r7
 8000cea:	4631      	mov	r1, r6
 8000cec:	6920      	ldr	r0, [r4, #16]
 8000cee:	f7ff faef 	bl	80002d0 <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8000cf2:	f104 031c 	add.w	r3, r4, #28
 8000cf6:	463a      	mov	r2, r7
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	6960      	ldr	r0, [r4, #20]
 8000cfc:	f7ff fae8 	bl	80002d0 <gLPF>
	CurrentFbControl(sensData, vectorControlData);
 8000d00:	f10d 0c08 	add.w	ip, sp, #8
 8000d04:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 8000d08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d20:	f8de 3000 	ldr.w	r3, [lr]
 8000d24:	f8cc 3000 	str.w	r3, [ip]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
	Kid = Kig;

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8000d28:	ed94 7a02 	vldr	s14, [r4, #8]
 8000d2c:	ed94 5a04 	vldr	s10, [r4, #16]
 8000d30:	ee37 7a45 	vsub.f32	s14, s14, s10
 8000d34:	ed8d 7a00 	vstr	s14, [sp]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8000d38:	edd4 7a03 	vldr	s15, [r4, #12]
 8000d3c:	ed94 6a05 	vldr	s12, [r4, #20]
 8000d40:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000d44:	edcd 7a01 	vstr	s15, [sp, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8000d48:	eddf 5ab4 	vldr	s11, [pc, #720]	; 800101c <VectorControlTasks+0x3f4>
 8000d4c:	ee27 4a25 	vmul.f32	s8, s14, s11
 8000d50:	ed84 4a0a 	vstr	s8, [r4, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8000d54:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8000d58:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8000d5c:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8001020 <VectorControlTasks+0x3f8>
 8000d60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000d64:	edd4 4a0c 	vldr	s9, [r4, #48]	; 0x30
 8000d68:	ee37 7a24 	vadd.f32	s14, s14, s9
 8000d6c:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8000d70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d74:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8000d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d7c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8000d80:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000d84:	f10d 0e08 	add.w	lr, sp, #8
 8000d88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000da0:	f8de 3000 	ldr.w	r3, [lr]
 8000da4:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
}

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8000da8:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 8000dac:	eddf 4a9d 	vldr	s9, [pc, #628]	; 8001024 <VectorControlTasks+0x3fc>
 8000db0:	ee66 4ae4 	vnmul.f32	s9, s13, s9
 8000db4:	eddf 3a9c 	vldr	s7, [pc, #624]	; 8001028 <VectorControlTasks+0x400>
 8000db8:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8000dbc:	ee26 6a24 	vmul.f32	s12, s12, s9
 8000dc0:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8000dc4:	eddf 4a99 	vldr	s9, [pc, #612]	; 800102c <VectorControlTasks+0x404>
 8000dc8:	ee25 5a24 	vmul.f32	s10, s10, s9
 8000dcc:	eddf 4a98 	vldr	s9, [pc, #608]	; 8001030 <VectorControlTasks+0x408>
 8000dd0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8000dd4:	ee66 6a85 	vmul.f32	s13, s13, s10
 8000dd8:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8000ddc:	ee34 7a07 	vadd.f32	s14, s8, s14
 8000de0:	ee36 7a07 	vadd.f32	s14, s12, s14
 8000de4:	ed84 7a08 	vstr	s14, [r4, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8000de8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000df0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8000df4:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000df8:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 8000dfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e14:	f8de 3000 	ldr.w	r3, [lr]
 8000e18:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8000e1c:	ee17 1a10 	vmov	r1, s14
 8000e20:	ee17 0a90 	vmov	r0, s15
 8000e24:	f004 f916 	bl	8005054 <atan2f>
 8000e28:	6460      	str	r0, [r4, #68]	; 0x44
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8000e2a:	edd4 7a08 	vldr	s15, [r4, #32]
 8000e2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e32:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8000e36:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	ee17 0a90 	vmov	r0, s15
 8000e42:	f004 f92d 	bl	80050a0 <sqrtf>
 8000e46:	ee07 0a10 	vmov	s14, r0
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8000e4a:	6420      	str	r0, [r4, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8000e4c:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8000e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e54:	ee67 8aa8 	vmul.f32	s17, s15, s17
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8000e58:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	limitVoltVectAmp(sensData, vectorControlData);
 8000e5c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000e60:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 8000e64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e7c:	f8de 3000 	ldr.w	r3, [lr]
 8000e80:	f8cc 3000 	str.w	r3, [ip]
	if( vectorControlData->Mod > MODLIMIT ){
 8000e84:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8001034 <VectorControlTasks+0x40c>
 8000e88:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e90:	dd32      	ble.n	8000ef8 <VectorControlTasks+0x2d0>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8000e92:	ed9d 8a19 	vldr	s16, [sp, #100]	; 0x64
 8000e96:	eddf 7a68 	vldr	s15, [pc, #416]	; 8001038 <VectorControlTasks+0x410>
 8000e9a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e9e:	eddf 8a65 	vldr	s17, [pc, #404]	; 8001034 <VectorControlTasks+0x40c>
 8000ea2:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8000ea6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f004 f851 	bl	8004f50 <cosf>
 8000eae:	ee07 0a90 	vmov	s15, r0
 8000eb2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000eb6:	edc4 7a08 	vstr	s15, [r4, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 8000eba:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8000ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ec2:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8000ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eca:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f004 f87e 	bl	8004fd0 <sinf>
 8000ed4:	ee07 0a90 	vmov	s15, r0
 8000ed8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000edc:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 8000ee0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8000ee4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000ee8:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8000eec:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000ef0:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 8000ef4:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8000ef8:	9e26      	ldr	r6, [sp, #152]	; 0x98
	sinTheta = sinf(theta);
 8000efa:	4630      	mov	r0, r6
 8000efc:	f004 f868 	bl	8004fd0 <sinf>
 8000f00:	ee08 0a10 	vmov	s16, r0
	cosTheta = cosf(theta);
 8000f04:	4630      	mov	r0, r6
 8000f06:	f004 f823 	bl	8004f50 <cosf>
 8000f0a:	ee07 0a10 	vmov	s14, r0
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000f0e:	edd4 7a08 	vldr	s15, [r4, #32]
 8000f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f16:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8000f1a:	ee28 6a26 	vmul.f32	s12, s16, s13
 8000f1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000f22:	4b46      	ldr	r3, [pc, #280]	; (800103c <VectorControlTasks+0x414>)
 8000f24:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000f28:	ed94 6a08 	vldr	s12, [r4, #32]
 8000f2c:	ee28 8a06 	vmul.f32	s16, s16, s12
 8000f30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000f34:	ee38 8a07 	vadd.f32	s16, s16, s14
 8000f38:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8000f3c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001004 <VectorControlTasks+0x3dc>
 8000f40:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <VectorControlTasks+0x418>)
 8000f46:	ed83 7a00 	vstr	s14, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 8000f4a:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8000f4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000f52:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800100c <VectorControlTasks+0x3e4>
 8000f56:	ee28 8a06 	vmul.f32	s16, s16, s12
 8000f5a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000f5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f62:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8000f66:	eef1 6a47 	vneg.f32	s13, s14
 8000f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f6e:	edc3 7a02 	vstr	s15, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8000f72:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8000f76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f7a:	ed85 7a00 	vstr	s14, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8000f7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f86:	edc5 6a01 	vstr	s13, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8000f8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f92:	edc5 7a02 	vstr	s15, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8000f96:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <VectorControlTasks+0x41c>)
 8000f98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000f9c:	ee17 0a10 	vmov	r0, s14
 8000fa0:	f7ff f976 	bl	8000290 <gUpperLowerLimit>
 8000fa4:	6028      	str	r0, [r5, #0]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8000fa6:	4a27      	ldr	r2, [pc, #156]	; (8001044 <VectorControlTasks+0x41c>)
 8000fa8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000fac:	6868      	ldr	r0, [r5, #4]
 8000fae:	f7ff f96f 	bl	8000290 <gUpperLowerLimit>
 8000fb2:	6068      	str	r0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8000fb4:	4a23      	ldr	r2, [pc, #140]	; (8001044 <VectorControlTasks+0x41c>)
 8000fb6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000fba:	68a8      	ldr	r0, [r5, #8]
 8000fbc:	f7ff f968 	bl	8000290 <gUpperLowerLimit>
 8000fc0:	ee07 0a90 	vmov	s15, r0
 8000fc4:	60a8      	str	r0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8000fc6:	edd5 6a00 	vldr	s13, [r5]
 8000fca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fce:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000fd2:	ee76 6a87 	vadd.f32	s13, s13, s14
 8000fd6:	edc5 6a00 	vstr	s13, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8000fda:	edd5 6a01 	vldr	s13, [r5, #4]
 8000fde:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000fe2:	ee76 6a87 	vadd.f32	s13, s13, s14
 8000fe6:	edc5 6a01 	vstr	s13, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8000fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ff2:	edc5 7a02 	vstr	s15, [r5, #8]
}
 8000ff6:	b01c      	add	sp, #112	; 0x70
 8000ff8:	ecbd 8b04 	vpop	{d8-d9}
 8000ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001000:	b004      	add	sp, #16
 8001002:	4770      	bx	lr
 8001004:	3f5105ec 	.word	0x3f5105ec
 8001008:	20000184 	.word	0x20000184
 800100c:	3f5db3d7 	.word	0x3f5db3d7
 8001010:	3f13cd3a 	.word	0x3f13cd3a
 8001014:	3883126f 	.word	0x3883126f
 8001018:	42fb3333 	.word	0x42fb3333
 800101c:	3c45a6e4 	.word	0x3c45a6e4
 8001020:	3b77109e 	.word	0x3b77109e
 8001024:	39fba882 	.word	0x39fba882
 8001028:	3ecccccd 	.word	0x3ecccccd
 800102c:	3949539b 	.word	0x3949539b
 8001030:	3a870111 	.word	0x3a870111
 8001034:	3f933333 	.word	0x3f933333
 8001038:	3f1cc471 	.word	0x3f1cc471
 800103c:	20000194 	.word	0x20000194
 8001040:	2000019c 	.word	0x2000019c
 8001044:	bf800000 	.word	0xbf800000

08001048 <OpenLoopTasks>:
void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001048:	b084      	sub	sp, #16
 800104a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800104e:	ed2d 8b04 	vpush	{d8-d9}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	4680      	mov	r8, r0
 8001056:	ac1b      	add	r4, sp, #108	; 0x6c
 8001058:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800105c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800105e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8001060:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001066:	705a      	strb	r2, [r3, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001068:	709a      	strb	r2, [r3, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800106a:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 800106e:	ed9d 6a1e 	vldr	s12, [sp, #120]	; 0x78
 8001072:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001076:	ee26 8a07 	vmul.f32	s16, s12, s14
 800107a:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800107e:	eddd 6a1f 	vldr	s13, [sp, #124]	; 0x7c
 8001082:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001086:	ee38 8a47 	vsub.f32	s16, s16, s14
 800108a:	ed9f 9aab 	vldr	s18, [pc, #684]	; 8001338 <OpenLoopTasks+0x2f0>
 800108e:	ee28 8a09 	vmul.f32	s16, s16, s18
 8001092:	4faa      	ldr	r7, [pc, #680]	; (800133c <OpenLoopTasks+0x2f4>)
 8001094:	ed87 8a00 	vstr	s16, [r7]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 8001098:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001340 <OpenLoopTasks+0x2f8>
 800109c:	ee66 8a07 	vmul.f32	s17, s12, s14
 80010a0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80010a4:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80010a8:	ee68 8a89 	vmul.f32	s17, s17, s18
 80010ac:	edc7 8a01 	vstr	s17, [r7, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 80010b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80010b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010b8:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001344 <OpenLoopTasks+0x2fc>
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c0:	edc7 7a02 	vstr	s15, [r7, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 80010c4:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	sinTheta = sinf(theta);
 80010c8:	4650      	mov	r0, sl
 80010ca:	f003 ff81 	bl	8004fd0 <sinf>
 80010ce:	ee09 0a90 	vmov	s19, r0
	cosTheta = cosf(theta);
 80010d2:	4650      	mov	r0, sl
 80010d4:	f003 ff3c 	bl	8004f50 <cosf>
 80010d8:	ee07 0a90 	vmov	s15, r0
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 80010dc:	ee27 8a88 	vmul.f32	s16, s15, s16
 80010e0:	ee69 8aa8 	vmul.f32	s17, s19, s17
 80010e4:	ee78 8a28 	vadd.f32	s17, s16, s17
 80010e8:	edc5 8a04 	vstr	s17, [r5, #16]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 80010ec:	ed97 7a00 	vldr	s14, [r7]
 80010f0:	ee27 7a69 	vnmul.f32	s14, s14, s19
 80010f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80010f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc5 7a05 	vstr	s15, [r5, #20]
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 8001104:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8001360 <OpenLoopTasks+0x318>
 8001108:	4f8f      	ldr	r7, [pc, #572]	; (8001348 <OpenLoopTasks+0x300>)
 800110a:	f105 0318 	add.w	r3, r5, #24
 800110e:	464a      	mov	r2, r9
 8001110:	4639      	mov	r1, r7
 8001112:	6928      	ldr	r0, [r5, #16]
 8001114:	f7ff f8dc 	bl	80002d0 <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8001118:	f105 031c 	add.w	r3, r5, #28
 800111c:	464a      	mov	r2, r9
 800111e:	4639      	mov	r1, r7
 8001120:	6968      	ldr	r0, [r5, #20]
 8001122:	f7ff f8d5 	bl	80002d0 <gLPF>
	vectorControlData->Vdq[0] = 0.0f;
 8001126:	2700      	movs	r7, #0
 8001128:	622f      	str	r7, [r5, #32]
	vectorControlData->Vdq[1] = VamRef;
 800112a:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 800112e:	f10d 0c04 	add.w	ip, sp, #4
 8001132:	46a6      	mov	lr, r4
 8001134:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800113c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001140:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001144:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800114c:	f8de 3000 	ldr.w	r3, [lr]
 8001150:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001154:	4639      	mov	r1, r7
 8001156:	4640      	mov	r0, r8
 8001158:	f003 ff7c 	bl	8005054 <atan2f>
 800115c:	6468      	str	r0, [r5, #68]	; 0x44
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 800115e:	edd5 7a08 	vldr	s15, [r5, #32]
 8001162:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001166:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
 800116a:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 800116e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001172:	ee17 0a90 	vmov	r0, s15
 8001176:	f003 ff93 	bl	80050a0 <sqrtf>
 800117a:	ee07 0a10 	vmov	s14, r0
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 800117e:	6428      	str	r0, [r5, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001180:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	ee67 7a89 	vmul.f32	s15, s15, s18
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 800118c:	edc5 7a12 	vstr	s15, [r5, #72]	; 0x48
	limitVoltVectAmp(sensData, vectorControlData);
 8001190:	f10d 0e04 	add.w	lr, sp, #4
 8001194:	46a4      	mov	ip, r4
 8001196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800119a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800119e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011ae:	f8dc 3000 	ldr.w	r3, [ip]
 80011b2:	f8ce 3000 	str.w	r3, [lr]
	if( vectorControlData->Mod > MODLIMIT ){
 80011b6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800134c <OpenLoopTasks+0x304>
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	dd32      	ble.n	800122a <OpenLoopTasks+0x1e2>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 80011c4:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 80011c8:	eddf 7a61 	vldr	s15, [pc, #388]	; 8001350 <OpenLoopTasks+0x308>
 80011cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80011d0:	eef0 8a47 	vmov.f32	s17, s14
 80011d4:	ee28 8a07 	vmul.f32	s16, s16, s14
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 80011d8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80011da:	4620      	mov	r0, r4
 80011dc:	f003 feb8 	bl	8004f50 <cosf>
 80011e0:	ee07 0a90 	vmov	s15, r0
 80011e4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011e8:	edc5 7a08 	vstr	s15, [r5, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 80011ec:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80011f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f4:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
 80011f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011fc:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8001200:	4620      	mov	r0, r4
 8001202:	f003 fee5 	bl	8004fd0 <sinf>
 8001206:	ee07 0a90 	vmov	s15, r0
 800120a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800120e:	ed85 8a09 	vstr	s16, [r5, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 8001212:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8001216:	ee38 8a67 	vsub.f32	s16, s16, s15
 800121a:	edd5 7a0f 	vldr	s15, [r5, #60]	; 0x3c
 800121e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001222:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 8001226:	edc5 8a12 	vstr	s17, [r5, #72]	; 0x48
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 800122a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
	sinTheta = sinf(theta);
 800122c:	4620      	mov	r0, r4
 800122e:	f003 fecf 	bl	8004fd0 <sinf>
 8001232:	ee08 0a10 	vmov	s16, r0
	cosTheta = cosf(theta);
 8001236:	4620      	mov	r0, r4
 8001238:	f003 fe8a 	bl	8004f50 <cosf>
 800123c:	ee07 0a10 	vmov	s14, r0
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001240:	edd5 7a08 	vldr	s15, [r5, #32]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	edd5 6a09 	vldr	s13, [r5, #36]	; 0x24
 800124c:	ee28 6a26 	vmul.f32	s12, s16, s13
 8001250:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <OpenLoopTasks+0x30c>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 800125a:	ed95 6a08 	vldr	s12, [r5, #32]
 800125e:	ee28 8a06 	vmul.f32	s16, s16, s12
 8001262:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001266:	ee38 8a07 	vadd.f32	s16, s16, s14
 800126a:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 800126e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001338 <OpenLoopTasks+0x2f0>
 8001272:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <OpenLoopTasks+0x310>)
 8001278:	ed83 7a00 	vstr	s14, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 800127c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8001280:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001284:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8001340 <OpenLoopTasks+0x2f8>
 8001288:	ee28 8a06 	vmul.f32	s16, s16, s12
 800128c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001294:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001298:	eef1 6a47 	vneg.f32	s13, s14
 800129c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012a0:	edc3 7a02 	vstr	s15, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 80012a4:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
	Duty[0] = (Vuvw[0] * twoDivVdc);
 80012a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ac:	ed86 7a00 	vstr	s14, [r6]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 80012b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80012b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012b8:	edc6 6a01 	vstr	s13, [r6, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 80012bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80012c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012c4:	edc6 7a02 	vstr	s15, [r6, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 80012c8:	4a24      	ldr	r2, [pc, #144]	; (800135c <OpenLoopTasks+0x314>)
 80012ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80012ce:	ee17 0a10 	vmov	r0, s14
 80012d2:	f7fe ffdd 	bl	8000290 <gUpperLowerLimit>
 80012d6:	6030      	str	r0, [r6, #0]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <OpenLoopTasks+0x314>)
 80012da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80012de:	6870      	ldr	r0, [r6, #4]
 80012e0:	f7fe ffd6 	bl	8000290 <gUpperLowerLimit>
 80012e4:	6070      	str	r0, [r6, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 80012e6:	4a1d      	ldr	r2, [pc, #116]	; (800135c <OpenLoopTasks+0x314>)
 80012e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80012ec:	68b0      	ldr	r0, [r6, #8]
 80012ee:	f7fe ffcf 	bl	8000290 <gUpperLowerLimit>
 80012f2:	ee07 0a90 	vmov	s15, r0
 80012f6:	60b0      	str	r0, [r6, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 80012f8:	edd6 6a00 	vldr	s13, [r6]
 80012fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001300:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001304:	ee76 6a87 	vadd.f32	s13, s13, s14
 8001308:	edc6 6a00 	vstr	s13, [r6]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 800130c:	edd6 6a01 	vldr	s13, [r6, #4]
 8001310:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001314:	ee76 6a87 	vadd.f32	s13, s13, s14
 8001318:	edc6 6a01 	vstr	s13, [r6, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001324:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8001328:	b00e      	add	sp, #56	; 0x38
 800132a:	ecbd 8b04 	vpop	{d8-d9}
 800132e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001332:	b004      	add	sp, #16
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	3f5105ec 	.word	0x3f5105ec
 800133c:	20000184 	.word	0x20000184
 8001340:	3f5db3d7 	.word	0x3f5db3d7
 8001344:	3f13cd3a 	.word	0x3f13cd3a
 8001348:	42fb3333 	.word	0x42fb3333
 800134c:	3f933333 	.word	0x3f933333
 8001350:	3f1cc471 	.word	0x3f1cc471
 8001354:	20000194 	.word	0x20000194
 8001358:	2000019c 	.word	0x2000019c
 800135c:	bf800000 	.word	0xbf800000
 8001360:	3883126f 	.word	0x3883126f

08001364 <calcElectAngleEstimate>:
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
	return angleErr;
}

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001364:	b084      	sub	sp, #16
 8001366:	b530      	push	{r4, r5, lr}
 8001368:	ed2d 8b04 	vpush	{d8-d9}
 800136c:	b085      	sub	sp, #20
 800136e:	4605      	mov	r5, r0
 8001370:	a80d      	add	r0, sp, #52	; 0x34
 8001372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001376:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001378:	ed94 6a03 	vldr	s12, [r4, #12]
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 800137c:	eddd 6a1e 	vldr	s13, [sp, #120]	; 0x78
 8001380:	eddf 5a36 	vldr	s11, [pc, #216]	; 800145c <calcElectAngleEstimate+0xf8>
 8001384:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8001388:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 800138c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001390:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001460 <calcElectAngleEstimate+0xfc>
 8001394:	ee26 6a07 	vmul.f32	s12, s12, s14
 8001398:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
 800139c:	ee26 5a07 	vmul.f32	s10, s12, s14
 80013a0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80013a4:	edcd 7a01 	vstr	s15, [sp, #4]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 80013a8:	ee67 5a25 	vmul.f32	s11, s14, s11
 80013ac:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 80013b0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80013b4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80013b8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80013bc:	ed8d 7a02 	vstr	s14, [sp, #8]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 80013c0:	ee17 1a10 	vmov	r1, s14
 80013c4:	eef1 7a67 	vneg.f32	s15, s15
 80013c8:	ee17 0a90 	vmov	r0, s15
 80013cc:	f003 fe42 	bl	8005054 <atan2f>
	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 80013d0:	6060      	str	r0, [r4, #4]


	if( flgInit == 0){
 80013d2:	b975      	cbnz	r5, 80013f2 <calcElectAngleEstimate+0x8e>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 80013d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80013d6:	60a3      	str	r3, [r4, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 80013d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80013da:	60e3      	str	r3, [r4, #12]
		electAngleEstimateData->wc_PLL = 0.0f;
 80013dc:	2200      	movs	r2, #0
 80013de:	6022      	str	r2, [r4, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <calcElectAngleEstimate+0x100>)
 80013e2:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 80013e4:	b005      	add	sp, #20
 80013e6:	ecbd 8b04 	vpop	{d8-d9}
 80013ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013ee:	b004      	add	sp, #16
 80013f0:	4770      	bx	lr
		wc_PLL = electAngleEstimateData->wc_PLL;
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	9303      	str	r3, [sp, #12]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 80013f6:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 8001468 <calcElectAngleEstimate+0x104>
 80013fa:	ab03      	add	r3, sp, #12
 80013fc:	ee19 2a10 	vmov	r2, s18
 8001400:	491a      	ldr	r1, [pc, #104]	; (800146c <calcElectAngleEstimate+0x108>)
 8001402:	481b      	ldr	r0, [pc, #108]	; (8001470 <calcElectAngleEstimate+0x10c>)
 8001404:	f7fe ff7b 	bl	80002fe <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001408:	eddd 8a03 	vldr	s17, [sp, #12]
 800140c:	edc4 8a00 	vstr	s17, [r4]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001410:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8001474 <calcElectAngleEstimate+0x110>
 8001414:	ee28 8a88 	vmul.f32	s16, s17, s16
 8001418:	ee28 8a88 	vmul.f32	s16, s17, s16
 800141c:	ee28 8a09 	vmul.f32	s16, s16, s18
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001420:	edd4 6a03 	vldr	s13, [r4, #12]
 8001424:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001478 <calcElectAngleEstimate+0x114>
 8001428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142c:	ed94 7a02 	vldr	s14, [r4, #8]
 8001430:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001434:	edc4 7a02 	vstr	s15, [r4, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7fe ff00 	bl	8000240 <gfWrapTheta>
 8001440:	60a0      	str	r0, [r4, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001442:	6860      	ldr	r0, [r4, #4]
 8001444:	f7fe fefc 	bl	8000240 <gfWrapTheta>
 8001448:	6060      	str	r0, [r4, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <calcElectAngleEstimate+0x100>)
 800144c:	ee18 2a10 	vmov	r2, s16
 8001450:	ee18 1a90 	vmov	r1, s17
 8001454:	f7fe feb8 	bl	80001c8 <cfPhaseLockedLoop>
 8001458:	60e0      	str	r0, [r4, #12]
}
 800145a:	e7c3      	b.n	80013e4 <calcElectAngleEstimate+0x80>
 800145c:	3f75c28f 	.word	0x3f75c28f
 8001460:	3949539b 	.word	0x3949539b
 8001464:	20000190 	.word	0x20000190
 8001468:	3883126f 	.word	0x3883126f
 800146c:	42480000 	.word	0x42480000
 8001470:	449d1463 	.word	0x449d1463
 8001474:	3e4ccccd 	.word	0x3e4ccccd
 8001478:	467a0000 	.word	0x467a0000

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	2400      	movs	r4, #0
 8001482:	9405      	str	r4, [sp, #20]
 8001484:	9406      	str	r4, [sp, #24]
 8001486:	9407      	str	r4, [sp, #28]
 8001488:	9408      	str	r4, [sp, #32]
 800148a:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <MX_GPIO_Init+0xb8>)
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800149c:	9201      	str	r2, [sp, #4]
 800149e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80014ae:	9202      	str	r2, [sp, #8]
 80014b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014c0:	9203      	str	r2, [sp, #12]
 80014c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014d6:	4f18      	ldr	r7, [pc, #96]	; (8001538 <MX_GPIO_Init+0xbc>)
 80014d8:	4622      	mov	r2, r4
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	4638      	mov	r0, r7
 80014e0:	f001 fe77 	bl	80031d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80014e4:	4d15      	ldr	r5, [pc, #84]	; (800153c <MX_GPIO_Init+0xc0>)
 80014e6:	4622      	mov	r2, r4
 80014e8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80014ec:	4628      	mov	r0, r5
 80014ee:	f001 fe70 	bl	80031d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80014f6:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014fc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001500:	a905      	add	r1, sp, #20
 8001502:	4628      	mov	r0, r5
 8001504:	f001 fd80 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001508:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2601      	movs	r6, #1
 800150c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001512:	a905      	add	r1, sp, #20
 8001514:	4638      	mov	r0, r7
 8001516:	f001 fd77 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 800151a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800151e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	a905      	add	r1, sp, #20
 8001528:	4628      	mov	r0, r5
 800152a:	f001 fd6d 	bl	8003008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	b00b      	add	sp, #44	; 0x2c
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800

08001540 <MX_DMA_Init>:
{
 8001540:	b500      	push	{lr}
 8001542:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_DMA_Init+0x30>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	2100      	movs	r1, #0
 800155c:	200b      	movs	r0, #11
 800155e:	f001 fc15 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001562:	200b      	movs	r0, #11
 8001564:	f001 fc4a 	bl	8002dfc <HAL_NVIC_EnableIRQ>
}
 8001568:	b003      	add	sp, #12
 800156a:	f85d fb04 	ldr.w	pc, [sp], #4
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001576:	e7fe      	b.n	8001576 <Error_Handler+0x2>

08001578 <MX_USART2_UART_Init>:
{
 8001578:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_USART2_UART_Init+0x30>)
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x34>)
 800157e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8001580:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001584:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	2300      	movs	r3, #0
 8001588:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158e:	220c      	movs	r2, #12
 8001590:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159a:	f003 fca8 	bl	8004eee <HAL_UART_Init>
 800159e:	b900      	cbnz	r0, 80015a2 <MX_USART2_UART_Init+0x2a>
}
 80015a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015a2:	f7ff ffe7 	bl	8001574 <Error_Handler>
 80015a6:	bf00      	nop
 80015a8:	2000036c 	.word	0x2000036c
 80015ac:	40004400 	.word	0x40004400

080015b0 <MX_ADC1_Init>:
{
 80015b0:	b510      	push	{r4, lr}
 80015b2:	b090      	sub	sp, #64	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 80015b4:	2400      	movs	r4, #0
 80015b6:	940a      	str	r4, [sp, #40]	; 0x28
 80015b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80015ba:	940c      	str	r4, [sp, #48]	; 0x30
 80015bc:	940d      	str	r4, [sp, #52]	; 0x34
 80015be:	940e      	str	r4, [sp, #56]	; 0x38
 80015c0:	940f      	str	r4, [sp, #60]	; 0x3c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015c2:	2228      	movs	r2, #40	; 0x28
 80015c4:	4621      	mov	r1, r4
 80015c6:	4668      	mov	r0, sp
 80015c8:	f004 fcde 	bl	8005f88 <memset>
  hadc1.Instance = ADC1;
 80015cc:	4835      	ldr	r0, [pc, #212]	; (80016a4 <MX_ADC1_Init+0xf4>)
 80015ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015d2:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015d4:	6044      	str	r4, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d6:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015d8:	2301      	movs	r3, #1
 80015da:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015dc:	7643      	strb	r3, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015de:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 80015e8:	2202      	movs	r2, #2
 80015ea:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015ec:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f0:	2304      	movs	r3, #4
 80015f2:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015f4:	7604      	strb	r4, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015f6:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f8:	f000 fd58 	bl	80020ac <HAL_ADC_Init>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d144      	bne.n	800168a <MX_ADC1_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_2;
 8001600:	2302      	movs	r3, #2
 8001602:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001604:	2301      	movs	r3, #1
 8001606:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001608:	2300      	movs	r3, #0
 800160a:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800160c:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800160e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 8001610:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001612:	a90a      	add	r1, sp, #40	; 0x28
 8001614:	4823      	ldr	r0, [pc, #140]	; (80016a4 <MX_ADC1_Init+0xf4>)
 8001616:	f001 f809 	bl	800262c <HAL_ADC_ConfigChannel>
 800161a:	2800      	cmp	r0, #0
 800161c:	d137      	bne.n	800168e <MX_ADC1_Init+0xde>
  sConfig.Channel = ADC_CHANNEL_12;
 800161e:	230c      	movs	r3, #12
 8001620:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001622:	2302      	movs	r3, #2
 8001624:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001626:	a90a      	add	r1, sp, #40	; 0x28
 8001628:	481e      	ldr	r0, [pc, #120]	; (80016a4 <MX_ADC1_Init+0xf4>)
 800162a:	f000 ffff 	bl	800262c <HAL_ADC_ConfigChannel>
 800162e:	2800      	cmp	r0, #0
 8001630:	d12f      	bne.n	8001692 <MX_ADC1_Init+0xe2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001632:	2301      	movs	r3, #1
 8001634:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001636:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001638:	2300      	movs	r3, #0
 800163a:	9303      	str	r3, [sp, #12]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800163c:	2203      	movs	r2, #3
 800163e:	9206      	str	r2, [sp, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001640:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8001646:	9308      	str	r3, [sp, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001648:	f88d 301d 	strb.w	r3, [sp, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800164c:	f88d 301c 	strb.w	r3, [sp, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001650:	f88d 301e 	strb.w	r3, [sp, #30]
  sConfigInjected.InjectedOffset = 0;
 8001654:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001656:	9304      	str	r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001658:	4669      	mov	r1, sp
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <MX_ADC1_Init+0xf4>)
 800165c:	f001 f992 	bl	8002984 <HAL_ADCEx_InjectedConfigChannel>
 8001660:	b9c8      	cbnz	r0, 8001696 <MX_ADC1_Init+0xe6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001662:	2307      	movs	r3, #7
 8001664:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001666:	2302      	movs	r3, #2
 8001668:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800166a:	4669      	mov	r1, sp
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_ADC1_Init+0xf4>)
 800166e:	f001 f989 	bl	8002984 <HAL_ADCEx_InjectedConfigChannel>
 8001672:	b990      	cbnz	r0, 800169a <MX_ADC1_Init+0xea>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001674:	2306      	movs	r3, #6
 8001676:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001678:	2303      	movs	r3, #3
 800167a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800167c:	4669      	mov	r1, sp
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_ADC1_Init+0xf4>)
 8001680:	f001 f980 	bl	8002984 <HAL_ADCEx_InjectedConfigChannel>
 8001684:	b958      	cbnz	r0, 800169e <MX_ADC1_Init+0xee>
}
 8001686:	b010      	add	sp, #64	; 0x40
 8001688:	bd10      	pop	{r4, pc}
    Error_Handler();
 800168a:	f7ff ff73 	bl	8001574 <Error_Handler>
    Error_Handler();
 800168e:	f7ff ff71 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001692:	f7ff ff6f 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001696:	f7ff ff6d 	bl	8001574 <Error_Handler>
    Error_Handler();
 800169a:	f7ff ff6b 	bl	8001574 <Error_Handler>
    Error_Handler();
 800169e:	f7ff ff69 	bl	8001574 <Error_Handler>
 80016a2:	bf00      	nop
 80016a4:	200001a8 	.word	0x200001a8

080016a8 <MX_TIM1_Init>:
{
 80016a8:	b510      	push	{r4, lr}
 80016aa:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	2400      	movs	r4, #0
 80016ae:	9413      	str	r4, [sp, #76]	; 0x4c
 80016b0:	9414      	str	r4, [sp, #80]	; 0x50
 80016b2:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b4:	940c      	str	r4, [sp, #48]	; 0x30
 80016b6:	940d      	str	r4, [sp, #52]	; 0x34
 80016b8:	940e      	str	r4, [sp, #56]	; 0x38
 80016ba:	940f      	str	r4, [sp, #60]	; 0x3c
 80016bc:	9410      	str	r4, [sp, #64]	; 0x40
 80016be:	9411      	str	r4, [sp, #68]	; 0x44
 80016c0:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c2:	222c      	movs	r2, #44	; 0x2c
 80016c4:	4621      	mov	r1, r4
 80016c6:	a801      	add	r0, sp, #4
 80016c8:	f004 fc5e 	bl	8005f88 <memset>
  htim1.Instance = TIM1;
 80016cc:	4835      	ldr	r0, [pc, #212]	; (80017a4 <MX_TIM1_Init+0xfc>)
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <MX_TIM1_Init+0x100>)
 80016d0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80016d2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80016d4:	2320      	movs	r3, #32
 80016d6:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 2000 - 1;
 80016d8:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80016dc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016e4:	f002 fdda 	bl	800429c <HAL_TIM_PWM_Init>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d14c      	bne.n	8001786 <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80016ec:	2370      	movs	r3, #112	; 0x70
 80016ee:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f6:	a913      	add	r1, sp, #76	; 0x4c
 80016f8:	482a      	ldr	r0, [pc, #168]	; (80017a4 <MX_TIM1_Init+0xfc>)
 80016fa:	f003 f989 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d143      	bne.n	800178a <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	; 0x60
 8001704:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001706:	2200      	movs	r2, #0
 8001708:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800170c:	2308      	movs	r3, #8
 800170e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001710:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001712:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001714:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	a90c      	add	r1, sp, #48	; 0x30
 8001718:	4822      	ldr	r0, [pc, #136]	; (80017a4 <MX_TIM1_Init+0xfc>)
 800171a:	f002 fe5f 	bl	80043dc <HAL_TIM_PWM_ConfigChannel>
 800171e:	2800      	cmp	r0, #0
 8001720:	d135      	bne.n	800178e <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001722:	2204      	movs	r2, #4
 8001724:	a90c      	add	r1, sp, #48	; 0x30
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <MX_TIM1_Init+0xfc>)
 8001728:	f002 fe58 	bl	80043dc <HAL_TIM_PWM_ConfigChannel>
 800172c:	2800      	cmp	r0, #0
 800172e:	d130      	bne.n	8001792 <MX_TIM1_Init+0xea>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001734:	2208      	movs	r2, #8
 8001736:	a90c      	add	r1, sp, #48	; 0x30
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <MX_TIM1_Init+0xfc>)
 800173a:	f002 fe4f 	bl	80043dc <HAL_TIM_PWM_ConfigChannel>
 800173e:	bb50      	cbnz	r0, 8001796 <MX_TIM1_Init+0xee>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001740:	2370      	movs	r3, #112	; 0x70
 8001742:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001744:	220c      	movs	r2, #12
 8001746:	a90c      	add	r1, sp, #48	; 0x30
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <MX_TIM1_Init+0xfc>)
 800174a:	f002 fe47 	bl	80043dc <HAL_TIM_PWM_ConfigChannel>
 800174e:	bb20      	cbnz	r0, 800179a <MX_TIM1_Init+0xf2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001754:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001756:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001758:	220a      	movs	r2, #10
 800175a:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800175c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001764:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001766:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176c:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800176e:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001770:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001772:	a901      	add	r1, sp, #4
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <MX_TIM1_Init+0xfc>)
 8001776:	f003 f983 	bl	8004a80 <HAL_TIMEx_ConfigBreakDeadTime>
 800177a:	b980      	cbnz	r0, 800179e <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <MX_TIM1_Init+0xfc>)
 800177e:	f000 faa5 	bl	8001ccc <HAL_TIM_MspPostInit>
}
 8001782:	b016      	add	sp, #88	; 0x58
 8001784:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001786:	f7ff fef5 	bl	8001574 <Error_Handler>
    Error_Handler();
 800178a:	f7ff fef3 	bl	8001574 <Error_Handler>
    Error_Handler();
 800178e:	f7ff fef1 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001792:	f7ff feef 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001796:	f7ff feed 	bl	8001574 <Error_Handler>
    Error_Handler();
 800179a:	f7ff feeb 	bl	8001574 <Error_Handler>
    Error_Handler();
 800179e:	f7ff fee9 	bl	8001574 <Error_Handler>
 80017a2:	bf00      	nop
 80017a4:	2000023c 	.word	0x2000023c
 80017a8:	40012c00 	.word	0x40012c00

080017ac <MX_TIM2_Init>:
{
 80017ac:	b500      	push	{lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	2300      	movs	r3, #0
 80017b2:	9305      	str	r3, [sp, #20]
 80017b4:	9306      	str	r3, [sp, #24]
 80017b6:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	9304      	str	r3, [sp, #16]
  htim2.Instance = TIM2;
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <MX_TIM2_Init+0x8c>)
 80017c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80017c8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017d6:	f002 fd91 	bl	80042fc <HAL_TIM_IC_Init>
 80017da:	bb10      	cbnz	r0, 8001822 <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e2:	a905      	add	r1, sp, #20
 80017e4:	4814      	ldr	r0, [pc, #80]	; (8001838 <MX_TIM2_Init+0x8c>)
 80017e6:	f003 f913 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	b9e0      	cbnz	r0, 8001826 <MX_TIM2_Init+0x7a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ec:	2200      	movs	r2, #0
 80017ee:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017f0:	2301      	movs	r3, #1
 80017f2:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f4:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 0;
 80017f6:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	a901      	add	r1, sp, #4
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <MX_TIM2_Init+0x8c>)
 80017fc:	f002 feb4 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 8001800:	b998      	cbnz	r0, 800182a <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001802:	2204      	movs	r2, #4
 8001804:	eb0d 0102 	add.w	r1, sp, r2
 8001808:	480b      	ldr	r0, [pc, #44]	; (8001838 <MX_TIM2_Init+0x8c>)
 800180a:	f002 fead 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 800180e:	b970      	cbnz	r0, 800182e <MX_TIM2_Init+0x82>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001810:	2208      	movs	r2, #8
 8001812:	a901      	add	r1, sp, #4
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <MX_TIM2_Init+0x8c>)
 8001816:	f002 fea7 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 800181a:	b950      	cbnz	r0, 8001832 <MX_TIM2_Init+0x86>
}
 800181c:	b009      	add	sp, #36	; 0x24
 800181e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001822:	f7ff fea7 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001826:	f7ff fea5 	bl	8001574 <Error_Handler>
    Error_Handler();
 800182a:	f7ff fea3 	bl	8001574 <Error_Handler>
    Error_Handler();
 800182e:	f7ff fea1 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001832:	f7ff fe9f 	bl	8001574 <Error_Handler>
 8001836:	bf00      	nop
 8001838:	200002d4 	.word	0x200002d4

0800183c <MX_TIM6_Init>:
{
 800183c:	b500      	push	{lr}
 800183e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_TIM6_Init+0x44>)
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <MX_TIM6_Init+0x48>)
 800184c:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 0;
 800184e:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 10000;
 8001852:	f242 7210 	movw	r2, #10000	; 0x2710
 8001856:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001858:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800185a:	f002 fcef 	bl	800423c <HAL_TIM_Base_Init>
 800185e:	b950      	cbnz	r0, 8001876 <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001866:	a901      	add	r1, sp, #4
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM6_Init+0x44>)
 800186a:	f003 f8d1 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	b920      	cbnz	r0, 800187a <MX_TIM6_Init+0x3e>
}
 8001870:	b005      	add	sp, #20
 8001872:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001876:	f7ff fe7d 	bl	8001574 <Error_Handler>
    Error_Handler();
 800187a:	f7ff fe7b 	bl	8001574 <Error_Handler>
 800187e:	bf00      	nop
 8001880:	20000320 	.word	0x20000320
 8001884:	40001000 	.word	0x40001000

08001888 <MX_TIM16_Init>:
{
 8001888:	b508      	push	{r3, lr}
  htim16.Instance = TIM16;
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <MX_TIM16_Init+0x28>)
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_TIM16_Init+0x2c>)
 800188e:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 65535;
 8001896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189a:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 800189e:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018a2:	f002 fccb 	bl	800423c <HAL_TIM_Base_Init>
 80018a6:	b900      	cbnz	r0, 80018aa <MX_TIM16_Init+0x22>
}
 80018a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018aa:	f7ff fe63 	bl	8001574 <Error_Handler>
 80018ae:	bf00      	nop
 80018b0:	20000288 	.word	0x20000288
 80018b4:	40014400 	.word	0x40014400

080018b8 <SystemClock_Config>:
{
 80018b8:	b500      	push	{lr}
 80018ba:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018bc:	2228      	movs	r2, #40	; 0x28
 80018be:	2100      	movs	r1, #0
 80018c0:	a812      	add	r0, sp, #72	; 0x48
 80018c2:	f004 fb61 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c6:	2100      	movs	r1, #0
 80018c8:	910d      	str	r1, [sp, #52]	; 0x34
 80018ca:	910e      	str	r1, [sp, #56]	; 0x38
 80018cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80018ce:	9110      	str	r1, [sp, #64]	; 0x40
 80018d0:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d2:	2234      	movs	r2, #52	; 0x34
 80018d4:	4668      	mov	r0, sp
 80018d6:	f004 fb57 	bl	8005f88 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018da:	2301      	movs	r3, #1
 80018dc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018de:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80018e2:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ee:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018f4:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f6:	a812      	add	r0, sp, #72	; 0x48
 80018f8:	f001 fc7a 	bl	80031f0 <HAL_RCC_OscConfig>
 80018fc:	b9e0      	cbnz	r0, 8001938 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fe:	230f      	movs	r3, #15
 8001900:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001902:	2102      	movs	r1, #2
 8001904:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001910:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001912:	a80d      	add	r0, sp, #52	; 0x34
 8001914:	f001 ffbe 	bl	8003894 <HAL_RCC_ClockConfig>
 8001918:	b980      	cbnz	r0, 800193c <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <SystemClock_Config+0x8c>)
 800191c:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800191e:	2300      	movs	r3, #0
 8001920:	9308      	str	r3, [sp, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001922:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001928:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192a:	4668      	mov	r0, sp
 800192c:	f002 f8b8 	bl	8003aa0 <HAL_RCCEx_PeriphCLKConfig>
 8001930:	b930      	cbnz	r0, 8001940 <SystemClock_Config+0x88>
}
 8001932:	b01d      	add	sp, #116	; 0x74
 8001934:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001938:	f7ff fe1c 	bl	8001574 <Error_Handler>
    Error_Handler();
 800193c:	f7ff fe1a 	bl	8001574 <Error_Handler>
    Error_Handler();
 8001940:	f7ff fe18 	bl	8001574 <Error_Handler>
 8001944:	00081080 	.word	0x00081080

08001948 <main>:
{
 8001948:	b508      	push	{r3, lr}
  HAL_Init();
 800194a:	f000 facb 	bl	8001ee4 <HAL_Init>
  SystemClock_Config();
 800194e:	f7ff ffb3 	bl	80018b8 <SystemClock_Config>
  MX_GPIO_Init();
 8001952:	f7ff fd93 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 8001956:	f7ff fdf3 	bl	8001540 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800195a:	f7ff fe0d 	bl	8001578 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800195e:	f7ff fe27 	bl	80015b0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001962:	f7ff fea1 	bl	80016a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001966:	f7ff ff21 	bl	80017ac <MX_TIM2_Init>
  MX_TIM6_Init();
 800196a:	f7ff ff67 	bl	800183c <MX_TIM6_Init>
  MX_TIM16_Init();
 800196e:	f7ff ff8b 	bl	8001888 <MX_TIM16_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001972:	4c36      	ldr	r4, [pc, #216]	; (8001a4c <main+0x104>)
 8001974:	4620      	mov	r0, r4
 8001976:	f002 fb19 	bl	8003fac <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800197a:	4d35      	ldr	r5, [pc, #212]	; (8001a50 <main+0x108>)
 800197c:	4628      	mov	r0, r5
 800197e:	f000 fcf3 	bl	8002368 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001982:	4e34      	ldr	r6, [pc, #208]	; (8001a54 <main+0x10c>)
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198a:	4630      	mov	r0, r6
 800198c:	f001 fc21 	bl	80031d2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001996:	4630      	mov	r0, r6
 8001998:	f001 fc1b 	bl	80031d2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4630      	mov	r0, r6
 80019a4:	f001 fc15 	bl	80031d2 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019a8:	2100      	movs	r1, #0
 80019aa:	4620      	mov	r0, r4
 80019ac:	f002 fe4e 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80019b0:	2100      	movs	r1, #0
 80019b2:	4620      	mov	r0, r4
 80019b4:	f002 ffbe 	bl	8004934 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019b8:	2104      	movs	r1, #4
 80019ba:	4620      	mov	r0, r4
 80019bc:	f002 fe46 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80019c0:	2104      	movs	r1, #4
 80019c2:	4620      	mov	r0, r4
 80019c4:	f002 ffb6 	bl	8004934 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019c8:	2108      	movs	r1, #8
 80019ca:	4620      	mov	r0, r4
 80019cc:	f002 fe3e 	bl	800464c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80019d0:	2108      	movs	r1, #8
 80019d2:	4620      	mov	r0, r4
 80019d4:	f002 ffae 	bl	8004934 <HAL_TIMEx_PWMN_Start>
  TIM1 -> RCR = 1;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <main+0x110>)
 80019da:	2201      	movs	r2, #1
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019f0:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f042 0210 	orr.w	r2, r2, #16
 80019f8:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001a00:	601a      	str	r2, [r3, #0]
  TIM1 -> ARR = COUNTERPERIOD;
 8001a02:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	3a0a      	subs	r2, #10
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 8001a0e:	4c13      	ldr	r4, [pc, #76]	; (8001a5c <main+0x114>)
 8001a10:	4620      	mov	r0, r4
 8001a12:	f002 facb 	bl	8003fac <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001a16:	2100      	movs	r1, #0
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f002 feb3 	bl	8004784 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4620      	mov	r0, r4
 8001a22:	f002 feaf 	bl	8004784 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001a26:	2108      	movs	r1, #8
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f002 feab 	bl	8004784 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <main+0x118>)
 8001a30:	f002 fabc 	bl	8003fac <HAL_TIM_Base_Start_IT>
  TIM6 -> ARR = COUNTERPERIODLOWSEQUENCE;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <main+0x11c>)
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <main+0x120>)
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_TIM_Base_Start_IT(&htim16);
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <main+0x124>)
 8001a3c:	f002 fab6 	bl	8003fac <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001a40:	2202      	movs	r2, #2
 8001a42:	490b      	ldr	r1, [pc, #44]	; (8001a70 <main+0x128>)
 8001a44:	4628      	mov	r0, r5
 8001a46:	f000 fc23 	bl	8002290 <HAL_ADC_Start_DMA>
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <main+0x102>
 8001a4c:	2000023c 	.word	0x2000023c
 8001a50:	200001a8 	.word	0x200001a8
 8001a54:	48000800 	.word	0x48000800
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	200002d4 	.word	0x200002d4
 8001a60:	20000320 	.word	0x20000320
 8001a64:	40001000 	.word	0x40001000
 8001a68:	0001193f 	.word	0x0001193f
 8001a6c:	20000288 	.word	0x20000288
 8001a70:	2000008c 	.word	0x2000008c

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b500      	push	{lr}
 8001a76:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_MspInit+0x44>)
 8001a7a:	699a      	ldr	r2, [r3, #24]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	f002 0201 	and.w	r2, r2, #1
 8001a88:	9200      	str	r2, [sp, #0]
 8001a8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a92:	61da      	str	r2, [r3, #28]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a9e:	2007      	movs	r0, #7
 8001aa0:	f001 f962 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 7);
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	f06f 0003 	mvn.w	r0, #3
 8001aac:	f001 f96e 	bl	8002d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9305      	str	r3, [sp, #20]
 8001ac4:	9306      	str	r3, [sp, #24]
 8001ac6:	9307      	str	r3, [sp, #28]
 8001ac8:	9308      	str	r3, [sp, #32]
 8001aca:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8001acc:	6803      	ldr	r3, [r0, #0]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ad4:	b00a      	add	sp, #40	; 0x28
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
 8001ad8:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ada:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001ade:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001af0:	9201      	str	r2, [sp, #4]
 8001af2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001b02:	9202      	str	r2, [sp, #8]
 8001b04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b14:	9203      	str	r2, [sp, #12]
 8001b16:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b26:	9304      	str	r3, [sp, #16]
 8001b28:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b2a:	230f      	movs	r3, #15
 8001b2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2e:	2603      	movs	r6, #3
 8001b30:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	a905      	add	r1, sp, #20
 8001b34:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <HAL_ADC_MspInit+0xe8>)
 8001b36:	f001 fa67 	bl	8003008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001b3a:	2313      	movs	r3, #19
 8001b3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2500      	movs	r5, #0
 8001b42:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	a905      	add	r1, sp, #20
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4a:	f001 fa5d 	bl	8003008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	a905      	add	r1, sp, #20
 8001b58:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <HAL_ADC_MspInit+0xec>)
 8001b5a:	f001 fa55 	bl	8003008 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001b5e:	4813      	ldr	r0, [pc, #76]	; (8001bac <HAL_ADC_MspInit+0xf0>)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_ADC_MspInit+0xf4>)
 8001b62:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b64:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b66:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b70:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b76:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b7c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b7e:	f001 f987 	bl	8002e90 <HAL_DMA_Init>
 8001b82:	b958      	cbnz	r0, 8001b9c <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_ADC_MspInit+0xf0>)
 8001b86:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b88:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	2012      	movs	r0, #18
 8001b90:	f001 f8fc 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b94:	2012      	movs	r0, #18
 8001b96:	f001 f931 	bl	8002dfc <HAL_NVIC_EnableIRQ>
}
 8001b9a:	e79b      	b.n	8001ad4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001b9c:	f7ff fcea 	bl	8001574 <Error_Handler>
 8001ba0:	e7f0      	b.n	8001b84 <HAL_ADC_MspInit+0xc8>
 8001ba2:	bf00      	nop
 8001ba4:	48000800 	.word	0x48000800
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	200001f8 	.word	0x200001f8
 8001bb0:	40020008 	.word	0x40020008

08001bb4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001bb4:	6802      	ldr	r2, [r0, #0]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_TIM_PWM_MspInit+0x28>)
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d000      	beq.n	8001bbe <HAL_TIM_PWM_MspInit+0xa>
 8001bbc:	4770      	bx	lr
{
 8001bbe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bca:	619a      	str	r2, [r3, #24]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bd6:	b002      	add	sp, #8
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40012c00 	.word	0x40012c00

08001be0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001be0:	b530      	push	{r4, r5, lr}
 8001be2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	2300      	movs	r3, #0
 8001be6:	9303      	str	r3, [sp, #12]
 8001be8:	9304      	str	r3, [sp, #16]
 8001bea:	9305      	str	r3, [sp, #20]
 8001bec:	9306      	str	r3, [sp, #24]
 8001bee:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM2)
 8001bf0:	6803      	ldr	r3, [r0, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bf8:	b009      	add	sp, #36	; 0x24
 8001bfa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	61da      	str	r2, [r3, #28]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	f002 0201 	and.w	r2, r2, #1
 8001c0e:	9200      	str	r2, [sp, #0]
 8001c10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8001c36:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001c3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2502      	movs	r5, #2
 8001c3e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c40:	2401      	movs	r4, #1
 8001c42:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	a903      	add	r1, sp, #12
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <HAL_TIM_IC_MspInit+0x88>)
 8001c48:	f001 f9de 	bl	8003008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H1_Pin;
 8001c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c5a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	a903      	add	r1, sp, #12
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f001 f9d1 	bl	8003008 <HAL_GPIO_Init>
}
 8001c66:	e7c7      	b.n	8001bf8 <HAL_TIM_IC_MspInit+0x18>
 8001c68:	48000400 	.word	0x48000400

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b500      	push	{lr}
 8001c6e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8001c70:	6803      	ldr	r3, [r0, #0]
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_TIM_Base_MspInit+0x54>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d005      	beq.n	8001c84 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_TIM_Base_MspInit+0x58>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d015      	beq.n	8001caa <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c7e:	b003      	add	sp, #12
 8001c80:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	f042 0210 	orr.w	r2, r2, #16
 8001c8c:	61da      	str	r2, [r3, #28]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 1);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2036      	movs	r0, #54	; 0x36
 8001c9e:	f001 f875 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ca2:	2036      	movs	r0, #54	; 0x36
 8001ca4:	f001 f8aa 	bl	8002dfc <HAL_NVIC_EnableIRQ>
 8001ca8:	e7e9      	b.n	8001c7e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cb2:	619a      	str	r2, [r3, #24]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	9b01      	ldr	r3, [sp, #4]
}
 8001cbe:	e7de      	b.n	8001c7e <HAL_TIM_Base_MspInit+0x12>
 8001cc0:	40001000 	.word	0x40001000
 8001cc4:	40014400 	.word	0x40014400
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9303      	str	r3, [sp, #12]
 8001cd4:	9304      	str	r3, [sp, #16]
 8001cd6:	9305      	str	r3, [sp, #20]
 8001cd8:	9306      	str	r3, [sp, #24]
 8001cda:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8001cdc:	6802      	ldr	r2, [r0, #0]
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_TIM_MspPostInit+0x90>)
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ce4:	b008      	add	sp, #32
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cfa:	9201      	str	r2, [sp, #4]
 8001cfc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d04:	615a      	str	r2, [r3, #20]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0c:	9302      	str	r3, [sp, #8]
 8001d0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d10:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001d14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2502      	movs	r5, #2
 8001d18:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d1a:	2606      	movs	r6, #6
 8001d1c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	a903      	add	r1, sp, #12
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d24:	f001 f970 	bl	8003008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2400      	movs	r4, #0
 8001d30:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d34:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	a903      	add	r1, sp, #12
 8001d38:	4809      	ldr	r0, [pc, #36]	; (8001d60 <HAL_TIM_MspPostInit+0x94>)
 8001d3a:	f001 f965 	bl	8003008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001d4a:	230b      	movs	r3, #11
 8001d4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	a903      	add	r1, sp, #12
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f001 f958 	bl	8003008 <HAL_GPIO_Init>
}
 8001d58:	e7c4      	b.n	8001ce4 <HAL_TIM_MspPostInit+0x18>
 8001d5a:	bf00      	nop
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	48000400 	.word	0x48000400

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b500      	push	{lr}
 8001d66:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9303      	str	r3, [sp, #12]
 8001d6c:	9304      	str	r3, [sp, #16]
 8001d6e:	9305      	str	r3, [sp, #20]
 8001d70:	9306      	str	r3, [sp, #24]
 8001d72:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8001d74:	6802      	ldr	r2, [r0, #0]
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_UART_MspInit+0x60>)
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d002      	beq.n	8001d82 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d7c:	b009      	add	sp, #36	; 0x24
 8001d7e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d82:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d8c:	61da      	str	r2, [r3, #28]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d94:	9201      	str	r2, [sp, #4]
 8001d96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001daa:	230c      	movs	r3, #12
 8001dac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db2:	2307      	movs	r3, #7
 8001db4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	a903      	add	r1, sp, #12
 8001db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbc:	f001 f924 	bl	8003008 <HAL_GPIO_Init>
}
 8001dc0:	e7dc      	b.n	8001d7c <HAL_UART_MspInit+0x18>
 8001dc2:	bf00      	nop
 8001dc4:	40004400 	.word	0x40004400

08001dc8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler>

08001dca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler>

08001dcc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler>

08001dce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler>

08001dd0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler>

08001dd2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	4770      	bx	lr

08001dd6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dda:	f000 f895 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dde:	bd08      	pop	{r3, pc}

08001de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001de2:	4802      	ldr	r0, [pc, #8]	; (8001dec <DMA1_Channel1_IRQHandler+0xc>)
 8001de4:	f001 f8b6 	bl	8002f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	200001f8 	.word	0x200001f8

08001df0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001df0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001df2:	4808      	ldr	r0, [pc, #32]	; (8001e14 <ADC1_IRQHandler+0x24>)
 8001df4:	f000 fb14 	bl	8002420 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001df8:	4c07      	ldr	r4, [pc, #28]	; (8001e18 <ADC1_IRQHandler+0x28>)
 8001dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f001 f9ec 	bl	80031dc <HAL_GPIO_TogglePin>

	// Sequence Control

	Sequence_High_Freq();
 8001e04:	f7fe fb74 	bl	80004f0 <Sequence_High_Freq>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f001 f9e5 	bl	80031dc <HAL_GPIO_TogglePin>
  /* USER CODE END ADC1_IRQn 1 */
}
 8001e12:	bd10      	pop	{r4, pc}
 8001e14:	200001a8 	.word	0x200001a8
 8001e18:	48000400 	.word	0x48000400

08001e1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <TIM6_DAC_IRQHandler+0x10>)
 8001e20:	f002 f8ff 	bl	8004022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  Sequence_Low_Freq();
 8001e24:	f7fe fa88 	bl	8000338 <Sequence_Low_Freq>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e28:	bd08      	pop	{r3, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000320 	.word	0x20000320

08001e30 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <SystemInit+0x10>)
 8001e32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e48:	f7ff fff2 	bl	8001e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	; (8001e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	; (8001e90 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e72:	f004 f857 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e76:	f7ff fd67 	bl	8001948 <main>

08001e7a <LoopForever>:

LoopForever:
    b LoopForever
 8001e7a:	e7fe      	b.n	8001e7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e88:	08006400 	.word	0x08006400
  ldr r2, =_sbss
 8001e8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e90:	200003f8 	.word	0x200003f8

08001e94 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <CAN_RX1_IRQHandler>
	...

08001e98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_InitTick+0x40>)
 8001e9e:	7818      	ldrb	r0, [r3, #0]
 8001ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_InitTick+0x44>)
 8001eaa:	6810      	ldr	r0, [r2, #0]
 8001eac:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eb0:	f000 ffb2 	bl	8002e18 <HAL_SYSTICK_Config>
 8001eb4:	b968      	cbnz	r0, 8001ed2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	2c0f      	cmp	r4, #15
 8001eb8:	d901      	bls.n	8001ebe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
 8001ebc:	e00a      	b.n	8001ed4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	f000 ff61 	bl	8002d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_InitTick+0x48>)
 8001ecc:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8001ece:	2000      	movs	r0, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001ed2:	2001      	movs	r0, #1
}
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000004 	.word	0x20000004
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_Init>:
{
 8001ee4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x20>)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	f043 0310 	orr.w	r3, r3, #16
 8001eee:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 ff39 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff ffce 	bl	8001e98 <HAL_InitTick>
  HAL_MspInit();
 8001efc:	f7ff fdba 	bl	8001a74 <HAL_MspInit>
}
 8001f00:	2000      	movs	r0, #0
 8001f02:	bd08      	pop	{r3, pc}
 8001f04:	40022000 	.word	0x40022000

08001f08 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f08:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <HAL_IncTick+0x10>)
 8001f0a:	6811      	ldr	r1, [r2, #0]
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_IncTick+0x14>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	440b      	add	r3, r1
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200003f4 	.word	0x200003f4
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001f20:	4b01      	ldr	r3, [pc, #4]	; (8001f28 <HAL_GetTick+0x8>)
 8001f22:	6818      	ldr	r0, [r3, #0]
}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200003f4 	.word	0x200003f4

08001f2c <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001f30:	4770      	bx	lr

08001f32 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f32:	4770      	bx	lr

08001f34 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f34:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	6893      	ldr	r3, [r2, #8]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f42:	2000      	movs	r0, #0
}
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
 8001f46:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f48:	6813      	ldr	r3, [r2, #0]
 8001f4a:	f013 0f01 	tst.w	r3, #1
 8001f4e:	d033      	beq.n	8001fb8 <ADC_Disable+0x84>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f50:	6893      	ldr	r3, [r2, #8]
 8001f52:	f003 030d 	and.w	r3, r3, #13
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d009      	beq.n	8001f6e <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	e7ea      	b.n	8001f44 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 8001f6e:	6893      	ldr	r3, [r2, #8]
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6093      	str	r3, [r2, #8]
 8001f76:	6803      	ldr	r3, [r0, #0]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f7c:	f7ff ffd0 	bl	8001f20 <HAL_GetTick>
 8001f80:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f013 0f01 	tst.w	r3, #1
 8001f8a:	d013      	beq.n	8001fb4 <ADC_Disable+0x80>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f8c:	f7ff ffc8 	bl	8001f20 <HAL_GetTick>
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d9f5      	bls.n	8001f82 <ADC_Disable+0x4e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f013 0f01 	tst.w	r3, #1
 8001f9e:	d0f0      	beq.n	8001f82 <ADC_Disable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	e7c7      	b.n	8001f44 <ADC_Disable+0x10>
  return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7c5      	b.n	8001f44 <ADC_Disable+0x10>
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e7c3      	b.n	8001f44 <ADC_Disable+0x10>

08001fbc <ADC_Enable>:
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	6893      	ldr	r3, [r2, #8]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d00d      	beq.n	8001fe8 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fcc:	6891      	ldr	r1, [r2, #8]
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <ADC_Enable+0x7c>)
 8001fd0:	4219      	tst	r1, r3
 8001fd2:	d00f      	beq.n	8001ff4 <ADC_Enable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
}
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f013 0f01 	tst.w	r3, #1
 8001fee:	d0ed      	beq.n	8001fcc <ADC_Enable+0x10>
  return HAL_OK;
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	e7f8      	b.n	8001fe6 <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8001ff4:	6893      	ldr	r3, [r2, #8]
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001ffc:	f7ff ff90 	bl	8001f20 <HAL_GetTick>
 8002000:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f013 0f01 	tst.w	r3, #1
 800200a:	d113      	bne.n	8002034 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200c:	f7ff ff88 	bl	8001f20 <HAL_GetTick>
 8002010:	1b43      	subs	r3, r0, r5
 8002012:	2b02      	cmp	r3, #2
 8002014:	d9f5      	bls.n	8002002 <ADC_Enable+0x46>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f013 0f01 	tst.w	r3, #1
 800201e:	d1f0      	bne.n	8002002 <ADC_Enable+0x46>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002030:	2001      	movs	r0, #1
 8002032:	e7d8      	b.n	8001fe6 <ADC_Enable+0x2a>
  return HAL_OK;
 8002034:	2000      	movs	r0, #0
 8002036:	e7d6      	b.n	8001fe6 <ADC_Enable+0x2a>
 8002038:	8000003f 	.word	0x8000003f

0800203c <ADC_DMAError>:
{
 800203c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800203e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002040:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002046:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002048:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002050:	f7ff ff6f 	bl	8001f32 <HAL_ADC_ErrorCallback>
}
 8002054:	bd08      	pop	{r3, pc}

08002056 <ADC_DMAHalfConvCplt>:
{
 8002056:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002058:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800205a:	f7ff ff68 	bl	8001f2e <HAL_ADC_ConvHalfCpltCallback>
}
 800205e:	bd08      	pop	{r3, pc}

08002060 <ADC_DMAConvCplt>:
{
 8002060:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002062:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	f012 0f50 	tst.w	r2, #80	; 0x50
 800206a:	d11a      	bne.n	80020a2 <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800207c:	d10d      	bne.n	800209a <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800207e:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002080:	b95a      	cbnz	r2, 800209a <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800208c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002090:	d103      	bne.n	800209a <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff46 	bl	8001f2c <HAL_ADC_ConvCpltCallback>
}
 80020a0:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4798      	blx	r3
}
 80020a8:	e7fa      	b.n	80020a0 <ADC_DMAConvCplt+0x40>
	...

080020ac <HAL_ADC_Init>:
{
 80020ac:	b530      	push	{r4, r5, lr}
 80020ae:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80020b4:	2800      	cmp	r0, #0
 80020b6:	f000 80e1 	beq.w	800227c <HAL_ADC_Init+0x1d0>
 80020ba:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020be:	f013 0f10 	tst.w	r3, #16
 80020c2:	d152      	bne.n	800216a <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020c6:	b1ab      	cbz	r3, 80020f4 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80020d2:	d003      	beq.n	80020dc <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020d4:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020d6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80020da:	d047      	beq.n	800216c <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 80020dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020de:	f023 0312 	bic.w	r3, r3, #18
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
 80020f2:	e03b      	b.n	800216c <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 80020f6:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020f8:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 80020fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80020fe:	f7ff fcdd 	bl	8001abc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800210a:	d001      	beq.n	8002110 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2000      	movs	r0, #0
 800210e:	e7dc      	b.n	80020ca <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ff0f 	bl	8001f34 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002118:	f013 0f10 	tst.w	r3, #16
 800211c:	d1d5      	bne.n	80020ca <HAL_ADC_Init+0x1e>
 800211e:	2800      	cmp	r0, #0
 8002120:	d1d3      	bne.n	80020ca <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8002122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002124:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002128:	f023 0302 	bic.w	r3, r3, #2
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002132:	6822      	ldr	r2, [r4, #0]
 8002134:	6893      	ldr	r3, [r2, #8]
 8002136:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800213a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800213c:	6822      	ldr	r2, [r4, #0]
 800213e:	6893      	ldr	r3, [r2, #8]
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002146:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_ADC_Init+0x1d4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <HAL_ADC_Init+0x1d8>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800215a:	e002      	b.n	8002162 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 800215c:	9b01      	ldr	r3, [sp, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002162:	9b01      	ldr	r3, [sp, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <HAL_ADC_Init+0xb0>
 8002168:	e7af      	b.n	80020ca <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800216c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800216e:	f013 0f10 	tst.w	r3, #16
 8002172:	d17a      	bne.n	800226a <HAL_ADC_Init+0x1be>
 8002174:	2800      	cmp	r0, #0
 8002176:	d178      	bne.n	800226a <HAL_ADC_Init+0x1be>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002178:	6825      	ldr	r5, [r4, #0]
 800217a:	68a9      	ldr	r1, [r5, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800217c:	f011 0104 	ands.w	r1, r1, #4
 8002180:	d173      	bne.n	800226a <HAL_ADC_Init+0x1be>
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002184:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002188:	f042 0202 	orr.w	r2, r2, #2
 800218c:	6422      	str	r2, [r4, #64]	; 0x40
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800218e:	2300      	movs	r3, #0
 8002190:	9302      	str	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002192:	68ab      	ldr	r3, [r5, #8]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d045      	beq.n	8002228 <HAL_ADC_Init+0x17c>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_ADC_Init+0x1dc>)
 800219e:	6893      	ldr	r3, [r2, #8]
 80021a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021a4:	6865      	ldr	r5, [r4, #4]
 80021a6:	432b      	orrs	r3, r5
 80021a8:	6093      	str	r3, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021aa:	7e62      	ldrb	r2, [r4, #25]
 80021ac:	0353      	lsls	r3, r2, #13
 80021ae:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80021b0:	2d01      	cmp	r5, #1
 80021b2:	d001      	beq.n	80021b8 <HAL_ADC_Init+0x10c>
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	430b      	orrs	r3, r1
 80021ba:	68e1      	ldr	r1, [r4, #12]
 80021bc:	430b      	orrs	r3, r1
 80021be:	68a1      	ldr	r1, [r4, #8]
 80021c0:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c2:	f894 1020 	ldrb.w	r1, [r4, #32]
 80021c6:	2901      	cmp	r1, #1
 80021c8:	d033      	beq.n	8002232 <HAL_ADC_Init+0x186>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021cc:	2a01      	cmp	r2, #1
 80021ce:	d002      	beq.n	80021d6 <HAL_ADC_Init+0x12a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021d2:	430a      	orrs	r2, r1
 80021d4:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6891      	ldr	r1, [r2, #8]
 80021da:	f011 0f0c 	tst.w	r1, #12
 80021de:	d10c      	bne.n	80021fa <HAL_ADC_Init+0x14e>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80021e0:	68d1      	ldr	r1, [r2, #12]
 80021e2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80021e6:	f021 0102 	bic.w	r1, r1, #2
 80021ea:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80021ec:	7e21      	ldrb	r1, [r4, #24]
 80021ee:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80021f8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80021fa:	6821      	ldr	r1, [r4, #0]
 80021fc:	68cd      	ldr	r5, [r1, #12]
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_ADC_Init+0x1e0>)
 8002200:	402a      	ands	r2, r5
 8002202:	4313      	orrs	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002206:	6923      	ldr	r3, [r4, #16]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d025      	beq.n	8002258 <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002210:	f023 030f 	bic.w	r3, r3, #15
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002216:	2300      	movs	r3, #0
 8002218:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800221c:	f023 0303 	bic.w	r3, r3, #3
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6423      	str	r3, [r4, #64]	; 0x40
 8002226:	e027      	b.n	8002278 <HAL_ADC_Init+0x1cc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	f013 0f01 	tst.w	r3, #1
 800222e:	d1bc      	bne.n	80021aa <HAL_ADC_Init+0xfe>
 8002230:	e7b4      	b.n	800219c <HAL_ADC_Init+0xf0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002232:	b932      	cbnz	r2, 8002242 <HAL_ADC_Init+0x196>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002234:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002236:	3a01      	subs	r2, #1
 8002238:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	e7c3      	b.n	80021ca <HAL_ADC_Init+0x11e>
        ADC_STATE_CLR_SET(hadc->State,
 8002242:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002244:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	6462      	str	r2, [r4, #68]	; 0x44
 8002256:	e7b8      	b.n	80021ca <HAL_ADC_Init+0x11e>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002258:	6821      	ldr	r1, [r4, #0]
 800225a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800225c:	f023 030f 	bic.w	r3, r3, #15
 8002260:	69e2      	ldr	r2, [r4, #28]
 8002262:	3a01      	subs	r2, #1
 8002264:	4313      	orrs	r3, r2
 8002266:	630b      	str	r3, [r1, #48]	; 0x30
 8002268:	e7d5      	b.n	8002216 <HAL_ADC_Init+0x16a>
    ADC_STATE_CLR_SET(hadc->State,
 800226a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800226c:	f023 0312 	bic.w	r3, r3, #18
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8002276:	2001      	movs	r0, #1
}
 8002278:	b017      	add	sp, #92	; 0x5c
 800227a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
 800227e:	e7fb      	b.n	8002278 <HAL_ADC_Init+0x1cc>
 8002280:	20000000 	.word	0x20000000
 8002284:	431bde83 	.word	0x431bde83
 8002288:	50000300 	.word	0x50000300
 800228c:	fff0c007 	.word	0xfff0c007

08002290 <HAL_ADC_Start_DMA>:
{
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	460d      	mov	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002294:	6801      	ldr	r1, [r0, #0]
 8002296:	6889      	ldr	r1, [r1, #8]
 8002298:	f011 0f04 	tst.w	r1, #4
 800229c:	d159      	bne.n	8002352 <HAL_ADC_Start_DMA+0xc2>
 800229e:	4604      	mov	r4, r0
 80022a0:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 80022a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d056      	beq.n	8002358 <HAL_ADC_Start_DMA+0xc8>
 80022aa:	2301      	movs	r3, #1
 80022ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = ADC_Enable(hadc);
 80022b0:	f7ff fe84 	bl	8001fbc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80022b4:	4607      	mov	r7, r0
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d147      	bne.n	800234a <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 80022ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80022bc:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80022c0:	f021 0101 	bic.w	r1, r1, #1
 80022c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80022c8:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022d0:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022da:	d005      	beq.n	80022e8 <HAL_ADC_Start_DMA+0x58>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e6:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022ea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80022ee:	d029      	beq.n	8002344 <HAL_ADC_Start_DMA+0xb4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022f2:	f023 0306 	bic.w	r3, r3, #6
 80022f6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80022f8:	2300      	movs	r3, #0
 80022fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_ADC_Start_DMA+0xcc>)
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_ADC_Start_DMA+0xd0>)
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800230a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800230c:	4a15      	ldr	r2, [pc, #84]	; (8002364 <HAL_ADC_Start_DMA+0xd4>)
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	221c      	movs	r2, #28
 8002314:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	6853      	ldr	r3, [r2, #4]
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002320:	6822      	ldr	r2, [r4, #0]
 8002322:	68d3      	ldr	r3, [r2, #12]
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800232a:	6821      	ldr	r1, [r4, #0]
 800232c:	4633      	mov	r3, r6
 800232e:	462a      	mov	r2, r5
 8002330:	3140      	adds	r1, #64	; 0x40
 8002332:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002334:	f000 fdd4 	bl	8002ee0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002338:	6822      	ldr	r2, [r4, #0]
 800233a:	6893      	ldr	r3, [r2, #8]
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6093      	str	r3, [r2, #8]
 8002342:	e007      	b.n	8002354 <HAL_ADC_Start_DMA+0xc4>
          ADC_CLEAR_ERRORCODE(hadc);
 8002344:	2300      	movs	r3, #0
 8002346:	6463      	str	r3, [r4, #68]	; 0x44
 8002348:	e7d6      	b.n	80022f8 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 800234a:	2300      	movs	r3, #0
 800234c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002350:	e000      	b.n	8002354 <HAL_ADC_Start_DMA+0xc4>
    tmp_hal_status = HAL_BUSY;
 8002352:	2702      	movs	r7, #2
}
 8002354:	4638      	mov	r0, r7
 8002356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002358:	2702      	movs	r7, #2
 800235a:	e7fb      	b.n	8002354 <HAL_ADC_Start_DMA+0xc4>
 800235c:	08002061 	.word	0x08002061
 8002360:	08002057 	.word	0x08002057
 8002364:	0800203d 	.word	0x0800203d

08002368 <HAL_ADCEx_InjectedStart_IT>:
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f013 0f08 	tst.w	r3, #8
 8002370:	d14e      	bne.n	8002410 <HAL_ADCEx_InjectedStart_IT+0xa8>
{
 8002372:	b510      	push	{r4, lr}
 8002374:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002376:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d04a      	beq.n	8002414 <HAL_ADCEx_InjectedStart_IT+0xac>
 800237e:	2301      	movs	r3, #1
 8002380:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8002384:	f7ff fe1a 	bl	8001fbc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002388:	2800      	cmp	r0, #0
 800238a:	d13d      	bne.n	8002408 <HAL_ADCEx_InjectedStart_IT+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 800238c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800238e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800239a:	6423      	str	r3, [r4, #64]	; 0x40
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800239e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023a2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023aa:	d101      	bne.n	80023b0 <HAL_ADCEx_InjectedStart_IT+0x48>
        ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	2300      	movs	r3, #0
 80023ae:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80023b0:	2300      	movs	r3, #0
 80023b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	2260      	movs	r2, #96	; 0x60
 80023ba:	601a      	str	r2, [r3, #0]
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80023c4:	d003      	beq.n	80023ce <HAL_ADCEx_InjectedStart_IT+0x66>
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023cc:	605a      	str	r2, [r3, #4]
      switch(hadc->Init.EOCSelection)
 80023ce:	6963      	ldr	r3, [r4, #20]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d00e      	beq.n	80023f2 <HAL_ADCEx_InjectedStart_IT+0x8a>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	6853      	ldr	r3, [r2, #4]
 80023d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023dc:	6053      	str	r3, [r2, #4]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80023e6:	d112      	bne.n	800240e <HAL_ADCEx_InjectedStart_IT+0xa6>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00d      	b.n	800240e <HAL_ADCEx_InjectedStart_IT+0xa6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	6853      	ldr	r3, [r2, #4]
 80023f6:	f023 0320 	bic.w	r3, r3, #32
 80023fa:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6853      	ldr	r3, [r2, #4]
 8002400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002404:	6053      	str	r3, [r2, #4]
          break;
 8002406:	e7ea      	b.n	80023de <HAL_ADCEx_InjectedStart_IT+0x76>
      __HAL_UNLOCK(hadc);
 8002408:	2300      	movs	r3, #0
 800240a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800240e:	bd10      	pop	{r4, pc}
    tmp_hal_status = HAL_BUSY;
 8002410:	2002      	movs	r0, #2
}
 8002412:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002414:	2002      	movs	r0, #2
 8002416:	e7fa      	b.n	800240e <HAL_ADCEx_InjectedStart_IT+0xa6>

08002418 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8002418:	4770      	bx	lr

0800241a <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 800241a:	4770      	bx	lr

0800241c <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 800241c:	4770      	bx	lr

0800241e <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 800241e:	4770      	bx	lr

08002420 <HAL_ADC_IRQHandler>:
{
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002424:	6803      	ldr	r3, [r0, #0]
 8002426:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002428:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800242a:	f015 0f04 	tst.w	r5, #4
 800242e:	d002      	beq.n	8002436 <HAL_ADC_IRQHandler+0x16>
 8002430:	f016 0f04 	tst.w	r6, #4
 8002434:	d105      	bne.n	8002442 <HAL_ADC_IRQHandler+0x22>
 8002436:	f015 0f08 	tst.w	r5, #8
 800243a:	d038      	beq.n	80024ae <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800243c:	f016 0f08 	tst.w	r6, #8
 8002440:	d035      	beq.n	80024ae <HAL_ADC_IRQHandler+0x8e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002444:	f012 0f10 	tst.w	r2, #16
 8002448:	d103      	bne.n	8002452 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800244a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002452:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800245a:	d122      	bne.n	80024a2 <HAL_ADC_IRQHandler+0x82>
 800245c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8002460:	d11f      	bne.n	80024a2 <HAL_ADC_IRQHandler+0x82>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002462:	f015 0f08 	tst.w	r5, #8
 8002466:	d01c      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x82>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	f012 0f04 	tst.w	r2, #4
 800246e:	d110      	bne.n	8002492 <HAL_ADC_IRQHandler+0x72>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	f022 020c 	bic.w	r2, r2, #12
 8002476:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800247a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800247e:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002482:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002486:	d10c      	bne.n	80024a2 <HAL_ADC_IRQHandler+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002488:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6423      	str	r3, [r4, #64]	; 0x40
 8002490:	e007      	b.n	80024a2 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002494:	f043 0310 	orr.w	r3, r3, #16
 8002498:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fd42 	bl	8001f2c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	220c      	movs	r2, #12
 80024ac:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024ae:	f015 0f20 	tst.w	r5, #32
 80024b2:	d002      	beq.n	80024ba <HAL_ADC_IRQHandler+0x9a>
 80024b4:	f016 0f20 	tst.w	r6, #32
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_IRQHandler+0xa6>
 80024ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80024be:	d040      	beq.n	8002542 <HAL_ADC_IRQHandler+0x122>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80024c0:	f016 0f40 	tst.w	r6, #64	; 0x40
 80024c4:	d03d      	beq.n	8002542 <HAL_ADC_IRQHandler+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024cc:	6423      	str	r3, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80024d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80024d8:	d12d      	bne.n	8002536 <HAL_ADC_IRQHandler+0x116>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024da:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80024de:	d006      	beq.n	80024ee <HAL_ADC_IRQHandler+0xce>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80024e0:	68da      	ldr	r2, [r3, #12]
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024e2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80024e6:	d126      	bne.n	8002536 <HAL_ADC_IRQHandler+0x116>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80024e8:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80024ec:	d123      	bne.n	8002536 <HAL_ADC_IRQHandler+0x116>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80024ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80024f2:	d020      	beq.n	8002536 <HAL_ADC_IRQHandler+0x116>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80024f4:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80024f6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80024fa:	d11c      	bne.n	8002536 <HAL_ADC_IRQHandler+0x116>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	f012 0f08 	tst.w	r2, #8
 8002502:	d110      	bne.n	8002526 <HAL_ADC_IRQHandler+0x106>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800250a:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800250c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800250e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002512:	6423      	str	r3, [r4, #64]	; 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002516:	f413 7f80 	tst.w	r3, #256	; 0x100
 800251a:	d10c      	bne.n	8002536 <HAL_ADC_IRQHandler+0x116>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6423      	str	r3, [r4, #64]	; 0x40
 8002524:	e007      	b.n	8002536 <HAL_ADC_IRQHandler+0x116>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6423      	str	r3, [r4, #64]	; 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff ff6e 	bl	8002418 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	2260      	movs	r2, #96	; 0x60
 8002540:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002542:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002546:	d002      	beq.n	800254e <HAL_ADC_IRQHandler+0x12e>
 8002548:	f016 0f80 	tst.w	r6, #128	; 0x80
 800254c:	d133      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x196>
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800254e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002552:	d002      	beq.n	800255a <HAL_ADC_IRQHandler+0x13a>
 8002554:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002558:	d138      	bne.n	80025cc <HAL_ADC_IRQHandler+0x1ac>
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800255a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800255e:	d002      	beq.n	8002566 <HAL_ADC_IRQHandler+0x146>
 8002560:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002564:	d13e      	bne.n	80025e4 <HAL_ADC_IRQHandler+0x1c4>
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002566:	f015 0f10 	tst.w	r5, #16
 800256a:	d01d      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x188>
 800256c:	f016 0f10 	tst.w	r6, #16
 8002570:	d01a      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x188>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002574:	2b01      	cmp	r3, #1
 8002576:	d009      	beq.n	800258c <HAL_ADC_IRQHandler+0x16c>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_ADC_IRQHandler+0x208>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f013 0f1f 	tst.w	r3, #31
 8002580:	d13c      	bne.n	80025fc <HAL_ADC_IRQHandler+0x1dc>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f013 0f01 	tst.w	r3, #1
 800258a:	d00a      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800258c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff fcc8 	bl	8001f32 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025a8:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80025ac:	d002      	beq.n	80025b4 <HAL_ADC_IRQHandler+0x194>
 80025ae:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80025b2:	d129      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1e8>
}
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff fcb6 	bl	8001f30 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e7c0      	b.n	800254e <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d2:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff ff21 	bl	800241c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e7ba      	b.n	800255a <HAL_ADC_IRQHandler+0x13a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ea:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff ff16 	bl	800241e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e7b4      	b.n	8002566 <HAL_ADC_IRQHandler+0x146>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_ADC_IRQHandler+0x208>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8002604:	d0cd      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x182>
 8002606:	e7c1      	b.n	800258c <HAL_ADC_IRQHandler+0x16c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002610:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002612:	f043 0308 	orr.w	r3, r3, #8
 8002616:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002620:	4620      	mov	r0, r4
 8002622:	f7ff fefa 	bl	800241a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002626:	e7c5      	b.n	80025b4 <HAL_ADC_IRQHandler+0x194>
 8002628:	50000300 	.word	0x50000300

0800262c <HAL_ADC_ConfigChannel>:
{
 800262c:	b430      	push	{r4, r5}
 800262e:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8002630:	2200      	movs	r2, #0
 8002632:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002634:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002638:	2a01      	cmp	r2, #1
 800263a:	f000 819b 	beq.w	8002974 <HAL_ADC_ConfigChannel+0x348>
 800263e:	4603      	mov	r3, r0
 8002640:	2201      	movs	r2, #1
 8002642:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002646:	6800      	ldr	r0, [r0, #0]
 8002648:	6882      	ldr	r2, [r0, #8]
 800264a:	f012 0f04 	tst.w	r2, #4
 800264e:	f040 8186 	bne.w	800295e <HAL_ADC_ConfigChannel+0x332>
    if (sConfig->Rank < 5U)
 8002652:	684a      	ldr	r2, [r1, #4]
 8002654:	2a04      	cmp	r2, #4
 8002656:	d837      	bhi.n	80026c8 <HAL_ADC_ConfigChannel+0x9c>
      MODIFY_REG(hadc->Instance->SQR1,
 8002658:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800265a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800265e:	0052      	lsls	r2, r2, #1
 8002660:	f04f 0c1f 	mov.w	ip, #31
 8002664:	fa0c fc02 	lsl.w	ip, ip, r2
 8002668:	ea24 0c0c 	bic.w	ip, r4, ip
 800266c:	680c      	ldr	r4, [r1, #0]
 800266e:	fa04 f202 	lsl.w	r2, r4, r2
 8002672:	ea4c 0202 	orr.w	r2, ip, r2
 8002676:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	6882      	ldr	r2, [r0, #8]
 800267c:	f012 0f0c 	tst.w	r2, #12
 8002680:	d172      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x13c>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002682:	680a      	ldr	r2, [r1, #0]
 8002684:	2a09      	cmp	r2, #9
 8002686:	d956      	bls.n	8002736 <HAL_ADC_ConfigChannel+0x10a>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002688:	6984      	ldr	r4, [r0, #24]
 800268a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800268e:	3a1e      	subs	r2, #30
 8002690:	f04f 0c07 	mov.w	ip, #7
 8002694:	fa0c fc02 	lsl.w	ip, ip, r2
 8002698:	ea24 040c 	bic.w	r4, r4, ip
 800269c:	688d      	ldr	r5, [r1, #8]
 800269e:	fa05 f202 	lsl.w	r2, r5, r2
 80026a2:	4322      	orrs	r2, r4
 80026a4:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026a6:	6948      	ldr	r0, [r1, #20]
 80026a8:	681c      	ldr	r4, [r3, #0]
 80026aa:	68e2      	ldr	r2, [r4, #12]
 80026ac:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80026b0:	0052      	lsls	r2, r2, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80026b6:	6908      	ldr	r0, [r1, #16]
 80026b8:	3801      	subs	r0, #1
 80026ba:	2803      	cmp	r0, #3
 80026bc:	f200 8093 	bhi.w	80027e6 <HAL_ADC_ConfigChannel+0x1ba>
 80026c0:	e8df f000 	tbb	[pc, r0]
 80026c4:	867b7048 	.word	0x867b7048
    else if (sConfig->Rank < 10U)
 80026c8:	2a09      	cmp	r2, #9
 80026ca:	d810      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR2,
 80026cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80026ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026d2:	0052      	lsls	r2, r2, #1
 80026d4:	3a1e      	subs	r2, #30
 80026d6:	f04f 0c1f 	mov.w	ip, #31
 80026da:	fa0c fc02 	lsl.w	ip, ip, r2
 80026de:	ea24 040c 	bic.w	r4, r4, ip
 80026e2:	680d      	ldr	r5, [r1, #0]
 80026e4:	fa05 f202 	lsl.w	r2, r5, r2
 80026e8:	4322      	orrs	r2, r4
 80026ea:	6342      	str	r2, [r0, #52]	; 0x34
 80026ec:	e7c4      	b.n	8002678 <HAL_ADC_ConfigChannel+0x4c>
    else if (sConfig->Rank < 15U)
 80026ee:	2a0e      	cmp	r2, #14
 80026f0:	d810      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0xe8>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80026f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80026f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026f8:	0052      	lsls	r2, r2, #1
 80026fa:	3a3c      	subs	r2, #60	; 0x3c
 80026fc:	f04f 0c1f 	mov.w	ip, #31
 8002700:	fa0c fc02 	lsl.w	ip, ip, r2
 8002704:	ea24 040c 	bic.w	r4, r4, ip
 8002708:	680d      	ldr	r5, [r1, #0]
 800270a:	fa05 f202 	lsl.w	r2, r5, r2
 800270e:	4322      	orrs	r2, r4
 8002710:	6382      	str	r2, [r0, #56]	; 0x38
 8002712:	e7b1      	b.n	8002678 <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002714:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002716:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800271a:	0052      	lsls	r2, r2, #1
 800271c:	3a5a      	subs	r2, #90	; 0x5a
 800271e:	f04f 0c1f 	mov.w	ip, #31
 8002722:	fa0c fc02 	lsl.w	ip, ip, r2
 8002726:	ea24 040c 	bic.w	r4, r4, ip
 800272a:	680d      	ldr	r5, [r1, #0]
 800272c:	fa05 f202 	lsl.w	r2, r5, r2
 8002730:	4322      	orrs	r2, r4
 8002732:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002734:	e7a0      	b.n	8002678 <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002736:	6944      	ldr	r4, [r0, #20]
 8002738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800273c:	f04f 0c07 	mov.w	ip, #7
 8002740:	fa0c fc02 	lsl.w	ip, ip, r2
 8002744:	ea24 040c 	bic.w	r4, r4, ip
 8002748:	688d      	ldr	r5, [r1, #8]
 800274a:	fa05 f202 	lsl.w	r2, r5, r2
 800274e:	4322      	orrs	r2, r4
 8002750:	6142      	str	r2, [r0, #20]
 8002752:	e7a8      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x7a>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002754:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002756:	4888      	ldr	r0, [pc, #544]	; (8002978 <HAL_ADC_ConfigChannel+0x34c>)
 8002758:	4028      	ands	r0, r5
 800275a:	680d      	ldr	r5, [r1, #0]
 800275c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8002760:	4310      	orrs	r0, r2
 8002762:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002766:	6620      	str	r0, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	6882      	ldr	r2, [r0, #8]
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	2a01      	cmp	r2, #1
 8002772:	d068      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002774:	68ca      	ldr	r2, [r1, #12]
 8002776:	2a01      	cmp	r2, #1
 8002778:	d06b      	beq.n	8002852 <HAL_ADC_ConfigChannel+0x226>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800277a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800277e:	2401      	movs	r4, #1
 8002780:	680d      	ldr	r5, [r1, #0]
 8002782:	40ac      	lsls	r4, r5
 8002784:	ea22 0204 	bic.w	r2, r2, r4
 8002788:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800278c:	680a      	ldr	r2, [r1, #0]
 800278e:	2a10      	cmp	r2, #16
 8002790:	f000 8088 	beq.w	80028a4 <HAL_ADC_ConfigChannel+0x278>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002794:	2a11      	cmp	r2, #17
 8002796:	f000 809b 	beq.w	80028d0 <HAL_ADC_ConfigChannel+0x2a4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800279a:	2a12      	cmp	r2, #18
 800279c:	f000 809e 	beq.w	80028dc <HAL_ADC_ConfigChannel+0x2b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2000      	movs	r0, #0
 80027a2:	e0e1      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80027a6:	4874      	ldr	r0, [pc, #464]	; (8002978 <HAL_ADC_ConfigChannel+0x34c>)
 80027a8:	4028      	ands	r0, r5
 80027aa:	680d      	ldr	r5, [r1, #0]
 80027ac:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80027b0:	4310      	orrs	r0, r2
 80027b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80027b6:	6660      	str	r0, [r4, #100]	; 0x64
      break;
 80027b8:	e7d6      	b.n	8002768 <HAL_ADC_ConfigChannel+0x13c>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027ba:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80027bc:	486e      	ldr	r0, [pc, #440]	; (8002978 <HAL_ADC_ConfigChannel+0x34c>)
 80027be:	4028      	ands	r0, r5
 80027c0:	680d      	ldr	r5, [r1, #0]
 80027c2:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80027c6:	4310      	orrs	r0, r2
 80027c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80027cc:	66a0      	str	r0, [r4, #104]	; 0x68
      break;
 80027ce:	e7cb      	b.n	8002768 <HAL_ADC_ConfigChannel+0x13c>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027d0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80027d2:	4869      	ldr	r0, [pc, #420]	; (8002978 <HAL_ADC_ConfigChannel+0x34c>)
 80027d4:	4028      	ands	r0, r5
 80027d6:	680d      	ldr	r5, [r1, #0]
 80027d8:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80027dc:	4302      	orrs	r2, r0
 80027de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027e2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80027e4:	e7c0      	b.n	8002768 <HAL_ADC_ConfigChannel+0x13c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80027e8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80027ec:	6808      	ldr	r0, [r1, #0]
 80027ee:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80027f2:	d103      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1d0>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80027f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027fa:	6622      	str	r2, [r4, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002800:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002804:	680c      	ldr	r4, [r1, #0]
 8002806:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 800280a:	d103      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1e8>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800280c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800280e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002812:	6650      	str	r0, [r2, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002818:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800281c:	680c      	ldr	r4, [r1, #0]
 800281e:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8002822:	d103      	bne.n	800282c <HAL_ADC_ConfigChannel+0x200>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002824:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002826:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800282a:	6690      	str	r0, [r2, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002830:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002834:	680c      	ldr	r4, [r1, #0]
 8002836:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 800283a:	d195      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x13c>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800283c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800283e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002842:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002844:	e790      	b.n	8002768 <HAL_ADC_ConfigChannel+0x13c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002846:	6802      	ldr	r2, [r0, #0]
 8002848:	f012 0f01 	tst.w	r2, #1
 800284c:	d092      	beq.n	8002774 <HAL_ADC_ConfigChannel+0x148>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284e:	2000      	movs	r0, #0
 8002850:	e08a      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002852:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8002856:	2401      	movs	r4, #1
 8002858:	680d      	ldr	r5, [r1, #0]
 800285a:	40ac      	lsls	r4, r5
 800285c:	4322      	orrs	r2, r4
 800285e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002862:	680a      	ldr	r2, [r1, #0]
 8002864:	2a09      	cmp	r2, #9
 8002866:	d90e      	bls.n	8002886 <HAL_ADC_ConfigChannel+0x25a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002868:	681d      	ldr	r5, [r3, #0]
 800286a:	69a8      	ldr	r0, [r5, #24]
 800286c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002870:	3a1b      	subs	r2, #27
 8002872:	2407      	movs	r4, #7
 8002874:	4094      	lsls	r4, r2
 8002876:	ea20 0004 	bic.w	r0, r0, r4
 800287a:	688c      	ldr	r4, [r1, #8]
 800287c:	fa04 f202 	lsl.w	r2, r4, r2
 8002880:	4302      	orrs	r2, r0
 8002882:	61aa      	str	r2, [r5, #24]
 8002884:	e782      	b.n	800278c <HAL_ADC_ConfigChannel+0x160>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002886:	681d      	ldr	r5, [r3, #0]
 8002888:	6968      	ldr	r0, [r5, #20]
 800288a:	3201      	adds	r2, #1
 800288c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002890:	2407      	movs	r4, #7
 8002892:	4094      	lsls	r4, r2
 8002894:	ea20 0004 	bic.w	r0, r0, r4
 8002898:	688c      	ldr	r4, [r1, #8]
 800289a:	fa04 f202 	lsl.w	r2, r4, r2
 800289e:	4302      	orrs	r2, r0
 80028a0:	616a      	str	r2, [r5, #20]
 80028a2:	e773      	b.n	800278c <HAL_ADC_ConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028a4:	4935      	ldr	r1, [pc, #212]	; (800297c <HAL_ADC_ConfigChannel+0x350>)
 80028a6:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028a8:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80028ac:	f47f af72 	bne.w	8002794 <HAL_ADC_ConfigChannel+0x168>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028b0:	2100      	movs	r1, #0
 80028b2:	9102      	str	r1, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	6881      	ldr	r1, [r0, #8]
 80028b8:	f001 0103 	and.w	r1, r1, #3
 80028bc:	2901      	cmp	r1, #1
 80028be:	d014      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x2be>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028c0:	2a10      	cmp	r2, #16
 80028c2:	d01c      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x2d2>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80028c4:	2a11      	cmp	r2, #17
 80028c6:	d039      	beq.n	800293c <HAL_ADC_ConfigChannel+0x310>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028c8:	2a12      	cmp	r2, #18
 80028ca:	d041      	beq.n	8002950 <HAL_ADC_ConfigChannel+0x324>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028cc:	2000      	movs	r0, #0
 80028ce:	e04b      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028d0:	492a      	ldr	r1, [pc, #168]	; (800297c <HAL_ADC_ConfigChannel+0x350>)
 80028d2:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028d4:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80028d8:	d0ea      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x284>
 80028da:	e75e      	b.n	800279a <HAL_ADC_ConfigChannel+0x16e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028dc:	4927      	ldr	r1, [pc, #156]	; (800297c <HAL_ADC_ConfigChannel+0x350>)
 80028de:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028e0:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80028e4:	d0e4      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x284>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e6:	2000      	movs	r0, #0
 80028e8:	e03e      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028ea:	6801      	ldr	r1, [r0, #0]
 80028ec:	f011 0f01 	tst.w	r1, #1
 80028f0:	d0e6      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x294>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f4:	f042 0220 	orr.w	r2, r2, #32
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
 80028fc:	e034      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028fe:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002902:	d1df      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x298>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002904:	491d      	ldr	r1, [pc, #116]	; (800297c <HAL_ADC_ConfigChannel+0x350>)
 8002906:	688a      	ldr	r2, [r1, #8]
 8002908:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800290c:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_ADC_ConfigChannel+0x354>)
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8002916:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 800291a:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 800291e:	fba1 1202 	umull	r1, r2, r1, r2
 8002922:	0c92      	lsrs	r2, r2, #18
 8002924:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002928:	0052      	lsls	r2, r2, #1
 800292a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800292c:	9a01      	ldr	r2, [sp, #4]
 800292e:	b11a      	cbz	r2, 8002938 <HAL_ADC_ConfigChannel+0x30c>
            wait_loop_index--;
 8002930:	9a01      	ldr	r2, [sp, #4]
 8002932:	3a01      	subs	r2, #1
 8002934:	9201      	str	r2, [sp, #4]
 8002936:	e7f9      	b.n	800292c <HAL_ADC_ConfigChannel+0x300>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002938:	2000      	movs	r0, #0
 800293a:	e015      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800293c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002940:	d1c2      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x29c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_ADC_ConfigChannel+0x350>)
 8002944:	688a      	ldr	r2, [r1, #8]
 8002946:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800294a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294c:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800294e:	e00b      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002950:	490a      	ldr	r1, [pc, #40]	; (800297c <HAL_ADC_ConfigChannel+0x350>)
 8002952:	688a      	ldr	r2, [r1, #8]
 8002954:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002958:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295a:	2000      	movs	r0, #0
 800295c:	e004      	b.n	8002968 <HAL_ADC_ConfigChannel+0x33c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8002966:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800296e:	b016      	add	sp, #88	; 0x58
 8002970:	bc30      	pop	{r4, r5}
 8002972:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8002974:	2002      	movs	r0, #2
 8002976:	e7fa      	b.n	800296e <HAL_ADC_ConfigChannel+0x342>
 8002978:	83fff000 	.word	0x83fff000
 800297c:	50000300 	.word	0x50000300
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_ADCEx_InjectedConfigChannel>:
{
 8002984:	b470      	push	{r4, r5, r6}
 8002986:	b097      	sub	sp, #92	; 0x5c
 8002988:	4603      	mov	r3, r0
  __IO uint32_t wait_loop_index = 0U;
 800298a:	2200      	movs	r2, #0
 800298c:	9201      	str	r2, [sp, #4]
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800298e:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 8002990:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002994:	2a01      	cmp	r2, #1
 8002996:	f000 81de 	beq.w	8002d56 <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d033      	beq.n	8002a0c <HAL_ADCEx_InjectedConfigChannel+0x88>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80029a4:	698a      	ldr	r2, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80029a6:	2a01      	cmp	r2, #1
 80029a8:	d030      	beq.n	8002a0c <HAL_ADCEx_InjectedConfigChannel+0x88>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80029aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029ac:	b960      	cbnz	r0, 80029c8 <HAL_ADCEx_InjectedConfigChannel+0x44>
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80029ae:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80029b0:	2200      	movs	r2, #0
 80029b2:	649a      	str	r2, [r3, #72]	; 0x48
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80029b4:	6a0a      	ldr	r2, [r1, #32]
 80029b6:	2a01      	cmp	r2, #1
 80029b8:	f000 8091 	beq.w	8002ade <HAL_ADCEx_InjectedConfigChannel+0x15a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80029bc:	6988      	ldr	r0, [r1, #24]
 80029be:	3801      	subs	r0, #1
 80029c0:	4302      	orrs	r2, r0
 80029c2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80029c4:	4302      	orrs	r2, r0
 80029c6:	649a      	str	r2, [r3, #72]	; 0x48
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80029c8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80029ca:	684a      	ldr	r2, [r1, #4]
 80029cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80029d0:	0052      	lsls	r2, r2, #1
 80029d2:	3202      	adds	r2, #2
 80029d4:	241f      	movs	r4, #31
 80029d6:	4094      	lsls	r4, r2
 80029d8:	ea20 0004 	bic.w	r0, r0, r4
 80029dc:	680c      	ldr	r4, [r1, #0]
 80029de:	fa04 f202 	lsl.w	r2, r4, r2
 80029e2:	4302      	orrs	r2, r0
 80029e4:	649a      	str	r2, [r3, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount --;
 80029e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029e8:	3801      	subs	r0, #1
 80029ea:	64d8      	str	r0, [r3, #76]	; 0x4c
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d17a      	bne.n	8002ae6 <HAL_ADCEx_InjectedConfigChannel+0x162>
        MODIFY_REG(hadc->Instance->JSQR              ,
 80029f0:	681c      	ldr	r4, [r3, #0]
 80029f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80029f4:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 80029f8:	f420 00ef 	bic.w	r0, r0, #7831552	; 0x778000
 80029fc:	f420 40bf 	bic.w	r0, r0, #24448	; 0x5f80
 8002a00:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8002a04:	4302      	orrs	r2, r0
 8002a06:	64e2      	str	r2, [r4, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e007      	b.n	8002a1c <HAL_ADCEx_InjectedConfigChannel+0x98>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002a0c:	684a      	ldr	r2, [r1, #4]
 8002a0e:	2a01      	cmp	r2, #1
 8002a10:	d04b      	beq.n	8002aaa <HAL_ADCEx_InjectedConfigChannel+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a14:	f042 0220 	orr.w	r2, r2, #32
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8002a1a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	6894      	ldr	r4, [r2, #8]
 8002a20:	f014 0f08 	tst.w	r4, #8
 8002a24:	d10f      	bne.n	8002a46 <HAL_ADCEx_InjectedConfigChannel+0xc2>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002a26:	7f4c      	ldrb	r4, [r1, #29]
 8002a28:	2c00      	cmp	r4, #0
 8002a2a:	d15e      	bne.n	8002aea <HAL_ADCEx_InjectedConfigChannel+0x166>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002a2c:	68d4      	ldr	r4, [r2, #12]
 8002a2e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8002a32:	7f8d      	ldrb	r5, [r1, #30]
 8002a34:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8002a38:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 8002a3c:	ea4c 5c45 	orr.w	ip, ip, r5, lsl #21
 8002a40:	ea44 040c 	orr.w	r4, r4, ip
 8002a44:	60d4      	str	r4, [r2, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6894      	ldr	r4, [r2, #8]
 8002a4a:	f014 0f0c 	tst.w	r4, #12
 8002a4e:	f040 8082 	bne.w	8002b56 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002a52:	6a0c      	ldr	r4, [r1, #32]
 8002a54:	2c01      	cmp	r4, #1
 8002a56:	d058      	beq.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x186>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002a58:	68d4      	ldr	r4, [r2, #12]
 8002a5a:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8002a5e:	60d4      	str	r4, [r2, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002a60:	7f4a      	ldrb	r2, [r1, #29]
 8002a62:	2a01      	cmp	r2, #1
 8002a64:	d059      	beq.n	8002b1a <HAL_ADCEx_InjectedConfigChannel+0x196>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002a66:	680a      	ldr	r2, [r1, #0]
 8002a68:	2a09      	cmp	r2, #9
 8002a6a:	d95c      	bls.n	8002b26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002a6c:	681e      	ldr	r6, [r3, #0]
 8002a6e:	69b4      	ldr	r4, [r6, #24]
 8002a70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a74:	3a1e      	subs	r2, #30
 8002a76:	2507      	movs	r5, #7
 8002a78:	4095      	lsls	r5, r2
 8002a7a:	ea24 0405 	bic.w	r4, r4, r5
 8002a7e:	688d      	ldr	r5, [r1, #8]
 8002a80:	fa05 f202 	lsl.w	r2, r5, r2
 8002a84:	4322      	orrs	r2, r4
 8002a86:	61b2      	str	r2, [r6, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002a88:	694c      	ldr	r4, [r1, #20]
 8002a8a:	681d      	ldr	r5, [r3, #0]
 8002a8c:	68ea      	ldr	r2, [r5, #12]
 8002a8e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002a92:	0052      	lsls	r2, r2, #1
 8002a94:	fa04 f202 	lsl.w	r2, r4, r2
    switch (sConfigInjected->InjectedOffsetNumber)
 8002a98:	690c      	ldr	r4, [r1, #16]
 8002a9a:	3c01      	subs	r4, #1
 8002a9c:	2c03      	cmp	r4, #3
 8002a9e:	f200 809f 	bhi.w	8002be0 <HAL_ADCEx_InjectedConfigChannel+0x25c>
 8002aa2:	e8df f004 	tbb	[pc, r4]
 8002aa6:	7c4e      	.short	0x7c4e
 8002aa8:	9287      	.short	0x9287
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002aaa:	6a0a      	ldr	r2, [r1, #32]
 8002aac:	2a01      	cmp	r2, #1
 8002aae:	d013      	beq.n	8002ad8 <HAL_ADCEx_InjectedConfigChannel+0x154>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002ab0:	6808      	ldr	r0, [r1, #0]
 8002ab2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002ab6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002ab8:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR           ,
 8002aba:	681c      	ldr	r4, [r3, #0]
 8002abc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002abe:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 8002ac2:	f420 00ef 	bic.w	r0, r0, #7831552	; 0x778000
 8002ac6:	f420 40bf 	bic.w	r0, r0, #24448	; 0x5f80
 8002aca:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8002ace:	4310      	orrs	r0, r2
 8002ad0:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002ad2:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	e7a1      	b.n	8002a1c <HAL_ADCEx_InjectedConfigChannel+0x98>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8002ad8:	680a      	ldr	r2, [r1, #0]
 8002ada:	0212      	lsls	r2, r2, #8
 8002adc:	e7ed      	b.n	8002aba <HAL_ADCEx_InjectedConfigChannel+0x136>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002ade:	698a      	ldr	r2, [r1, #24]
 8002ae0:	3a01      	subs	r2, #1
 8002ae2:	649a      	str	r2, [r3, #72]	; 0x48
 8002ae4:	e770      	b.n	80029c8 <HAL_ADCEx_InjectedConfigChannel+0x44>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	e798      	b.n	8002a1c <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8002aea:	68d4      	ldr	r4, [r2, #12]
 8002aec:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8002af0:	7f8d      	ldrb	r5, [r1, #30]
 8002af2:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8002af6:	60d4      	str	r4, [r2, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002af8:	7f0a      	ldrb	r2, [r1, #28]
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d1a3      	bne.n	8002a46 <HAL_ADCEx_InjectedConfigChannel+0xc2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afe:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002b00:	f040 0020 	orr.w	r0, r0, #32
 8002b04:	6418      	str	r0, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002b06:	4610      	mov	r0, r2
 8002b08:	e79d      	b.n	8002a46 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002b0a:	68d4      	ldr	r4, [r2, #12]
 8002b0c:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8002b10:	7f4d      	ldrb	r5, [r1, #29]
 8002b12:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 8002b16:	60d4      	str	r4, [r2, #12]
 8002b18:	e7a5      	b.n	8002a66 <HAL_ADCEx_InjectedConfigChannel+0xe2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002b1c:	f040 0020 	orr.w	r0, r0, #32
 8002b20:	6418      	str	r0, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002b22:	4610      	mov	r0, r2
 8002b24:	e79f      	b.n	8002a66 <HAL_ADCEx_InjectedConfigChannel+0xe2>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002b26:	681e      	ldr	r6, [r3, #0]
 8002b28:	6974      	ldr	r4, [r6, #20]
 8002b2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b2e:	2507      	movs	r5, #7
 8002b30:	4095      	lsls	r5, r2
 8002b32:	ea24 0405 	bic.w	r4, r4, r5
 8002b36:	688d      	ldr	r5, [r1, #8]
 8002b38:	fa05 f202 	lsl.w	r2, r5, r2
 8002b3c:	4322      	orrs	r2, r4
 8002b3e:	6172      	str	r2, [r6, #20]
 8002b40:	e7a2      	b.n	8002a88 <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002b42:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8002b44:	4c85      	ldr	r4, [pc, #532]	; (8002d5c <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8002b46:	4034      	ands	r4, r6
 8002b48:	680e      	ldr	r6, [r1, #0]
 8002b4a:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002b4e:	4314      	orrs	r4, r2
 8002b50:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002b54:	662c      	str	r4, [r5, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b56:	681c      	ldr	r4, [r3, #0]
 8002b58:	68a2      	ldr	r2, [r4, #8]
 8002b5a:	f002 0203 	and.w	r2, r2, #3
 8002b5e:	2a01      	cmp	r2, #1
 8002b60:	d06e      	beq.n	8002c40 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b62:	68ca      	ldr	r2, [r1, #12]
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	d070      	beq.n	8002c4a <HAL_ADCEx_InjectedConfigChannel+0x2c6>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002b68:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002b6c:	f04f 0c01 	mov.w	ip, #1
 8002b70:	680d      	ldr	r5, [r1, #0]
 8002b72:	fa0c fc05 	lsl.w	ip, ip, r5
 8002b76:	ea22 020c 	bic.w	r2, r2, ip
 8002b7a:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b7e:	680a      	ldr	r2, [r1, #0]
 8002b80:	2a10      	cmp	r2, #16
 8002b82:	f000 808e 	beq.w	8002ca2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b86:	2a11      	cmp	r2, #17
 8002b88:	f000 80a6 	beq.w	8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x354>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b8c:	2a12      	cmp	r2, #18
 8002b8e:	f000 80a9 	beq.w	8002ce4 <HAL_ADCEx_InjectedConfigChannel+0x360>
  __HAL_UNLOCK(hadc);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002b98:	b017      	add	sp, #92	; 0x5c
 8002b9a:	bc70      	pop	{r4, r5, r6}
 8002b9c:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002b9e:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 8002ba0:	4c6e      	ldr	r4, [pc, #440]	; (8002d5c <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8002ba2:	4034      	ands	r4, r6
 8002ba4:	680e      	ldr	r6, [r1, #0]
 8002ba6:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002baa:	4314      	orrs	r4, r2
 8002bac:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002bb0:	666c      	str	r4, [r5, #100]	; 0x64
      break;
 8002bb2:	e7d0      	b.n	8002b56 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002bb4:	6eae      	ldr	r6, [r5, #104]	; 0x68
 8002bb6:	4c69      	ldr	r4, [pc, #420]	; (8002d5c <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8002bb8:	4034      	ands	r4, r6
 8002bba:	680e      	ldr	r6, [r1, #0]
 8002bbc:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002bc0:	4314      	orrs	r4, r2
 8002bc2:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002bc6:	66ac      	str	r4, [r5, #104]	; 0x68
      break;
 8002bc8:	e7c5      	b.n	8002b56 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002bca:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8002bcc:	4c63      	ldr	r4, [pc, #396]	; (8002d5c <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8002bce:	4034      	ands	r4, r6
 8002bd0:	680e      	ldr	r6, [r1, #0]
 8002bd2:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002bd6:	4322      	orrs	r2, r4
 8002bd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bdc:	66ea      	str	r2, [r5, #108]	; 0x6c
      break;
 8002bde:	e7ba      	b.n	8002b56 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002be0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002be2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002be6:	680c      	ldr	r4, [r1, #0]
 8002be8:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8002bec:	d103      	bne.n	8002bf6 <HAL_ADCEx_InjectedConfigChannel+0x272>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002bee:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002bf0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bf4:	662a      	str	r2, [r5, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8002bfa:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002bfe:	680d      	ldr	r5, [r1, #0]
 8002c00:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8002c04:	d103      	bne.n	8002c0e <HAL_ADCEx_InjectedConfigChannel+0x28a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c06:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8002c08:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8002c0c:	6654      	str	r4, [r2, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8002c12:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002c16:	680d      	ldr	r5, [r1, #0]
 8002c18:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8002c1c:	d103      	bne.n	8002c26 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c1e:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8002c20:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8002c24:	6694      	str	r4, [r2, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8002c2a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002c2e:	680d      	ldr	r5, [r1, #0]
 8002c30:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8002c34:	d18f      	bne.n	8002b56 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c36:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8002c38:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8002c3c:	66d4      	str	r4, [r2, #108]	; 0x6c
 8002c3e:	e78a      	b.n	8002b56 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	f012 0f01 	tst.w	r2, #1
 8002c46:	d1a4      	bne.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
 8002c48:	e78b      	b.n	8002b62 <HAL_ADCEx_InjectedConfigChannel+0x1de>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002c4a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002c4e:	680d      	ldr	r5, [r1, #0]
 8002c50:	f04f 0c01 	mov.w	ip, #1
 8002c54:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c58:	ea42 020c 	orr.w	r2, r2, ip
 8002c5c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002c60:	680a      	ldr	r2, [r1, #0]
 8002c62:	2a09      	cmp	r2, #9
 8002c64:	d90e      	bls.n	8002c84 <HAL_ADCEx_InjectedConfigChannel+0x300>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c66:	681e      	ldr	r6, [r3, #0]
 8002c68:	69b4      	ldr	r4, [r6, #24]
 8002c6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c6e:	3a1b      	subs	r2, #27
 8002c70:	2507      	movs	r5, #7
 8002c72:	4095      	lsls	r5, r2
 8002c74:	ea24 0405 	bic.w	r4, r4, r5
 8002c78:	688d      	ldr	r5, [r1, #8]
 8002c7a:	fa05 f202 	lsl.w	r2, r5, r2
 8002c7e:	4322      	orrs	r2, r4
 8002c80:	61b2      	str	r2, [r6, #24]
 8002c82:	e77c      	b.n	8002b7e <HAL_ADCEx_InjectedConfigChannel+0x1fa>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c84:	681e      	ldr	r6, [r3, #0]
 8002c86:	6974      	ldr	r4, [r6, #20]
 8002c88:	3201      	adds	r2, #1
 8002c8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c8e:	2507      	movs	r5, #7
 8002c90:	4095      	lsls	r5, r2
 8002c92:	ea24 0405 	bic.w	r4, r4, r5
 8002c96:	688d      	ldr	r5, [r1, #8]
 8002c98:	fa05 f202 	lsl.w	r2, r5, r2
 8002c9c:	4322      	orrs	r2, r4
 8002c9e:	6172      	str	r2, [r6, #20]
 8002ca0:	e76d      	b.n	8002b7e <HAL_ADCEx_InjectedConfigChannel+0x1fa>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ca2:	492f      	ldr	r1, [pc, #188]	; (8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002ca4:	6889      	ldr	r1, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ca6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002caa:	f47f af6c 	bne.w	8002b86 <HAL_ADCEx_InjectedConfigChannel+0x202>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	9102      	str	r1, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cb2:	681c      	ldr	r4, [r3, #0]
 8002cb4:	68a1      	ldr	r1, [r4, #8]
 8002cb6:	f001 0103 	and.w	r1, r1, #3
 8002cba:	2901      	cmp	r1, #1
 8002cbc:	d019      	beq.n	8002cf2 <HAL_ADCEx_InjectedConfigChannel+0x36e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cbe:	2a10      	cmp	r2, #16
 8002cc0:	d021      	beq.n	8002d06 <HAL_ADCEx_InjectedConfigChannel+0x382>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002cc2:	2a11      	cmp	r2, #17
 8002cc4:	d03e      	beq.n	8002d44 <HAL_ADCEx_InjectedConfigChannel+0x3c0>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002cc6:	2a12      	cmp	r2, #18
 8002cc8:	f47f af63 	bne.w	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ccc:	4924      	ldr	r1, [pc, #144]	; (8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002cce:	688a      	ldr	r2, [r1, #8]
 8002cd0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002cd4:	608a      	str	r2, [r1, #8]
 8002cd6:	e75c      	b.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cd8:	4921      	ldr	r1, [pc, #132]	; (8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002cda:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002cdc:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002ce0:	d0e5      	beq.n	8002cae <HAL_ADCEx_InjectedConfigChannel+0x32a>
 8002ce2:	e753      	b.n	8002b8c <HAL_ADCEx_InjectedConfigChannel+0x208>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ce4:	491e      	ldr	r1, [pc, #120]	; (8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002ce6:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002ce8:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002cec:	f47f af51 	bne.w	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
 8002cf0:	e7dd      	b.n	8002cae <HAL_ADCEx_InjectedConfigChannel+0x32a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	f011 0f01 	tst.w	r1, #1
 8002cf8:	d0e1      	beq.n	8002cbe <HAL_ADCEx_InjectedConfigChannel+0x33a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	e745      	b.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d06:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002d0a:	d1da      	bne.n	8002cc2 <HAL_ADCEx_InjectedConfigChannel+0x33e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d0c:	4914      	ldr	r1, [pc, #80]	; (8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002d0e:	688a      	ldr	r2, [r1, #8]
 8002d10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d14:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d16:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8002d1e:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8002d22:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8002d26:	fba1 1202 	umull	r1, r2, r1, r2
 8002d2a:	0c92      	lsrs	r2, r2, #18
 8002d2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d30:	0052      	lsls	r2, r2, #1
 8002d32:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002d34:	e002      	b.n	8002d3c <HAL_ADCEx_InjectedConfigChannel+0x3b8>
            wait_loop_index--;
 8002d36:	9a01      	ldr	r2, [sp, #4]
 8002d38:	3a01      	subs	r2, #1
 8002d3a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002d3c:	9a01      	ldr	r2, [sp, #4]
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	d1f9      	bne.n	8002d36 <HAL_ADCEx_InjectedConfigChannel+0x3b2>
 8002d42:	e726      	b.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d44:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002d48:	d1bd      	bne.n	8002cc6 <HAL_ADCEx_InjectedConfigChannel+0x342>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d4a:	4905      	ldr	r1, [pc, #20]	; (8002d60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002d4c:	688a      	ldr	r2, [r1, #8]
 8002d4e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002d52:	608a      	str	r2, [r1, #8]
 8002d54:	e71d      	b.n	8002b92 <HAL_ADCEx_InjectedConfigChannel+0x20e>
  __HAL_LOCK(hadc);
 8002d56:	2002      	movs	r0, #2
 8002d58:	e71e      	b.n	8002b98 <HAL_ADCEx_InjectedConfigChannel+0x214>
 8002d5a:	bf00      	nop
 8002d5c:	83fff000 	.word	0x83fff000
 8002d60:	50000300 	.word	0x50000300
 8002d64:	20000000 	.word	0x20000000

08002d68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002d6a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d74:	0200      	lsls	r0, r0, #8
 8002d76:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d84:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_NVIC_SetPriority+0x68>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d96:	f1c3 0c07 	rsb	ip, r3, #7
 8002d9a:	f1bc 0f04 	cmp.w	ip, #4
 8002d9e:	bf28      	it	cs
 8002da0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da4:	f103 0e04 	add.w	lr, r3, #4
 8002da8:	f1be 0f06 	cmp.w	lr, #6
 8002dac:	d918      	bls.n	8002de0 <HAL_NVIC_SetPriority+0x54>
 8002dae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	f04f 3eff 	mov.w	lr, #4294967295
 8002db4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002db8:	ea21 010c 	bic.w	r1, r1, ip
 8002dbc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dbe:	fa0e f303 	lsl.w	r3, lr, r3
 8002dc2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	db0b      	blt.n	8002de4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	0109      	lsls	r1, r1, #4
 8002dce:	b2c9      	uxtb	r1, r1
 8002dd0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002dd4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002dd8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ddc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de0:	2300      	movs	r3, #0
 8002de2:	e7e5      	b.n	8002db0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	f000 000f 	and.w	r0, r0, #15
 8002de8:	0109      	lsls	r1, r1, #4
 8002dea:	b2c9      	uxtb	r1, r1
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <HAL_NVIC_SetPriority+0x6c>)
 8002dee:	5419      	strb	r1, [r3, r0]
 8002df0:	e7f4      	b.n	8002ddc <HAL_NVIC_SetPriority+0x50>
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00
 8002df8:	e000ed14 	.word	0xe000ed14

08002dfc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	db07      	blt.n	8002e10 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e00:	f000 021f 	and.w	r2, r0, #31
 8002e04:	0940      	lsrs	r0, r0, #5
 8002e06:	2301      	movs	r3, #1
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	4a02      	ldr	r2, [pc, #8]	; (8002e14 <HAL_NVIC_EnableIRQ+0x18>)
 8002e0c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	3801      	subs	r0, #1
 8002e1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e1e:	d20b      	bcs.n	8002e38 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e24:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <HAL_SYSTICK_Config+0x24>)
 8002e28:	21f0      	movs	r1, #240	; 0xf0
 8002e2a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e2e:	2000      	movs	r0, #0
 8002e30:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e32:	2207      	movs	r2, #7
 8002e34:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e36:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002e38:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e40:	b430      	push	{r4, r5}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e42:	2401      	movs	r4, #1
 8002e44:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002e46:	40ac      	lsls	r4, r5
 8002e48:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002e4a:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e4c:	6804      	ldr	r4, [r0, #0]
 8002e4e:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e50:	6843      	ldr	r3, [r0, #4]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d005      	beq.n	8002e62 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002e5a:	6803      	ldr	r3, [r0, #0]
 8002e5c:	60da      	str	r2, [r3, #12]
  }
}
 8002e5e:	bc30      	pop	{r4, r5}
 8002e60:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002e62:	6803      	ldr	r3, [r0, #0]
 8002e64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002e66:	6803      	ldr	r3, [r0, #0]
 8002e68:	60d9      	str	r1, [r3, #12]
 8002e6a:	e7f8      	b.n	8002e5e <DMA_SetConfig+0x1e>

08002e6c <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e6c:	6802      	ldr	r2, [r0, #0]
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <DMA_CalcBaseAndBitshift+0x18>)
 8002e70:	4413      	add	r3, r2
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <DMA_CalcBaseAndBitshift+0x1c>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e7e:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <DMA_CalcBaseAndBitshift+0x20>)
 8002e80:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8002e82:	4770      	bx	lr
 8002e84:	bffdfff8 	.word	0xbffdfff8
 8002e88:	cccccccd 	.word	0xcccccccd
 8002e8c:	40020000 	.word	0x40020000

08002e90 <HAL_DMA_Init>:
  if(NULL == hdma)
 8002e90:	b320      	cbz	r0, 8002edc <HAL_DMA_Init+0x4c>
{ 
 8002e92:	b510      	push	{r4, lr}
 8002e94:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002e9c:	6801      	ldr	r1, [r0, #0]
 8002e9e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ea0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002ea4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002ea8:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eaa:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8002eac:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eae:	68e0      	ldr	r0, [r4, #12]
 8002eb0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb2:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb6:	6960      	ldr	r0, [r4, #20]
 8002eb8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebe:	69e0      	ldr	r0, [r4, #28]
 8002ec0:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002ec2:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8002ec4:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f7ff ffd0 	bl	8002e6c <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	2000      	movs	r0, #0
 8002ece:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002ed6:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8002eda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
}  
 8002ede:	4770      	bx	lr

08002ee0 <HAL_DMA_Start_IT>:
{
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002ee4:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002ee8:	2801      	cmp	r0, #1
 8002eea:	d031      	beq.n	8002f50 <HAL_DMA_Start_IT+0x70>
 8002eec:	2001      	movs	r0, #1
 8002eee:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ef2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8002ef6:	2801      	cmp	r0, #1
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002efa:	2300      	movs	r3, #0
 8002efc:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002f00:	2002      	movs	r0, #2
} 
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	2002      	movs	r0, #2
 8002f06:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f0e:	6825      	ldr	r5, [r4, #0]
 8002f10:	6828      	ldr	r0, [r5, #0]
 8002f12:	f020 0001 	bic.w	r0, r0, #1
 8002f16:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f7ff ff91 	bl	8002e40 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002f1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f20:	b15b      	cbz	r3, 8002f3a <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	f043 030e 	orr.w	r3, r3, #14
 8002f2a:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2000      	movs	r0, #0
 8002f38:	e7e3      	b.n	8002f02 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	f043 030a 	orr.w	r3, r3, #10
 8002f42:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e7ed      	b.n	8002f2c <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002f50:	2002      	movs	r0, #2
 8002f52:	e7d6      	b.n	8002f02 <HAL_DMA_Start_IT+0x22>

08002f54 <HAL_DMA_IRQHandler>:
{
 8002f54:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f56:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f58:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002f5a:	6804      	ldr	r4, [r0, #0]
 8002f5c:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002f60:	2304      	movs	r3, #4
 8002f62:	408b      	lsls	r3, r1
 8002f64:	4213      	tst	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x3c>
 8002f68:	f015 0f04 	tst.w	r5, #4
 8002f6c:	d010      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f013 0f20 	tst.w	r3, #32
 8002f74:	d103      	bne.n	8002f7e <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f7e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002f80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002f82:	2304      	movs	r3, #4
 8002f84:	408b      	lsls	r3, r1
 8002f86:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f8a:	b103      	cbz	r3, 8002f8e <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8002f8c:	4798      	blx	r3
}  
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f90:	2302      	movs	r3, #2
 8002f92:	408b      	lsls	r3, r1
 8002f94:	4213      	tst	r3, r2
 8002f96:	d01a      	beq.n	8002fce <HAL_DMA_IRQHandler+0x7a>
 8002f98:	f015 0f02 	tst.w	r5, #2
 8002f9c:	d017      	beq.n	8002fce <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	f013 0f20 	tst.w	r3, #32
 8002fa4:	d106      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	f023 030a 	bic.w	r3, r3, #10
 8002fac:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002fb4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fb6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002fb8:	2302      	movs	r3, #2
 8002fba:	408b      	lsls	r3, r1
 8002fbc:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002fc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0e1      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002fca:	4798      	blx	r3
 8002fcc:	e7df      	b.n	8002f8e <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fce:	2308      	movs	r3, #8
 8002fd0:	fa03 f101 	lsl.w	r1, r3, r1
 8002fd4:	4211      	tst	r1, r2
 8002fd6:	d0da      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x3a>
 8002fd8:	f015 0f08 	tst.w	r5, #8
 8002fdc:	d0d7      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	f023 030e 	bic.w	r3, r3, #14
 8002fe4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002fe6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002fe8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002fea:	2301      	movs	r3, #1
 8002fec:	fa03 f202 	lsl.w	r2, r3, r2
 8002ff0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002ff4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002ffe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0c4      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8003004:	4798      	blx	r3
}  
 8003006:	e7c2      	b.n	8002f8e <HAL_DMA_IRQHandler+0x3a>

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800300c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	e062      	b.n	80030d6 <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003010:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003012:	005e      	lsls	r6, r3, #1
 8003014:	2403      	movs	r4, #3
 8003016:	40b4      	lsls	r4, r6
 8003018:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800301c:	68cc      	ldr	r4, [r1, #12]
 800301e:	40b4      	lsls	r4, r6
 8003020:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003022:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003024:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003026:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302a:	684c      	ldr	r4, [r1, #4]
 800302c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003030:	409c      	lsls	r4, r3
 8003032:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003036:	6044      	str	r4, [r0, #4]
 8003038:	e05e      	b.n	80030f8 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800303a:	08dd      	lsrs	r5, r3, #3
 800303c:	3508      	adds	r5, #8
 800303e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003042:	f003 0407 	and.w	r4, r3, #7
 8003046:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800304a:	240f      	movs	r4, #15
 800304c:	fa04 f40c 	lsl.w	r4, r4, ip
 8003050:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003054:	690c      	ldr	r4, [r1, #16]
 8003056:	fa04 f40c 	lsl.w	r4, r4, ip
 800305a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800305e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003062:	e060      	b.n	8003126 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003064:	2403      	movs	r4, #3
 8003066:	e000      	b.n	800306a <HAL_GPIO_Init+0x62>
 8003068:	2400      	movs	r4, #0
 800306a:	fa04 f40e 	lsl.w	r4, r4, lr
 800306e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003070:	f10c 0c02 	add.w	ip, ip, #2
 8003074:	4d4f      	ldr	r5, [pc, #316]	; (80031b4 <HAL_GPIO_Init+0x1ac>)
 8003076:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800307a:	4c4f      	ldr	r4, [pc, #316]	; (80031b8 <HAL_GPIO_Init+0x1b0>)
 800307c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800307e:	43d4      	mvns	r4, r2
 8003080:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003084:	684f      	ldr	r7, [r1, #4]
 8003086:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800308a:	d001      	beq.n	8003090 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800308c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8003090:	4d49      	ldr	r5, [pc, #292]	; (80031b8 <HAL_GPIO_Init+0x1b0>)
 8003092:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003094:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003096:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800309a:	684f      	ldr	r7, [r1, #4]
 800309c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80030a0:	d001      	beq.n	80030a6 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80030a2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 80030a6:	4d44      	ldr	r5, [pc, #272]	; (80031b8 <HAL_GPIO_Init+0x1b0>)
 80030a8:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 80030aa:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80030ac:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030b0:	684f      	ldr	r7, [r1, #4]
 80030b2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80030b6:	d001      	beq.n	80030bc <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80030b8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80030bc:	4d3e      	ldr	r5, [pc, #248]	; (80031b8 <HAL_GPIO_Init+0x1b0>)
 80030be:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c0:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80030c2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c4:	684e      	ldr	r6, [r1, #4]
 80030c6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80030ca:	d001      	beq.n	80030d0 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80030cc:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 80030d0:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_GPIO_Init+0x1b0>)
 80030d2:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80030d4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	680a      	ldr	r2, [r1, #0]
 80030d8:	fa32 f403 	lsrs.w	r4, r2, r3
 80030dc:	d068      	beq.n	80031b0 <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030de:	f04f 0c01 	mov.w	ip, #1
 80030e2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80030e6:	ea1c 0202 	ands.w	r2, ip, r2
 80030ea:	d0f3      	beq.n	80030d4 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ec:	684c      	ldr	r4, [r1, #4]
 80030ee:	f004 0403 	and.w	r4, r4, #3
 80030f2:	3c01      	subs	r4, #1
 80030f4:	2c01      	cmp	r4, #1
 80030f6:	d98b      	bls.n	8003010 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f8:	684c      	ldr	r4, [r1, #4]
 80030fa:	f004 0403 	and.w	r4, r4, #3
 80030fe:	2c03      	cmp	r4, #3
 8003100:	d00c      	beq.n	800311c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003102:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003104:	005d      	lsls	r5, r3, #1
 8003106:	f04f 0c03 	mov.w	ip, #3
 800310a:	fa0c fc05 	lsl.w	ip, ip, r5
 800310e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003112:	688c      	ldr	r4, [r1, #8]
 8003114:	40ac      	lsls	r4, r5
 8003116:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800311a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	684c      	ldr	r4, [r1, #4]
 800311e:	f004 0403 	and.w	r4, r4, #3
 8003122:	2c02      	cmp	r4, #2
 8003124:	d089      	beq.n	800303a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8003126:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003128:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800312c:	f04f 0c03 	mov.w	ip, #3
 8003130:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003134:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003138:	684c      	ldr	r4, [r1, #4]
 800313a:	f004 0403 	and.w	r4, r4, #3
 800313e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003142:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003146:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003148:	684c      	ldr	r4, [r1, #4]
 800314a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800314e:	d0c1      	beq.n	80030d4 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003150:	4c1a      	ldr	r4, [pc, #104]	; (80031bc <HAL_GPIO_Init+0x1b4>)
 8003152:	69a5      	ldr	r5, [r4, #24]
 8003154:	f045 0501 	orr.w	r5, r5, #1
 8003158:	61a5      	str	r5, [r4, #24]
 800315a:	69a4      	ldr	r4, [r4, #24]
 800315c:	f004 0401 	and.w	r4, r4, #1
 8003160:	9401      	str	r4, [sp, #4]
 8003162:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003164:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003168:	f10c 0502 	add.w	r5, ip, #2
 800316c:	4c11      	ldr	r4, [pc, #68]	; (80031b4 <HAL_GPIO_Init+0x1ac>)
 800316e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003172:	f003 0403 	and.w	r4, r3, #3
 8003176:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800317a:	240f      	movs	r4, #15
 800317c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003180:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003184:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003188:	f43f af6e 	beq.w	8003068 <HAL_GPIO_Init+0x60>
 800318c:	4c0c      	ldr	r4, [pc, #48]	; (80031c0 <HAL_GPIO_Init+0x1b8>)
 800318e:	42a0      	cmp	r0, r4
 8003190:	d00a      	beq.n	80031a8 <HAL_GPIO_Init+0x1a0>
 8003192:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003196:	42a0      	cmp	r0, r4
 8003198:	d008      	beq.n	80031ac <HAL_GPIO_Init+0x1a4>
 800319a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800319e:	42a0      	cmp	r0, r4
 80031a0:	f43f af60 	beq.w	8003064 <HAL_GPIO_Init+0x5c>
 80031a4:	2405      	movs	r4, #5
 80031a6:	e760      	b.n	800306a <HAL_GPIO_Init+0x62>
 80031a8:	2401      	movs	r4, #1
 80031aa:	e75e      	b.n	800306a <HAL_GPIO_Init+0x62>
 80031ac:	2402      	movs	r4, #2
 80031ae:	e75c      	b.n	800306a <HAL_GPIO_Init+0x62>
  }
}
 80031b0:	b003      	add	sp, #12
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	48000400 	.word	0x48000400

080031c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c4:	6903      	ldr	r3, [r0, #16]
 80031c6:	4219      	tst	r1, r3
 80031c8:	d001      	beq.n	80031ce <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80031ca:	2001      	movs	r0, #1
 80031cc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ce:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80031d0:	4770      	bx	lr

080031d2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d2:	b10a      	cbz	r2, 80031d8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d4:	6181      	str	r1, [r0, #24]
 80031d6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031d8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80031da:	4770      	bx	lr

080031dc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031dc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031de:	ea01 0203 	and.w	r2, r1, r3
 80031e2:	ea21 0103 	bic.w	r1, r1, r3
 80031e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031ea:	6181      	str	r1, [r0, #24]
}
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f0:	2800      	cmp	r0, #0
 80031f2:	f000 8301 	beq.w	80037f8 <HAL_RCC_OscConfig+0x608>
{
 80031f6:	b570      	push	{r4, r5, r6, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fc:	6803      	ldr	r3, [r0, #0]
 80031fe:	f013 0f01 	tst.w	r3, #1
 8003202:	d03b      	beq.n	800327c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003204:	4bb5      	ldr	r3, [pc, #724]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b04      	cmp	r3, #4
 800320e:	d01e      	beq.n	800324e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003210:	4bb2      	ldr	r3, [pc, #712]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d068      	beq.n	80032f6 <HAL_RCC_OscConfig+0x106>
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8092 	bne.w	800334e <HAL_RCC_OscConfig+0x15e>
 800322a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800322e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e05d      	b.n	8003300 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003244:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800324c:	d0e6      	beq.n	800321c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003252:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4ba1      	ldr	r3, [pc, #644]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2201      	movs	r2, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	420b      	tst	r3, r1
 8003272:	d003      	beq.n	800327c <HAL_RCC_OscConfig+0x8c>
 8003274:	6863      	ldr	r3, [r4, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 82c0 	beq.w	80037fc <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	f013 0f02 	tst.w	r3, #2
 8003282:	f000 80c5 	beq.w	8003410 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003286:	4b95      	ldr	r3, [pc, #596]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f013 0f0c 	tst.w	r3, #12
 800328e:	f000 809c 	beq.w	80033ca <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003292:	4b92      	ldr	r3, [pc, #584]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b08      	cmp	r3, #8
 800329c:	f000 808f 	beq.w	80033be <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a0:	6923      	ldr	r3, [r4, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80f2 	beq.w	800348c <HAL_RCC_OscConfig+0x29c>
 80032a8:	2201      	movs	r2, #1
 80032aa:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fe2f 	bl	8001f20 <HAL_GetTick>
 80032c2:	4605      	mov	r5, r0
 80032c4:	2302      	movs	r3, #2
 80032c6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ca:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	2302      	movs	r3, #2
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2201      	movs	r2, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	420b      	tst	r3, r1
 80032e4:	f040 80c3 	bne.w	800346e <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e8:	f7fe fe1a 	bl	8001f20 <HAL_GetTick>
 80032ec:	1b40      	subs	r0, r0, r5
 80032ee:	2802      	cmp	r0, #2
 80032f0:	d9e8      	bls.n	80032c4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80032f2:	2003      	movs	r0, #3
 80032f4:	e28b      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f6:	4a79      	ldr	r2, [pc, #484]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003300:	4a76      	ldr	r2, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003302:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003304:	f023 030f 	bic.w	r3, r3, #15
 8003308:	68a1      	ldr	r1, [r4, #8]
 800330a:	430b      	orrs	r3, r1
 800330c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330e:	6863      	ldr	r3, [r4, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d036      	beq.n	8003382 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8003314:	f7fe fe04 	bl	8001f20 <HAL_GetTick>
 8003318:	4605      	mov	r5, r0
 800331a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b6e      	ldr	r3, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2201      	movs	r2, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	420b      	tst	r3, r1
 800333e:	d19d      	bne.n	800327c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fdee 	bl	8001f20 <HAL_GetTick>
 8003344:	1b40      	subs	r0, r0, r5
 8003346:	2864      	cmp	r0, #100	; 0x64
 8003348:	d9e7      	bls.n	800331a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800334a:	2003      	movs	r0, #3
 800334c:	e25f      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003352:	d009      	beq.n	8003368 <HAL_RCC_OscConfig+0x178>
 8003354:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e7cb      	b.n	8003300 <HAL_RCC_OscConfig+0x110>
 8003368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800336c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e7be      	b.n	8003300 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8003382:	f7fe fdcd 	bl	8001f20 <HAL_GetTick>
 8003386:	4605      	mov	r5, r0
 8003388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003390:	4b52      	ldr	r3, [pc, #328]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	2201      	movs	r2, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	420b      	tst	r3, r1
 80033ac:	f43f af66 	beq.w	800327c <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe fdb6 	bl	8001f20 <HAL_GetTick>
 80033b4:	1b40      	subs	r0, r0, r5
 80033b6:	2864      	cmp	r0, #100	; 0x64
 80033b8:	d9e6      	bls.n	8003388 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	e227      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80033c6:	f47f af6b 	bne.w	80032a0 <HAL_RCC_OscConfig+0xb0>
 80033ca:	2302      	movs	r3, #2
 80033cc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	2302      	movs	r3, #2
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2201      	movs	r2, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	420b      	tst	r3, r1
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_OscConfig+0x204>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f040 8206 	bne.w	8003800 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4839      	ldr	r0, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 80033f6:	6803      	ldr	r3, [r0, #0]
 80033f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033fc:	6961      	ldr	r1, [r4, #20]
 80033fe:	22f8      	movs	r2, #248	; 0xf8
 8003400:	fa92 f2a2 	rbit	r2, r2
 8003404:	fab2 f282 	clz	r2, r2
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	4313      	orrs	r3, r2
 800340e:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	f013 0f08 	tst.w	r3, #8
 8003416:	f000 808d 	beq.w	8003534 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341a:	69a3      	ldr	r3, [r4, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d061      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2f4>
 8003420:	2101      	movs	r1, #1
 8003422:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_RCC_OscConfig+0x2f0>)
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe fd75 	bl	8001f20 <HAL_GetTick>
 8003436:	4605      	mov	r5, r0
 8003438:	2302      	movs	r3, #2
 800343a:	fa93 f2a3 	rbit	r2, r3
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003448:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2201      	movs	r2, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	420b      	tst	r3, r1
 800345e:	d169      	bne.n	8003534 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003460:	f7fe fd5e 	bl	8001f20 <HAL_GetTick>
 8003464:	1b40      	subs	r0, r0, r5
 8003466:	2802      	cmp	r0, #2
 8003468:	d9e6      	bls.n	8003438 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800346a:	2003      	movs	r0, #3
 800346c:	e1cf      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	481b      	ldr	r0, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 8003470:	6803      	ldr	r3, [r0, #0]
 8003472:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003476:	6961      	ldr	r1, [r4, #20]
 8003478:	22f8      	movs	r2, #248	; 0xf8
 800347a:	fa92 f2a2 	rbit	r2, r2
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	fa01 f202 	lsl.w	r2, r1, r2
 8003486:	4313      	orrs	r3, r2
 8003488:	6003      	str	r3, [r0, #0]
 800348a:	e7c1      	b.n	8003410 <HAL_RCC_OscConfig+0x220>
 800348c:	2301      	movs	r3, #1
 800348e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800349a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034a4:	f7fe fd3c 	bl	8001f20 <HAL_GetTick>
 80034a8:	4605      	mov	r5, r0
 80034aa:	2302      	movs	r3, #2
 80034ac:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_OscConfig+0x2ec>)
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	2302      	movs	r3, #2
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2201      	movs	r2, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	420b      	tst	r3, r1
 80034ca:	d0a1      	beq.n	8003410 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fe fd28 	bl	8001f20 <HAL_GetTick>
 80034d0:	1b40      	subs	r0, r0, r5
 80034d2:	2802      	cmp	r0, #2
 80034d4:	d9e9      	bls.n	80034aa <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 80034d6:	2003      	movs	r0, #3
 80034d8:	e199      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	10908120 	.word	0x10908120
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ea:	fab2 f282 	clz	r2, r2
 80034ee:	4bb7      	ldr	r3, [pc, #732]	; (80037cc <HAL_RCC_OscConfig+0x5dc>)
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fe fd12 	bl	8001f20 <HAL_GetTick>
 80034fc:	4605      	mov	r5, r0
 80034fe:	2302      	movs	r3, #2
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4ab0      	ldr	r2, [pc, #704]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800350e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2201      	movs	r2, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	420b      	tst	r3, r1
 8003524:	d006      	beq.n	8003534 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe fcfb 	bl	8001f20 <HAL_GetTick>
 800352a:	1b40      	subs	r0, r0, r5
 800352c:	2802      	cmp	r0, #2
 800352e:	d9e6      	bls.n	80034fe <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8003530:	2003      	movs	r0, #3
 8003532:	e16c      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	f013 0f04 	tst.w	r3, #4
 800353a:	f000 80a9 	beq.w	8003690 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4ba4      	ldr	r3, [pc, #656]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003546:	d120      	bne.n	800358a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4ba1      	ldr	r3, [pc, #644]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003550:	61da      	str	r2, [r3, #28]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800355c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b9d      	ldr	r3, [pc, #628]	; (80037d4 <HAL_RCC_OscConfig+0x5e4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003566:	d012      	beq.n	800358e <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	68e3      	ldr	r3, [r4, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d023      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3c6>
 800356e:	bb73      	cbnz	r3, 80035ce <HAL_RCC_OscConfig+0x3de>
 8003570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003574:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	621a      	str	r2, [r3, #32]
 8003580:	6a1a      	ldr	r2, [r3, #32]
 8003582:	f022 0204 	bic.w	r2, r2, #4
 8003586:	621a      	str	r2, [r3, #32]
 8003588:	e01a      	b.n	80035c0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2500      	movs	r5, #0
 800358c:	e7e7      	b.n	800355e <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358e:	4a91      	ldr	r2, [pc, #580]	; (80037d4 <HAL_RCC_OscConfig+0x5e4>)
 8003590:	6813      	ldr	r3, [r2, #0]
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003598:	f7fe fcc2 	bl	8001f20 <HAL_GetTick>
 800359c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b8d      	ldr	r3, [pc, #564]	; (80037d4 <HAL_RCC_OscConfig+0x5e4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035a6:	d1df      	bne.n	8003568 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fe fcba 	bl	8001f20 <HAL_GetTick>
 80035ac:	1b80      	subs	r0, r0, r6
 80035ae:	2864      	cmp	r0, #100	; 0x64
 80035b0:	d9f5      	bls.n	800359e <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80035b2:	2003      	movs	r0, #3
 80035b4:	e12b      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b6:	4a86      	ldr	r2, [pc, #536]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 80035b8:	6a13      	ldr	r3, [r2, #32]
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c0:	68e3      	ldr	r3, [r4, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03c      	beq.n	8003640 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fcab 	bl	8001f20 <HAL_GetTick>
 80035ca:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e02b      	b.n	8003626 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3f6>
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 80035d4:	6a1a      	ldr	r2, [r3, #32]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	621a      	str	r2, [r3, #32]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	e7ec      	b.n	80035c0 <HAL_RCC_OscConfig+0x3d0>
 80035e6:	4b7a      	ldr	r3, [pc, #488]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	f042 0204 	orr.w	r2, r2, #4
 80035ee:	621a      	str	r2, [r3, #32]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	621a      	str	r2, [r3, #32]
 80035f8:	e7e2      	b.n	80035c0 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 80035fc:	6a19      	ldr	r1, [r3, #32]
 80035fe:	2302      	movs	r3, #2
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	4219      	tst	r1, r3
 8003614:	d13b      	bne.n	800368e <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7fe fc83 	bl	8001f20 <HAL_GetTick>
 800361a:	1b80      	subs	r0, r0, r6
 800361c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003620:	4298      	cmp	r0, r3
 8003622:	f200 80ef 	bhi.w	8003804 <HAL_RCC_OscConfig+0x614>
 8003626:	2302      	movs	r3, #2
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e2      	bne.n	80035fa <HAL_RCC_OscConfig+0x40a>
 8003634:	2302      	movs	r3, #2
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800363c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800363e:	e7de      	b.n	80035fe <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fe fc6e 	bl	8001f20 <HAL_GetTick>
 8003644:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x484>
 8003648:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800364a:	6a19      	ldr	r1, [r3, #32]
 800364c:	2302      	movs	r3, #2
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2201      	movs	r2, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	4219      	tst	r1, r3
 8003662:	d014      	beq.n	800368e <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7fe fc5c 	bl	8001f20 <HAL_GetTick>
 8003668:	1b80      	subs	r0, r0, r6
 800366a:	f241 3388 	movw	r3, #5000	; 0x1388
 800366e:	4298      	cmp	r0, r3
 8003670:	f200 80ca 	bhi.w	8003808 <HAL_RCC_OscConfig+0x618>
 8003674:	2302      	movs	r3, #2
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e2      	bne.n	8003648 <HAL_RCC_OscConfig+0x458>
 8003682:	2302      	movs	r3, #2
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800368a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800368c:	e7de      	b.n	800364c <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800368e:	bbb5      	cbnz	r5, 80036fe <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	69e3      	ldr	r3, [r4, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80ba 	beq.w	800380c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003698:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	f002 020c 	and.w	r2, r2, #12
 80036a0:	2a08      	cmp	r2, #8
 80036a2:	f000 8099 	beq.w	80037d8 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d02f      	beq.n	800370a <HAL_RCC_OscConfig+0x51a>
 80036aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ae:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fc2c 	bl	8001f20 <HAL_GetTick>
 80036c8:	4604      	mov	r4, r0
 80036ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ce:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d2:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	4219      	tst	r1, r3
 80036ee:	d06b      	beq.n	80037c8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fc16 	bl	8001f20 <HAL_GetTick>
 80036f4:	1b00      	subs	r0, r0, r4
 80036f6:	2802      	cmp	r0, #2
 80036f8:	d9e7      	bls.n	80036ca <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
 80036fc:	e087      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 8003700:	69d3      	ldr	r3, [r2, #28]
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
 8003708:	e7c2      	b.n	8003690 <HAL_RCC_OscConfig+0x4a0>
 800370a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800370e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800371a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003724:	f7fe fbfc 	bl	8001f20 <HAL_GetTick>
 8003728:	4605      	mov	r5, r0
 800372a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003732:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2201      	movs	r2, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	4219      	tst	r1, r3
 800374e:	d006      	beq.n	800375e <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fbe6 	bl	8001f20 <HAL_GetTick>
 8003754:	1b40      	subs	r0, r0, r5
 8003756:	2802      	cmp	r0, #2
 8003758:	d9e7      	bls.n	800372a <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 800375a:	2003      	movs	r0, #3
 800375c:	e057      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375e:	491c      	ldr	r1, [pc, #112]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 8003760:	684b      	ldr	r3, [r1, #4]
 8003762:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003766:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003768:	6a20      	ldr	r0, [r4, #32]
 800376a:	4302      	orrs	r2, r0
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
 8003770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003774:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800378a:	f7fe fbc9 	bl	8001f20 <HAL_GetTick>
 800378e:	4604      	mov	r4, r0
 8003790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003794:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_OscConfig+0x5e0>)
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2201      	movs	r2, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	4219      	tst	r1, r3
 80037b4:	d106      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe fbb3 	bl	8001f20 <HAL_GetTick>
 80037ba:	1b00      	subs	r0, r0, r4
 80037bc:	2802      	cmp	r0, #2
 80037be:	d9e7      	bls.n	8003790 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 80037c0:	2003      	movs	r0, #3
 80037c2:	e024      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80037c4:	2000      	movs	r0, #0
 80037c6:	e022      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
 80037c8:	2000      	movs	r0, #0
 80037ca:	e020      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
 80037cc:	10908120 	.word	0x10908120
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d01a      	beq.n	8003812 <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_OscConfig+0x630>)
 80037de:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037e0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80037e4:	6a22      	ldr	r2, [r4, #32]
 80037e6:	4291      	cmp	r1, r2
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037ea:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d112      	bne.n	800381a <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 80037f4:	2000      	movs	r0, #0
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 80037f8:	2001      	movs	r0, #1
}
 80037fa:	4770      	bx	lr
        return HAL_ERROR;
 80037fc:	2001      	movs	r0, #1
 80037fe:	e006      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003800:	2001      	movs	r0, #1
 8003802:	e004      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8003804:	2003      	movs	r0, #3
 8003806:	e002      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8003808:	2003      	movs	r0, #3
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 800380c:	2000      	movs	r0, #0
}
 800380e:	b002      	add	sp, #8
 8003810:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003812:	2001      	movs	r0, #1
 8003814:	e7fb      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8003816:	2001      	movs	r0, #1
 8003818:	e7f9      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
 800381a:	2001      	movs	r0, #1
 800381c:	e7f7      	b.n	800380e <HAL_RCC_OscConfig+0x61e>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003826:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003828:	f003 020c 	and.w	r2, r3, #12
 800382c:	2a08      	cmp	r2, #8
 800382e:	d001      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003830:	4814      	ldr	r0, [pc, #80]	; (8003884 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003832:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003834:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8003838:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800383c:	fa92 f2a2 	rbit	r2, r2
 8003840:	fab2 f282 	clz	r2, r2
 8003844:	fa21 f202 	lsr.w	r2, r1, r2
 8003848:	490f      	ldr	r1, [pc, #60]	; (8003888 <HAL_RCC_GetSysClockFreq+0x64>)
 800384a:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <HAL_RCC_GetSysClockFreq+0x5c>)
 800384e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003850:	f002 020f 	and.w	r2, r2, #15
 8003854:	210f      	movs	r1, #15
 8003856:	fa91 f1a1 	rbit	r1, r1
 800385a:	fab1 f181 	clz	r1, r1
 800385e:	40ca      	lsrs	r2, r1
 8003860:	490a      	ldr	r1, [pc, #40]	; (800388c <HAL_RCC_GetSysClockFreq+0x68>)
 8003862:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003864:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003868:	d005      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetSysClockFreq+0x60>)
 800386c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003870:	fb03 f000 	mul.w	r0, r3, r0
 8003874:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003878:	fb03 f000 	mul.w	r0, r3, r0
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	007a1200 	.word	0x007a1200
 8003888:	08005fc8 	.word	0x08005fc8
 800388c:	08005fd8 	.word	0x08005fd8
 8003890:	003d0900 	.word	0x003d0900

08003894 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003894:	2800      	cmp	r0, #0
 8003896:	f000 80be 	beq.w	8003a16 <HAL_RCC_ClockConfig+0x182>
{
 800389a:	b570      	push	{r4, r5, r6, lr}
 800389c:	460d      	mov	r5, r1
 800389e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <HAL_RCC_ClockConfig+0x194>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	428b      	cmp	r3, r1
 80038aa:	d20b      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ac:	4a5e      	ldr	r2, [pc, #376]	; (8003a28 <HAL_RCC_ClockConfig+0x194>)
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	f023 0307 	bic.w	r3, r3, #7
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	428b      	cmp	r3, r1
 80038c0:	f040 80ab 	bne.w	8003a1a <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f013 0f02 	tst.w	r3, #2
 80038ca:	d006      	beq.n	80038da <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4a57      	ldr	r2, [pc, #348]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 80038ce:	6853      	ldr	r3, [r2, #4]
 80038d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d4:	68a1      	ldr	r1, [r4, #8]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	f013 0f01 	tst.w	r3, #1
 80038e0:	d05a      	beq.n	8003998 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d02d      	beq.n	8003944 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d040      	beq.n	800396e <HAL_RCC_ClockConfig+0xda>
 80038ec:	2202      	movs	r2, #2
 80038ee:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4a4e      	ldr	r2, [pc, #312]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 80038f4:	6810      	ldr	r0, [r2, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	fa92 f2a2 	rbit	r2, r2
 80038fc:	fab2 f282 	clz	r2, r2
 8003900:	f002 021f 	and.w	r2, r2, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f202 	lsl.w	r2, r1, r2
 800390a:	4210      	tst	r0, r2
 800390c:	f000 8087 	beq.w	8003a1e <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003910:	4946      	ldr	r1, [pc, #280]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 8003912:	684a      	ldr	r2, [r1, #4]
 8003914:	f022 0203 	bic.w	r2, r2, #3
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800391c:	f7fe fb00 	bl	8001f20 <HAL_GetTick>
 8003920:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b42      	ldr	r3, [pc, #264]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003930:	d032      	beq.n	8003998 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003932:	f7fe faf5 	bl	8001f20 <HAL_GetTick>
 8003936:	1b80      	subs	r0, r0, r6
 8003938:	f241 3388 	movw	r3, #5000	; 0x1388
 800393c:	4298      	cmp	r0, r3
 800393e:	d9f0      	bls.n	8003922 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003940:	2003      	movs	r0, #3
 8003942:	e067      	b.n	8003a14 <HAL_RCC_ClockConfig+0x180>
 8003944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003948:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394c:	4a37      	ldr	r2, [pc, #220]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 800394e:	6810      	ldr	r0, [r2, #0]
 8003950:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003954:	fa92 f2a2 	rbit	r2, r2
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	f002 021f 	and.w	r2, r2, #31
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	4202      	tst	r2, r0
 8003968:	d1d2      	bne.n	8003910 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 800396a:	2001      	movs	r0, #1
 800396c:	e052      	b.n	8003a14 <HAL_RCC_ClockConfig+0x180>
 800396e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003972:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 8003978:	6810      	ldr	r0, [r2, #0]
 800397a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	fab2 f282 	clz	r2, r2
 8003986:	f002 021f 	and.w	r2, r2, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f202 	lsl.w	r2, r1, r2
 8003990:	4210      	tst	r0, r2
 8003992:	d1bd      	bne.n	8003910 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
 8003996:	e03d      	b.n	8003a14 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <HAL_RCC_ClockConfig+0x194>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	d90a      	bls.n	80039ba <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a4:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x194>)
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	f023 0307 	bic.w	r3, r3, #7
 80039ac:	432b      	orrs	r3, r5
 80039ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	42ab      	cmp	r3, r5
 80039b8:	d133      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	f013 0f04 	tst.w	r3, #4
 80039c0:	d006      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 80039c4:	6853      	ldr	r3, [r2, #4]
 80039c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039ca:	68e1      	ldr	r1, [r4, #12]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f013 0f08 	tst.w	r3, #8
 80039d6:	d007      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 80039da:	6853      	ldr	r3, [r2, #4]
 80039dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80039e0:	6921      	ldr	r1, [r4, #16]
 80039e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80039e6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039e8:	f7ff ff1c 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_RCC_ClockConfig+0x198>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f4:	22f0      	movs	r2, #240	; 0xf0
 80039f6:	fa92 f2a2 	rbit	r2, r2
 80039fa:	fab2 f282 	clz	r2, r2
 80039fe:	40d3      	lsrs	r3, r2
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x19c>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	40d8      	lsrs	r0, r3
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_ClockConfig+0x1a0>)
 8003a08:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1a4>)
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f7fe fa43 	bl	8001e98 <HAL_InitTick>
  return HAL_OK;
 8003a12:	2000      	movs	r0, #0
}
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a16:	2001      	movs	r0, #1
}
 8003a18:	4770      	bx	lr
      return HAL_ERROR;
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	e7fa      	b.n	8003a14 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8003a1e:	2001      	movs	r0, #1
 8003a20:	e7f8      	b.n	8003a14 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1
 8003a24:	e7f6      	b.n	8003a14 <HAL_RCC_ClockConfig+0x180>
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08005fb0 	.word	0x08005fb0
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000008 	.word	0x20000008

08003a3c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003a3c:	4b01      	ldr	r3, [pc, #4]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x8>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a4a:	f7ff fff7 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a5a:	fa92 f2a2 	rbit	r2, r2
 8003a5e:	fab2 f282 	clz	r2, r2
 8003a62:	40d3      	lsrs	r3, r2
 8003a64:	4a02      	ldr	r2, [pc, #8]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003a68:	40d8      	lsrs	r0, r3
 8003a6a:	bd08      	pop	{r3, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08005fc0 	.word	0x08005fc0

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a76:	f7ff ffe1 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a82:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a86:	fa92 f2a2 	rbit	r2, r2
 8003a8a:	fab2 f282 	clz	r2, r2
 8003a8e:	40d3      	lsrs	r3, r2
 8003a90:	4a02      	ldr	r2, [pc, #8]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003a94:	40d8      	lsrs	r0, r3
 8003a96:	bd08      	pop	{r3, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08005fc0 	.word	0x08005fc0

08003aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aa6:	6803      	ldr	r3, [r0, #0]
 8003aa8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003aac:	d048      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b86      	ldr	r3, [pc, #536]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003ab6:	f040 80be 	bne.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b83      	ldr	r3, [pc, #524]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ac2:	61da      	str	r2, [r3, #28]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ace:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ad8:	f000 80af 	beq.w	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003adc:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ae4:	d022      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d01d      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af0:	4875      	ldr	r0, [pc, #468]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003af2:	6a01      	ldr	r1, [r0, #32]
 8003af4:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8003af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afc:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	4f72      	ldr	r7, [pc, #456]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b06:	443a      	add	r2, r7
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	f04f 0c01 	mov.w	ip, #1
 8003b0e:	f8c2 c000 	str.w	ip, [r2]
 8003b12:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	443b      	add	r3, r7
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b22:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b24:	f011 0f01 	tst.w	r1, #1
 8003b28:	f040 809c 	bne.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b2c:	4a66      	ldr	r2, [pc, #408]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b2e:	6a13      	ldr	r3, [r2, #32]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	6861      	ldr	r1, [r4, #4]
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b3a:	2d00      	cmp	r5, #0
 8003b3c:	f040 80b9 	bne.w	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	f013 0f01 	tst.w	r3, #1
 8003b46:	d006      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b48:	4a5f      	ldr	r2, [pc, #380]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b4c:	f023 0303 	bic.w	r3, r3, #3
 8003b50:	68a1      	ldr	r1, [r4, #8]
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	f013 0f20 	tst.w	r3, #32
 8003b5c:	d006      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b5e:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b62:	f023 0310 	bic.w	r3, r3, #16
 8003b66:	68e1      	ldr	r1, [r4, #12]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b72:	d006      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b74:	4a54      	ldr	r2, [pc, #336]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b76:	6853      	ldr	r3, [r2, #4]
 8003b78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b88:	d006      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b8a:	4a4f      	ldr	r2, [pc, #316]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b8e:	f023 0320 	bic.w	r3, r3, #32
 8003b92:	6921      	ldr	r1, [r4, #16]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003b9e:	d006      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba0:	4a49      	ldr	r2, [pc, #292]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ba2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba8:	6961      	ldr	r1, [r4, #20]
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bb4:	d006      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bb6:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003bb8:	6853      	ldr	r3, [r2, #4]
 8003bba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bbe:	69e1      	ldr	r1, [r4, #28]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bca:	d006      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003bcc:	4a3e      	ldr	r2, [pc, #248]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003bce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bd0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003bd4:	69a1      	ldr	r1, [r4, #24]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003be0:	d006      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003be2:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bea:	6a21      	ldr	r1, [r4, #32]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003bf6:	d006      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bf8:	4a33      	ldr	r2, [pc, #204]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003bfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003c0c:	d006      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c0e:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003c10:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003c22:	d04d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003c26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c32:	2000      	movs	r0, #0
 8003c34:	e045      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  FlagStatus       pwrclkchanged = RESET;
 8003c36:	2500      	movs	r5, #0
 8003c38:	e74a      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3a:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c44:	f7fe f96c 	bl	8001f20 <HAL_GetTick>
 8003c48:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c52:	f47f af43 	bne.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fe f963 	bl	8001f20 <HAL_GetTick>
 8003c5a:	1b80      	subs	r0, r0, r6
 8003c5c:	2864      	cmp	r0, #100	; 0x64
 8003c5e:	d9f4      	bls.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          return HAL_TIMEOUT;
 8003c60:	2003      	movs	r0, #3
 8003c62:	e02e      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        tickstart = HAL_GetTick();
 8003c64:	f7fe f95c 	bl	8001f20 <HAL_GetTick>
 8003c68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	e015      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003c6c:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003c6e:	6a19      	ldr	r1, [r3, #32]
 8003c70:	2302      	movs	r3, #2
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2201      	movs	r2, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	420b      	tst	r3, r1
 8003c86:	f47f af51 	bne.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fe f949 	bl	8001f20 <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c94:	4298      	cmp	r0, r3
 8003c96:	d811      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	fa93 f2a3 	rbit	r2, r3
 8003c9e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e2      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003cae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cb0:	e7de      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb2:	69d3      	ldr	r3, [r2, #28]
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	61d3      	str	r3, [r2, #28]
 8003cba:	e741      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8003cbc:	2003      	movs	r0, #3
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 8003cc0:	2000      	movs	r0, #0
}
 8003cc2:	b003      	add	sp, #12
 8003cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	10908100 	.word	0x10908100

08003cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	6a03      	ldr	r3, [r0, #32]
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ce8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	680c      	ldr	r4, [r1, #0]
 8003cee:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cf0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cf4:	688c      	ldr	r4, [r1, #8]
 8003cf6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf8:	4c19      	ldr	r4, [pc, #100]	; (8003d60 <TIM_OC1_SetConfig+0x8c>)
 8003cfa:	42a0      	cmp	r0, r4
 8003cfc:	d00b      	beq.n	8003d16 <TIM_OC1_SetConfig+0x42>
 8003cfe:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8003d02:	42a0      	cmp	r0, r4
 8003d04:	d007      	beq.n	8003d16 <TIM_OC1_SetConfig+0x42>
 8003d06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003d0a:	42a0      	cmp	r0, r4
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC1_SetConfig+0x42>
 8003d0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003d12:	42a0      	cmp	r0, r4
 8003d14:	d105      	bne.n	8003d22 <TIM_OC1_SetConfig+0x4e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d16:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d1a:	68cc      	ldr	r4, [r1, #12]
 8003d1c:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d22:	4c0f      	ldr	r4, [pc, #60]	; (8003d60 <TIM_OC1_SetConfig+0x8c>)
 8003d24:	42a0      	cmp	r0, r4
 8003d26:	d00b      	beq.n	8003d40 <TIM_OC1_SetConfig+0x6c>
 8003d28:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8003d2c:	42a0      	cmp	r0, r4
 8003d2e:	d007      	beq.n	8003d40 <TIM_OC1_SetConfig+0x6c>
 8003d30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003d34:	42a0      	cmp	r0, r4
 8003d36:	d003      	beq.n	8003d40 <TIM_OC1_SetConfig+0x6c>
 8003d38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003d3c:	42a0      	cmp	r0, r4
 8003d3e:	d107      	bne.n	8003d50 <TIM_OC1_SetConfig+0x7c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d40:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d44:	694c      	ldr	r4, [r1, #20]
 8003d46:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d4a:	698d      	ldr	r5, [r1, #24]
 8003d4c:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d52:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d54:	684a      	ldr	r2, [r1, #4]
 8003d56:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	6203      	str	r3, [r0, #32]
}
 8003d5a:	bc30      	pop	{r4, r5}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00

08003d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d66:	6a03      	ldr	r3, [r0, #32]
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d72:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	680d      	ldr	r5, [r1, #0]
 8003d7e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d84:	688d      	ldr	r5, [r1, #8]
 8003d86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	4d14      	ldr	r5, [pc, #80]	; (8003ddc <TIM_OC3_SetConfig+0x78>)
 8003d8c:	42a8      	cmp	r0, r5
 8003d8e:	d01d      	beq.n	8003dcc <TIM_OC3_SetConfig+0x68>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	4d12      	ldr	r5, [pc, #72]	; (8003ddc <TIM_OC3_SetConfig+0x78>)
 8003d92:	42a8      	cmp	r0, r5
 8003d94:	d00b      	beq.n	8003dae <TIM_OC3_SetConfig+0x4a>
 8003d96:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003d9a:	42a8      	cmp	r0, r5
 8003d9c:	d007      	beq.n	8003dae <TIM_OC3_SetConfig+0x4a>
 8003d9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003da2:	42a8      	cmp	r0, r5
 8003da4:	d003      	beq.n	8003dae <TIM_OC3_SetConfig+0x4a>
 8003da6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003daa:	42a8      	cmp	r0, r5
 8003dac:	d107      	bne.n	8003dbe <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dae:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db2:	694d      	ldr	r5, [r1, #20]
 8003db4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003db8:	698d      	ldr	r5, [r1, #24]
 8003dba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc2:	684a      	ldr	r2, [r1, #4]
 8003dc4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	6203      	str	r3, [r0, #32]
}
 8003dc8:	bc30      	pop	{r4, r5}
 8003dca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd0:	68cd      	ldr	r5, [r1, #12]
 8003dd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dda:	e7d9      	b.n	8003d90 <TIM_OC3_SetConfig+0x2c>
 8003ddc:	40012c00 	.word	0x40012c00

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003de2:	6a03      	ldr	r3, [r0, #32]
 8003de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dee:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	680d      	ldr	r5, [r1, #0]
 8003dfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e02:	688d      	ldr	r5, [r1, #8]
 8003e04:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	4d0d      	ldr	r5, [pc, #52]	; (8003e40 <TIM_OC4_SetConfig+0x60>)
 8003e0a:	42a8      	cmp	r0, r5
 8003e0c:	d00b      	beq.n	8003e26 <TIM_OC4_SetConfig+0x46>
 8003e0e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e12:	42a8      	cmp	r0, r5
 8003e14:	d007      	beq.n	8003e26 <TIM_OC4_SetConfig+0x46>
 8003e16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e1a:	42a8      	cmp	r0, r5
 8003e1c:	d003      	beq.n	8003e26 <TIM_OC4_SetConfig+0x46>
 8003e1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e22:	42a8      	cmp	r0, r5
 8003e24:	d104      	bne.n	8003e30 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e26:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e2a:	694d      	ldr	r5, [r1, #20]
 8003e2c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e30:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e32:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e34:	684b      	ldr	r3, [r1, #4]
 8003e36:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e38:	6202      	str	r2, [r0, #32]
}
 8003e3a:	bc30      	pop	{r4, r5}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00

08003e44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e46:	6a03      	ldr	r3, [r0, #32]
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e52:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	680d      	ldr	r5, [r1, #0]
 8003e5e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e64:	688d      	ldr	r5, [r1, #8]
 8003e66:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ea0 <TIM_OC5_SetConfig+0x5c>)
 8003e6c:	42a8      	cmp	r0, r5
 8003e6e:	d00b      	beq.n	8003e88 <TIM_OC5_SetConfig+0x44>
 8003e70:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e74:	42a8      	cmp	r0, r5
 8003e76:	d007      	beq.n	8003e88 <TIM_OC5_SetConfig+0x44>
 8003e78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e7c:	42a8      	cmp	r0, r5
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC5_SetConfig+0x44>
 8003e80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e84:	42a8      	cmp	r0, r5
 8003e86:	d104      	bne.n	8003e92 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e88:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e8c:	694d      	ldr	r5, [r1, #20]
 8003e8e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e94:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e96:	684a      	ldr	r2, [r1, #4]
 8003e98:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9a:	6203      	str	r3, [r0, #32]
}
 8003e9c:	bc30      	pop	{r4, r5}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00

08003ea4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ea6:	6a03      	ldr	r3, [r0, #32]
 8003ea8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eb2:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	680d      	ldr	r5, [r1, #0]
 8003ebe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ec2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ec6:	688d      	ldr	r5, [r1, #8]
 8003ec8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	4d0d      	ldr	r5, [pc, #52]	; (8003f04 <TIM_OC6_SetConfig+0x60>)
 8003ece:	42a8      	cmp	r0, r5
 8003ed0:	d00b      	beq.n	8003eea <TIM_OC6_SetConfig+0x46>
 8003ed2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003ed6:	42a8      	cmp	r0, r5
 8003ed8:	d007      	beq.n	8003eea <TIM_OC6_SetConfig+0x46>
 8003eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ede:	42a8      	cmp	r0, r5
 8003ee0:	d003      	beq.n	8003eea <TIM_OC6_SetConfig+0x46>
 8003ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ee6:	42a8      	cmp	r0, r5
 8003ee8:	d104      	bne.n	8003ef4 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003eea:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003eee:	694d      	ldr	r5, [r1, #20]
 8003ef0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ef6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ef8:	684b      	ldr	r3, [r1, #4]
 8003efa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	6202      	str	r2, [r0, #32]
}
 8003efe:	bc30      	pop	{r4, r5}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00

08003f08 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f08:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	6a04      	ldr	r4, [r0, #32]
 8003f0c:	f024 0410 	bic.w	r4, r4, #16
 8003f10:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f12:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f14:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f16:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003f1a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1e:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2a:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f2e:	0109      	lsls	r1, r1, #4
 8003f30:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8003f34:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f36:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f38:	6201      	str	r1, [r0, #32]
}
 8003f3a:	bc30      	pop	{r4, r5}
 8003f3c:	4770      	bx	lr

08003f3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f3e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f40:	6a04      	ldr	r4, [r0, #32]
 8003f42:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003f46:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f48:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003f4a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f4c:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003f50:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f54:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f60:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f64:	0209      	lsls	r1, r1, #8
 8003f66:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003f6a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f6c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003f6e:	6201      	str	r1, [r0, #32]
}
 8003f70:	bc30      	pop	{r4, r5}
 8003f72:	4770      	bx	lr

08003f74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f74:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f76:	6a04      	ldr	r4, [r0, #32]
 8003f78:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003f7c:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f7e:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003f80:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f82:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f86:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f8a:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f8e:	031b      	lsls	r3, r3, #12
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f96:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f9a:	0309      	lsls	r1, r1, #12
 8003f9c:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003fa0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fa2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003fa4:	6201      	str	r1, [r0, #32]
}
 8003fa6:	bc30      	pop	{r4, r5}
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d126      	bne.n	8004004 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fbc:	6802      	ldr	r2, [r0, #0]
 8003fbe:	68d3      	ldr	r3, [r2, #12]
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	4a11      	ldr	r2, [pc, #68]	; (8004010 <HAL_TIM_Base_Start_IT+0x64>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x3c>
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d009      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x3c>
 8003fd4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d005      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe8:	6899      	ldr	r1, [r3, #8]
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_TIM_Base_Start_IT+0x68>)
 8003fec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fee:	2a06      	cmp	r2, #6
 8003ff0:	d00a      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x5c>
 8003ff2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004000:	2000      	movs	r0, #0
 8004002:	4770      	bx	lr
    return HAL_ERROR;
 8004004:	2001      	movs	r0, #1
 8004006:	4770      	bx	lr
  return HAL_OK;
 8004008:	2000      	movs	r0, #0
 800400a:	4770      	bx	lr
 800400c:	2000      	movs	r0, #0
}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	00010007 	.word	0x00010007

08004018 <HAL_TIM_PeriodElapsedCallback>:
}
 8004018:	4770      	bx	lr

0800401a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_IC_CaptureCallback>:
}
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800401e:	4770      	bx	lr

08004020 <HAL_TIM_TriggerCallback>:
}
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_IRQHandler>:
{
 8004022:	b510      	push	{r4, lr}
 8004024:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004026:	6803      	ldr	r3, [r0, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	f012 0f02 	tst.w	r2, #2
 800402e:	d011      	beq.n	8004054 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	f012 0f02 	tst.w	r2, #2
 8004036:	d00d      	beq.n	8004054 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004038:	f06f 0202 	mvn.w	r2, #2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	2301      	movs	r3, #1
 8004040:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004042:	6803      	ldr	r3, [r0, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f013 0f03 	tst.w	r3, #3
 800404a:	d079      	beq.n	8004140 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800404c:	f7ff ffe6 	bl	800401c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004050:	2300      	movs	r3, #0
 8004052:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	f012 0f04 	tst.w	r2, #4
 800405c:	d012      	beq.n	8004084 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	f012 0f04 	tst.w	r2, #4
 8004064:	d00e      	beq.n	8004084 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004066:	f06f 0204 	mvn.w	r2, #4
 800406a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406c:	2302      	movs	r3, #2
 800406e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004078:	d068      	beq.n	800414c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff ffce 	bl	800401c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004080:	2300      	movs	r3, #0
 8004082:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	f012 0f08 	tst.w	r2, #8
 800408c:	d012      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	f012 0f08 	tst.w	r2, #8
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004096:	f06f 0208 	mvn.w	r2, #8
 800409a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409c:	2304      	movs	r3, #4
 800409e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f013 0f03 	tst.w	r3, #3
 80040a8:	d057      	beq.n	800415a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7ff ffb6 	bl	800401c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b0:	2300      	movs	r3, #0
 80040b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	f012 0f10 	tst.w	r2, #16
 80040bc:	d012      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	f012 0f10 	tst.w	r2, #16
 80040c4:	d00e      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c6:	f06f 0210 	mvn.w	r2, #16
 80040ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040cc:	2308      	movs	r3, #8
 80040ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80040d8:	d046      	beq.n	8004168 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	4620      	mov	r0, r4
 80040dc:	f7ff ff9e 	bl	800401c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e0:	2300      	movs	r3, #0
 80040e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	f012 0f01 	tst.w	r2, #1
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	f012 0f01 	tst.w	r2, #1
 80040f4:	d13f      	bne.n	8004176 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040fe:	d003      	beq.n	8004108 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004106:	d13d      	bne.n	8004184 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004118:	d13b      	bne.n	8004192 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004122:	d003      	beq.n	800412c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	f012 0f40 	tst.w	r2, #64	; 0x40
 800412a:	d139      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	f012 0f20 	tst.w	r2, #32
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	f012 0f20 	tst.w	r2, #32
 800413c:	d137      	bne.n	80041ae <HAL_TIM_IRQHandler+0x18c>
}
 800413e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	f7ff ff6b 	bl	800401a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	4620      	mov	r0, r4
 8004146:	f7ff ff6a 	bl	800401e <HAL_TIM_PWM_PulseFinishedCallback>
 800414a:	e781      	b.n	8004050 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414c:	4620      	mov	r0, r4
 800414e:	f7ff ff64 	bl	800401a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff ff63 	bl	800401e <HAL_TIM_PWM_PulseFinishedCallback>
 8004158:	e792      	b.n	8004080 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	4620      	mov	r0, r4
 800415c:	f7ff ff5d 	bl	800401a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	4620      	mov	r0, r4
 8004162:	f7ff ff5c 	bl	800401e <HAL_TIM_PWM_PulseFinishedCallback>
 8004166:	e7a3      	b.n	80040b0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004168:	4620      	mov	r0, r4
 800416a:	f7ff ff56 	bl	800401a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416e:	4620      	mov	r0, r4
 8004170:	f7ff ff55 	bl	800401e <HAL_TIM_PWM_PulseFinishedCallback>
 8004174:	e7b4      	b.n	80040e0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004176:	f06f 0201 	mvn.w	r2, #1
 800417a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff ff4b 	bl	8004018 <HAL_TIM_PeriodElapsedCallback>
 8004182:	e7b8      	b.n	80040f6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004188:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800418a:	4620      	mov	r0, r4
 800418c:	f000 fcbd 	bl	8004b0a <HAL_TIMEx_BreakCallback>
 8004190:	e7ba      	b.n	8004108 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004196:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004198:	4620      	mov	r0, r4
 800419a:	f000 fcb7 	bl	8004b0c <HAL_TIMEx_Break2Callback>
 800419e:	e7bc      	b.n	800411a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff ff3a 	bl	8004020 <HAL_TIM_TriggerCallback>
 80041ac:	e7be      	b.n	800412c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ae:	f06f 0220 	mvn.w	r2, #32
 80041b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80041b4:	4620      	mov	r0, r4
 80041b6:	f000 fca7 	bl	8004b08 <HAL_TIMEx_CommutCallback>
}
 80041ba:	e7c0      	b.n	800413e <HAL_TIM_IRQHandler+0x11c>

080041bc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80041bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041be:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <TIM_Base_SetConfig+0x7c>)
 80041c0:	4290      	cmp	r0, r2
 80041c2:	d002      	beq.n	80041ca <TIM_Base_SetConfig+0xe>
 80041c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041c8:	d103      	bne.n	80041d2 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041ce:	684a      	ldr	r2, [r1, #4]
 80041d0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d2:	4a19      	ldr	r2, [pc, #100]	; (8004238 <TIM_Base_SetConfig+0x7c>)
 80041d4:	4290      	cmp	r0, r2
 80041d6:	d00e      	beq.n	80041f6 <TIM_Base_SetConfig+0x3a>
 80041d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0x3a>
 80041de:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80041e2:	4290      	cmp	r0, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0x3a>
 80041e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ea:	4290      	cmp	r0, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0x3a>
 80041ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041f2:	4290      	cmp	r0, r2
 80041f4:	d103      	bne.n	80041fe <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fa:	68ca      	ldr	r2, [r1, #12]
 80041fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004202:	694a      	ldr	r2, [r1, #20]
 8004204:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004206:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	688b      	ldr	r3, [r1, #8]
 800420a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800420c:	680b      	ldr	r3, [r1, #0]
 800420e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <TIM_Base_SetConfig+0x7c>)
 8004212:	4298      	cmp	r0, r3
 8004214:	d00b      	beq.n	800422e <TIM_Base_SetConfig+0x72>
 8004216:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800421a:	4298      	cmp	r0, r3
 800421c:	d007      	beq.n	800422e <TIM_Base_SetConfig+0x72>
 800421e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004222:	4298      	cmp	r0, r3
 8004224:	d003      	beq.n	800422e <TIM_Base_SetConfig+0x72>
 8004226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422a:	4298      	cmp	r0, r3
 800422c:	d101      	bne.n	8004232 <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004232:	2301      	movs	r3, #1
 8004234:	6143      	str	r3, [r0, #20]
}
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00

0800423c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800423c:	b360      	cbz	r0, 8004298 <HAL_TIM_Base_Init+0x5c>
{
 800423e:	b510      	push	{r4, lr}
 8004240:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004246:	b313      	cbz	r3, 800428e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	2302      	movs	r3, #2
 800424a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424e:	4621      	mov	r1, r4
 8004250:	f851 0b04 	ldr.w	r0, [r1], #4
 8004254:	f7ff ffb2 	bl	80041bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	2301      	movs	r3, #1
 800425a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004262:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004266:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800426a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800426e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800427a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004282:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800428a:	2000      	movs	r0, #0
}
 800428c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800428e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004292:	f7fd fceb 	bl	8001c6c <HAL_TIM_Base_MspInit>
 8004296:	e7d7      	b.n	8004248 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004298:	2001      	movs	r0, #1
}
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800429c:	b360      	cbz	r0, 80042f8 <HAL_TIM_PWM_Init+0x5c>
{
 800429e:	b510      	push	{r4, lr}
 80042a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042a6:	b313      	cbz	r3, 80042ee <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	2302      	movs	r3, #2
 80042aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ae:	4621      	mov	r1, r4
 80042b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80042b4:	f7ff ff82 	bl	80041bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80042c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80042c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80042ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80042ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80042da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80042e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80042e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80042ea:	2000      	movs	r0, #0
}
 80042ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80042ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80042f2:	f7fd fc5f 	bl	8001bb4 <HAL_TIM_PWM_MspInit>
 80042f6:	e7d7      	b.n	80042a8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80042f8:	2001      	movs	r0, #1
}
 80042fa:	4770      	bx	lr

080042fc <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80042fc:	b360      	cbz	r0, 8004358 <HAL_TIM_IC_Init+0x5c>
{
 80042fe:	b510      	push	{r4, lr}
 8004300:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004302:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004306:	b313      	cbz	r3, 800434e <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	2302      	movs	r3, #2
 800430a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430e:	4621      	mov	r1, r4
 8004310:	f851 0b04 	ldr.w	r0, [r1], #4
 8004314:	f7ff ff52 	bl	80041bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	2301      	movs	r3, #1
 800431a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004322:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004326:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800432a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800432e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800433a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004342:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004346:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800434a:	2000      	movs	r0, #0
}
 800434c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800434e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004352:	f7fd fc45 	bl	8001be0 <HAL_TIM_IC_MspInit>
 8004356:	e7d7      	b.n	8004308 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8004358:	2001      	movs	r0, #1
}
 800435a:	4770      	bx	lr

0800435c <TIM_OC2_SetConfig>:
{
 800435c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435e:	6a03      	ldr	r3, [r0, #32]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004366:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004368:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800436a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800436c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004370:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	680d      	ldr	r5, [r1, #0]
 8004376:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800437a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800437e:	688d      	ldr	r5, [r1, #8]
 8004380:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004384:	4d14      	ldr	r5, [pc, #80]	; (80043d8 <TIM_OC2_SetConfig+0x7c>)
 8004386:	42a8      	cmp	r0, r5
 8004388:	d01d      	beq.n	80043c6 <TIM_OC2_SetConfig+0x6a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	4d13      	ldr	r5, [pc, #76]	; (80043d8 <TIM_OC2_SetConfig+0x7c>)
 800438c:	42a8      	cmp	r0, r5
 800438e:	d00b      	beq.n	80043a8 <TIM_OC2_SetConfig+0x4c>
 8004390:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004394:	42a8      	cmp	r0, r5
 8004396:	d007      	beq.n	80043a8 <TIM_OC2_SetConfig+0x4c>
 8004398:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800439c:	42a8      	cmp	r0, r5
 800439e:	d003      	beq.n	80043a8 <TIM_OC2_SetConfig+0x4c>
 80043a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043a4:	42a8      	cmp	r0, r5
 80043a6:	d107      	bne.n	80043b8 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043ac:	694d      	ldr	r5, [r1, #20]
 80043ae:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b2:	698d      	ldr	r5, [r1, #24]
 80043b4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80043b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043ba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80043bc:	684a      	ldr	r2, [r1, #4]
 80043be:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80043c0:	6203      	str	r3, [r0, #32]
}
 80043c2:	bc30      	pop	{r4, r5}
 80043c4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043ca:	68cd      	ldr	r5, [r1, #12]
 80043cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80043d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d4:	e7d9      	b.n	800438a <TIM_OC2_SetConfig+0x2e>
 80043d6:	bf00      	nop
 80043d8:	40012c00 	.word	0x40012c00

080043dc <HAL_TIM_PWM_ConfigChannel>:
{
 80043dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80043de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	f000 8095 	beq.w	8004512 <HAL_TIM_PWM_ConfigChannel+0x136>
 80043e8:	4604      	mov	r4, r0
 80043ea:	460d      	mov	r5, r1
 80043ec:	2301      	movs	r3, #1
 80043ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80043f2:	2a14      	cmp	r2, #20
 80043f4:	f200 8088 	bhi.w	8004508 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80043f8:	e8df f002 	tbb	[pc, r2]
 80043fc:	8686860b 	.word	0x8686860b
 8004400:	8686861f 	.word	0x8686861f
 8004404:	86868634 	.word	0x86868634
 8004408:	86868648 	.word	0x86868648
 800440c:	8686865d 	.word	0x8686865d
 8004410:	71          	.byte	0x71
 8004411:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004412:	6800      	ldr	r0, [r0, #0]
 8004414:	f7ff fc5e 	bl	8003cd4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004418:	6822      	ldr	r2, [r4, #0]
 800441a:	6993      	ldr	r3, [r2, #24]
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	6993      	ldr	r3, [r2, #24]
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	6993      	ldr	r3, [r2, #24]
 8004430:	6929      	ldr	r1, [r5, #16]
 8004432:	430b      	orrs	r3, r1
 8004434:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2000      	movs	r0, #0
      break;
 8004438:	e067      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	f7ff ff8e 	bl	800435c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	6993      	ldr	r3, [r2, #24]
 8004444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004448:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	6993      	ldr	r3, [r2, #24]
 800444e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004452:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	6993      	ldr	r3, [r2, #24]
 8004458:	6929      	ldr	r1, [r5, #16]
 800445a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800445e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2000      	movs	r0, #0
      break;
 8004462:	e052      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004464:	6800      	ldr	r0, [r0, #0]
 8004466:	f7ff fc7d 	bl	8003d64 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	69d3      	ldr	r3, [r2, #28]
 800446e:	f043 0308 	orr.w	r3, r3, #8
 8004472:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	69d3      	ldr	r3, [r2, #28]
 8004478:	f023 0304 	bic.w	r3, r3, #4
 800447c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	69d3      	ldr	r3, [r2, #28]
 8004482:	6929      	ldr	r1, [r5, #16]
 8004484:	430b      	orrs	r3, r1
 8004486:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2000      	movs	r0, #0
      break;
 800448a:	e03e      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f7ff fca7 	bl	8003de0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	69d3      	ldr	r3, [r2, #28]
 8004496:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800449a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	69d3      	ldr	r3, [r2, #28]
 80044a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	69d3      	ldr	r3, [r2, #28]
 80044aa:	6929      	ldr	r1, [r5, #16]
 80044ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044b0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2000      	movs	r0, #0
      break;
 80044b4:	e029      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044b6:	6800      	ldr	r0, [r0, #0]
 80044b8:	f7ff fcc4 	bl	8003e44 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044c0:	f043 0308 	orr.w	r3, r3, #8
 80044c4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044ca:	f023 0304 	bic.w	r3, r3, #4
 80044ce:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044d4:	6929      	ldr	r1, [r5, #16]
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2000      	movs	r0, #0
      break;
 80044dc:	e015      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044de:	6800      	ldr	r0, [r0, #0]
 80044e0:	f7ff fce0 	bl	8003ea4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ec:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80044fc:	6929      	ldr	r1, [r5, #16]
 80044fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004502:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2000      	movs	r0, #0
      break;
 8004506:	e000      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004508:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800450a:	2300      	movs	r3, #0
 800450c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004510:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004512:	2002      	movs	r0, #2
 8004514:	e7fc      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

08004518 <TIM_TI1_SetConfig>:
{
 8004518:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	6a04      	ldr	r4, [r0, #32]
 800451c:	f024 0401 	bic.w	r4, r4, #1
 8004520:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004522:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004524:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004526:	4e0f      	ldr	r6, [pc, #60]	; (8004564 <TIM_TI1_SetConfig+0x4c>)
 8004528:	42b0      	cmp	r0, r6
 800452a:	d009      	beq.n	8004540 <TIM_TI1_SetConfig+0x28>
 800452c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004530:	d006      	beq.n	8004540 <TIM_TI1_SetConfig+0x28>
 8004532:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004536:	42b0      	cmp	r0, r6
 8004538:	d002      	beq.n	8004540 <TIM_TI1_SetConfig+0x28>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800453a:	f044 0201 	orr.w	r2, r4, #1
 800453e:	e002      	b.n	8004546 <TIM_TI1_SetConfig+0x2e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004540:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004544:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004546:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004550:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004554:	f001 010a 	and.w	r1, r1, #10
 8004558:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800455a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800455c:	6201      	str	r1, [r0, #32]
}
 800455e:	bc70      	pop	{r4, r5, r6}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00

08004568 <HAL_TIM_IC_ConfigChannel>:
{
 8004568:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800456a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d05a      	beq.n	8004628 <HAL_TIM_IC_ConfigChannel+0xc0>
 8004572:	4604      	mov	r4, r0
 8004574:	460d      	mov	r5, r1
 8004576:	2301      	movs	r3, #1
 8004578:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800457c:	b152      	cbz	r2, 8004594 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800457e:	2a04      	cmp	r2, #4
 8004580:	d01a      	beq.n	80045b8 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8004582:	2a08      	cmp	r2, #8
 8004584:	d02b      	beq.n	80045de <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8004586:	2a0c      	cmp	r2, #12
 8004588:	d03b      	beq.n	8004602 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800458a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800458c:	2300      	movs	r3, #0
 800458e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004592:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004594:	68cb      	ldr	r3, [r1, #12]
 8004596:	684a      	ldr	r2, [r1, #4]
 8004598:	6809      	ldr	r1, [r1, #0]
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	f7ff ffbc 	bl	8004518 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045a0:	6822      	ldr	r2, [r4, #0]
 80045a2:	6993      	ldr	r3, [r2, #24]
 80045a4:	f023 030c 	bic.w	r3, r3, #12
 80045a8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	6993      	ldr	r3, [r2, #24]
 80045ae:	68a9      	ldr	r1, [r5, #8]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2000      	movs	r0, #0
 80045b6:	e7e9      	b.n	800458c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80045b8:	68cb      	ldr	r3, [r1, #12]
 80045ba:	684a      	ldr	r2, [r1, #4]
 80045bc:	6809      	ldr	r1, [r1, #0]
 80045be:	6800      	ldr	r0, [r0, #0]
 80045c0:	f7ff fca2 	bl	8003f08 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	6993      	ldr	r3, [r2, #24]
 80045c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045cc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	6993      	ldr	r3, [r2, #24]
 80045d2:	68a9      	ldr	r1, [r5, #8]
 80045d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045d8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2000      	movs	r0, #0
 80045dc:	e7d6      	b.n	800458c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80045de:	68cb      	ldr	r3, [r1, #12]
 80045e0:	684a      	ldr	r2, [r1, #4]
 80045e2:	6809      	ldr	r1, [r1, #0]
 80045e4:	6800      	ldr	r0, [r0, #0]
 80045e6:	f7ff fcaa 	bl	8003f3e <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	69d3      	ldr	r3, [r2, #28]
 80045ee:	f023 030c 	bic.w	r3, r3, #12
 80045f2:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045f4:	6822      	ldr	r2, [r4, #0]
 80045f6:	69d3      	ldr	r3, [r2, #28]
 80045f8:	68a9      	ldr	r1, [r5, #8]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2000      	movs	r0, #0
 8004600:	e7c4      	b.n	800458c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004602:	68cb      	ldr	r3, [r1, #12]
 8004604:	684a      	ldr	r2, [r1, #4]
 8004606:	6809      	ldr	r1, [r1, #0]
 8004608:	6800      	ldr	r0, [r0, #0]
 800460a:	f7ff fcb3 	bl	8003f74 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	69d3      	ldr	r3, [r2, #28]
 8004612:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004616:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	69d3      	ldr	r3, [r2, #28]
 800461c:	68a9      	ldr	r1, [r5, #8]
 800461e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004622:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2000      	movs	r0, #0
 8004626:	e7b1      	b.n	800458c <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8004628:	2002      	movs	r0, #2
 800462a:	e7b2      	b.n	8004592 <HAL_TIM_IC_ConfigChannel+0x2a>

0800462c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800462c:	f001 011f 	and.w	r1, r1, #31
 8004630:	2301      	movs	r3, #1
 8004632:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004636:	6a03      	ldr	r3, [r0, #32]
 8004638:	ea23 030c 	bic.w	r3, r3, ip
 800463c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463e:	6a03      	ldr	r3, [r0, #32]
 8004640:	fa02 f101 	lsl.w	r1, r2, r1
 8004644:	430b      	orrs	r3, r1
 8004646:	6203      	str	r3, [r0, #32]
}
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIM_PWM_Start>:
{
 800464c:	b510      	push	{r4, lr}
 800464e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004650:	4608      	mov	r0, r1
 8004652:	2900      	cmp	r1, #0
 8004654:	d137      	bne.n	80046c6 <HAL_TIM_PWM_Start+0x7a>
 8004656:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	bf18      	it	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 8084 	bne.w	8004770 <HAL_TIM_PWM_Start+0x124>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004668:	2800      	cmp	r0, #0
 800466a:	d157      	bne.n	800471c <HAL_TIM_PWM_Start+0xd0>
 800466c:	2302      	movs	r3, #2
 800466e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004672:	2201      	movs	r2, #1
 8004674:	4601      	mov	r1, r0
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	f7ff ffd8 	bl	800462c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	4a3f      	ldr	r2, [pc, #252]	; (800477c <HAL_TIM_PWM_Start+0x130>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <HAL_TIM_PWM_Start+0x50>
 8004684:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <HAL_TIM_PWM_Start+0x50>
 800468c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <HAL_TIM_PWM_Start+0x50>
 8004694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004698:	4293      	cmp	r3, r2
 800469a:	d103      	bne.n	80046a4 <HAL_TIM_PWM_Start+0x58>
    __HAL_TIM_MOE_ENABLE(htim);
 800469c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	4a35      	ldr	r2, [pc, #212]	; (800477c <HAL_TIM_PWM_Start+0x130>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d053      	beq.n	8004754 <HAL_TIM_PWM_Start+0x108>
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d050      	beq.n	8004754 <HAL_TIM_PWM_Start+0x108>
 80046b2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d04c      	beq.n	8004754 <HAL_TIM_PWM_Start+0x108>
    __HAL_TIM_ENABLE(htim);
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80046c2:	2000      	movs	r0, #0
 80046c4:	e055      	b.n	8004772 <HAL_TIM_PWM_Start+0x126>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046c6:	2904      	cmp	r1, #4
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_PWM_Start+0x98>
 80046ca:	2908      	cmp	r1, #8
 80046cc:	d011      	beq.n	80046f2 <HAL_TIM_PWM_Start+0xa6>
 80046ce:	290c      	cmp	r1, #12
 80046d0:	d016      	beq.n	8004700 <HAL_TIM_PWM_Start+0xb4>
 80046d2:	2910      	cmp	r1, #16
 80046d4:	d01b      	beq.n	800470e <HAL_TIM_PWM_Start+0xc2>
 80046d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	bf18      	it	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	e7be      	b.n	8004662 <HAL_TIM_PWM_Start+0x16>
 80046e4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	bf18      	it	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	e7b7      	b.n	8004662 <HAL_TIM_PWM_Start+0x16>
 80046f2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	bf18      	it	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	e7b0      	b.n	8004662 <HAL_TIM_PWM_Start+0x16>
 8004700:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	bf18      	it	ne
 800470a:	2301      	movne	r3, #1
 800470c:	e7a9      	b.n	8004662 <HAL_TIM_PWM_Start+0x16>
 800470e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	bf18      	it	ne
 8004718:	2301      	movne	r3, #1
 800471a:	e7a2      	b.n	8004662 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	2804      	cmp	r0, #4
 800471e:	d009      	beq.n	8004734 <HAL_TIM_PWM_Start+0xe8>
 8004720:	2808      	cmp	r0, #8
 8004722:	d00b      	beq.n	800473c <HAL_TIM_PWM_Start+0xf0>
 8004724:	280c      	cmp	r0, #12
 8004726:	d00d      	beq.n	8004744 <HAL_TIM_PWM_Start+0xf8>
 8004728:	2810      	cmp	r0, #16
 800472a:	d00f      	beq.n	800474c <HAL_TIM_PWM_Start+0x100>
 800472c:	2302      	movs	r3, #2
 800472e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004732:	e79e      	b.n	8004672 <HAL_TIM_PWM_Start+0x26>
 8004734:	2302      	movs	r3, #2
 8004736:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800473a:	e79a      	b.n	8004672 <HAL_TIM_PWM_Start+0x26>
 800473c:	2302      	movs	r3, #2
 800473e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004742:	e796      	b.n	8004672 <HAL_TIM_PWM_Start+0x26>
 8004744:	2302      	movs	r3, #2
 8004746:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800474a:	e792      	b.n	8004672 <HAL_TIM_PWM_Start+0x26>
 800474c:	2302      	movs	r3, #2
 800474e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004752:	e78e      	b.n	8004672 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	6899      	ldr	r1, [r3, #8]
 8004756:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <HAL_TIM_PWM_Start+0x134>)
 8004758:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	2a06      	cmp	r2, #6
 800475c:	d00a      	beq.n	8004774 <HAL_TIM_PWM_Start+0x128>
 800475e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004762:	d009      	beq.n	8004778 <HAL_TIM_PWM_Start+0x12c>
      __HAL_TIM_ENABLE(htim);
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800476c:	2000      	movs	r0, #0
 800476e:	e000      	b.n	8004772 <HAL_TIM_PWM_Start+0x126>
    return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
}
 8004772:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004774:	2000      	movs	r0, #0
 8004776:	e7fc      	b.n	8004772 <HAL_TIM_PWM_Start+0x126>
 8004778:	2000      	movs	r0, #0
 800477a:	e7fa      	b.n	8004772 <HAL_TIM_PWM_Start+0x126>
 800477c:	40012c00 	.word	0x40012c00
 8004780:	00010007 	.word	0x00010007

08004784 <HAL_TIM_IC_Start_IT>:
{
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004788:	460b      	mov	r3, r1
 800478a:	bb19      	cbnz	r1, 80047d4 <HAL_TIM_IC_Start_IT+0x50>
 800478c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004790:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004792:	2b00      	cmp	r3, #0
 8004794:	d13a      	bne.n	800480c <HAL_TIM_IC_Start_IT+0x88>
 8004796:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800479a:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800479c:	2801      	cmp	r0, #1
 800479e:	f040 80ac 	bne.w	80048fa <HAL_TIM_IC_Start_IT+0x176>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a2:	2a01      	cmp	r2, #1
 80047a4:	f040 80aa 	bne.w	80048fc <HAL_TIM_IC_Start_IT+0x178>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d13f      	bne.n	800482c <HAL_TIM_IC_Start_IT+0xa8>
 80047ac:	2102      	movs	r1, #2
 80047ae:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d156      	bne.n	8004864 <HAL_TIM_IC_Start_IT+0xe0>
 80047b6:	2102      	movs	r1, #2
 80047b8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	f200 809e 	bhi.w	80048fe <HAL_TIM_IC_Start_IT+0x17a>
 80047c2:	e8df f003 	tbb	[pc, r3]
 80047c6:	9c5f      	.short	0x9c5f
 80047c8:	9c7a9c9c 	.word	0x9c7a9c9c
 80047cc:	9c809c9c 	.word	0x9c809c9c
 80047d0:	9c9c      	.short	0x9c9c
 80047d2:	86          	.byte	0x86
 80047d3:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047d4:	2904      	cmp	r1, #4
 80047d6:	d009      	beq.n	80047ec <HAL_TIM_IC_Start_IT+0x68>
 80047d8:	2908      	cmp	r1, #8
 80047da:	d00b      	beq.n	80047f4 <HAL_TIM_IC_Start_IT+0x70>
 80047dc:	290c      	cmp	r1, #12
 80047de:	d00d      	beq.n	80047fc <HAL_TIM_IC_Start_IT+0x78>
 80047e0:	2910      	cmp	r1, #16
 80047e2:	d00f      	beq.n	8004804 <HAL_TIM_IC_Start_IT+0x80>
 80047e4:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 80047e8:	b2c0      	uxtb	r0, r0
 80047ea:	e7d2      	b.n	8004792 <HAL_TIM_IC_Start_IT+0xe>
 80047ec:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 80047f0:	b2c0      	uxtb	r0, r0
 80047f2:	e7ce      	b.n	8004792 <HAL_TIM_IC_Start_IT+0xe>
 80047f4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80047f8:	b2c0      	uxtb	r0, r0
 80047fa:	e7ca      	b.n	8004792 <HAL_TIM_IC_Start_IT+0xe>
 80047fc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004800:	b2c0      	uxtb	r0, r0
 8004802:	e7c6      	b.n	8004792 <HAL_TIM_IC_Start_IT+0xe>
 8004804:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8004808:	b2c0      	uxtb	r0, r0
 800480a:	e7c2      	b.n	8004792 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800480c:	2b04      	cmp	r3, #4
 800480e:	d005      	beq.n	800481c <HAL_TIM_IC_Start_IT+0x98>
 8004810:	2b08      	cmp	r3, #8
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IC_Start_IT+0xa0>
 8004814:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	e7bf      	b.n	800479c <HAL_TIM_IC_Start_IT+0x18>
 800481c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	e7bb      	b.n	800479c <HAL_TIM_IC_Start_IT+0x18>
 8004824:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	e7b7      	b.n	800479c <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800482c:	2b04      	cmp	r3, #4
 800482e:	d009      	beq.n	8004844 <HAL_TIM_IC_Start_IT+0xc0>
 8004830:	2b08      	cmp	r3, #8
 8004832:	d00b      	beq.n	800484c <HAL_TIM_IC_Start_IT+0xc8>
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d00d      	beq.n	8004854 <HAL_TIM_IC_Start_IT+0xd0>
 8004838:	2b10      	cmp	r3, #16
 800483a:	d00f      	beq.n	800485c <HAL_TIM_IC_Start_IT+0xd8>
 800483c:	2102      	movs	r1, #2
 800483e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004842:	e7b6      	b.n	80047b2 <HAL_TIM_IC_Start_IT+0x2e>
 8004844:	2102      	movs	r1, #2
 8004846:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 800484a:	e7b2      	b.n	80047b2 <HAL_TIM_IC_Start_IT+0x2e>
 800484c:	2102      	movs	r1, #2
 800484e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8004852:	e7ae      	b.n	80047b2 <HAL_TIM_IC_Start_IT+0x2e>
 8004854:	2102      	movs	r1, #2
 8004856:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800485a:	e7aa      	b.n	80047b2 <HAL_TIM_IC_Start_IT+0x2e>
 800485c:	2102      	movs	r1, #2
 800485e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004862:	e7a6      	b.n	80047b2 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004864:	2b04      	cmp	r3, #4
 8004866:	d005      	beq.n	8004874 <HAL_TIM_IC_Start_IT+0xf0>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d007      	beq.n	800487c <HAL_TIM_IC_Start_IT+0xf8>
 800486c:	2102      	movs	r1, #2
 800486e:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 8004872:	e7a3      	b.n	80047bc <HAL_TIM_IC_Start_IT+0x38>
 8004874:	2102      	movs	r1, #2
 8004876:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800487a:	e79f      	b.n	80047bc <HAL_TIM_IC_Start_IT+0x38>
 800487c:	2102      	movs	r1, #2
 800487e:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 8004882:	e79b      	b.n	80047bc <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	68ca      	ldr	r2, [r1, #12]
 8004888:	f042 0202 	orr.w	r2, r2, #2
 800488c:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800488e:	2201      	movs	r2, #1
 8004890:	4619      	mov	r1, r3
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	f7ff feca 	bl	800462c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	4a1c      	ldr	r2, [pc, #112]	; (800490c <HAL_TIM_IC_Start_IT+0x188>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01e      	beq.n	80048de <HAL_TIM_IC_Start_IT+0x15a>
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d01b      	beq.n	80048de <HAL_TIM_IC_Start_IT+0x15a>
 80048a6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d017      	beq.n	80048de <HAL_TIM_IC_Start_IT+0x15a>
      __HAL_TIM_ENABLE(htim);
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	2000      	movs	r0, #0
 80048b8:	e020      	b.n	80048fc <HAL_TIM_IC_Start_IT+0x178>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ba:	6821      	ldr	r1, [r4, #0]
 80048bc:	68ca      	ldr	r2, [r1, #12]
 80048be:	f042 0204 	orr.w	r2, r2, #4
 80048c2:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80048c4:	e7e3      	b.n	800488e <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048c6:	6821      	ldr	r1, [r4, #0]
 80048c8:	68ca      	ldr	r2, [r1, #12]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80048d0:	e7dd      	b.n	800488e <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048d2:	6821      	ldr	r1, [r4, #0]
 80048d4:	68ca      	ldr	r2, [r1, #12]
 80048d6:	f042 0210 	orr.w	r2, r2, #16
 80048da:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80048dc:	e7d7      	b.n	800488e <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	4a0b      	ldr	r2, [pc, #44]	; (8004910 <HAL_TIM_IC_Start_IT+0x18c>)
 80048e2:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	2a06      	cmp	r2, #6
 80048e6:	d00c      	beq.n	8004902 <HAL_TIM_IC_Start_IT+0x17e>
 80048e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80048ec:	d00b      	beq.n	8004906 <HAL_TIM_IC_Start_IT+0x182>
        __HAL_TIM_ENABLE(htim);
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	2000      	movs	r0, #0
 80048f8:	e000      	b.n	80048fc <HAL_TIM_IC_Start_IT+0x178>
    return HAL_ERROR;
 80048fa:	2001      	movs	r0, #1
}
 80048fc:	bd10      	pop	{r4, pc}
  switch (Channel)
 80048fe:	4610      	mov	r0, r2
 8004900:	e7fc      	b.n	80048fc <HAL_TIM_IC_Start_IT+0x178>
 8004902:	2000      	movs	r0, #0
 8004904:	e7fa      	b.n	80048fc <HAL_TIM_IC_Start_IT+0x178>
 8004906:	2000      	movs	r0, #0
 8004908:	e7f8      	b.n	80048fc <HAL_TIM_IC_Start_IT+0x178>
 800490a:	bf00      	nop
 800490c:	40012c00 	.word	0x40012c00
 8004910:	00010007 	.word	0x00010007

08004914 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004914:	f001 011f 	and.w	r1, r1, #31
 8004918:	2304      	movs	r3, #4
 800491a:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800491e:	6a03      	ldr	r3, [r0, #32]
 8004920:	ea23 030c 	bic.w	r3, r3, ip
 8004924:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004926:	6a03      	ldr	r3, [r0, #32]
 8004928:	fa02 f101 	lsl.w	r1, r2, r1
 800492c:	430b      	orrs	r3, r1
 800492e:	6203      	str	r3, [r0, #32]
}
 8004930:	4770      	bx	lr
	...

08004934 <HAL_TIMEx_PWMN_Start>:
{
 8004934:	b510      	push	{r4, lr}
 8004936:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004938:	4608      	mov	r0, r1
 800493a:	bb39      	cbnz	r1, 800498c <HAL_TIMEx_PWMN_Start+0x58>
 800493c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	bf18      	it	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d156      	bne.n	80049fa <HAL_TIMEx_PWMN_Start+0xc6>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800494c:	2800      	cmp	r0, #0
 800494e:	d136      	bne.n	80049be <HAL_TIMEx_PWMN_Start+0x8a>
 8004950:	2302      	movs	r3, #2
 8004952:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004956:	2204      	movs	r2, #4
 8004958:	4601      	mov	r1, r0
 800495a:	6820      	ldr	r0, [r4, #0]
 800495c:	f7ff ffda 	bl	8004914 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004960:	6822      	ldr	r2, [r4, #0]
 8004962:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_TIMEx_PWMN_Start+0xd4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d035      	beq.n	80049de <HAL_TIMEx_PWMN_Start+0xaa>
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d032      	beq.n	80049de <HAL_TIMEx_PWMN_Start+0xaa>
 8004978:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800497c:	4293      	cmp	r3, r2
 800497e:	d02e      	beq.n	80049de <HAL_TIMEx_PWMN_Start+0xaa>
    __HAL_TIM_ENABLE(htim);
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004988:	2000      	movs	r0, #0
 800498a:	e037      	b.n	80049fc <HAL_TIMEx_PWMN_Start+0xc8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498c:	2904      	cmp	r1, #4
 800498e:	d008      	beq.n	80049a2 <HAL_TIMEx_PWMN_Start+0x6e>
 8004990:	2908      	cmp	r1, #8
 8004992:	d00d      	beq.n	80049b0 <HAL_TIMEx_PWMN_Start+0x7c>
 8004994:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	bf18      	it	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	e7d2      	b.n	8004948 <HAL_TIMEx_PWMN_Start+0x14>
 80049a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	bf18      	it	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	e7cb      	b.n	8004948 <HAL_TIMEx_PWMN_Start+0x14>
 80049b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	bf18      	it	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	e7c4      	b.n	8004948 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049be:	2804      	cmp	r0, #4
 80049c0:	d005      	beq.n	80049ce <HAL_TIMEx_PWMN_Start+0x9a>
 80049c2:	2808      	cmp	r0, #8
 80049c4:	d007      	beq.n	80049d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80049c6:	2302      	movs	r3, #2
 80049c8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80049cc:	e7c3      	b.n	8004956 <HAL_TIMEx_PWMN_Start+0x22>
 80049ce:	2302      	movs	r3, #2
 80049d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049d4:	e7bf      	b.n	8004956 <HAL_TIMEx_PWMN_Start+0x22>
 80049d6:	2302      	movs	r3, #2
 80049d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80049dc:	e7bb      	b.n	8004956 <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049de:	6899      	ldr	r1, [r3, #8]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_TIMEx_PWMN_Start+0xd8>)
 80049e2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	2a06      	cmp	r2, #6
 80049e6:	d00a      	beq.n	80049fe <HAL_TIMEx_PWMN_Start+0xca>
 80049e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80049ec:	d009      	beq.n	8004a02 <HAL_TIMEx_PWMN_Start+0xce>
      __HAL_TIM_ENABLE(htim);
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049f6:	2000      	movs	r0, #0
 80049f8:	e000      	b.n	80049fc <HAL_TIMEx_PWMN_Start+0xc8>
    return HAL_ERROR;
 80049fa:	2001      	movs	r0, #1
}
 80049fc:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80049fe:	2000      	movs	r0, #0
 8004a00:	e7fc      	b.n	80049fc <HAL_TIMEx_PWMN_Start+0xc8>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7fa      	b.n	80049fc <HAL_TIMEx_PWMN_Start+0xc8>
 8004a06:	bf00      	nop
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	00010007 	.word	0x00010007

08004a10 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004a10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d02f      	beq.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8004a18:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	2302      	movs	r3, #2
 8004a22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004a26:	6802      	ldr	r2, [r0, #0]
 8004a28:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004a2a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a2c:	4d13      	ldr	r5, [pc, #76]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004a2e:	42aa      	cmp	r2, r5
 8004a30:	d01d      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a36:	680d      	ldr	r5, [r1, #0]
 8004a38:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8004a3a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	6803      	ldr	r3, [r0, #0]
 8004a3e:	4a0f      	ldr	r2, [pc, #60]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d006      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d003      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004a4a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d104      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a52:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	688a      	ldr	r2, [r1, #8]
 8004a58:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8004a5a:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a62:	2300      	movs	r3, #0
 8004a64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004a68:	4618      	mov	r0, r3
}
 8004a6a:	bc30      	pop	{r4, r5}
 8004a6c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a72:	684d      	ldr	r5, [r1, #4]
 8004a74:	432b      	orrs	r3, r5
 8004a76:	e7dc      	b.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004a78:	2002      	movs	r0, #2
}
 8004a7a:	4770      	bx	lr
 8004a7c:	40012c00 	.word	0x40012c00

08004a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004a80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d03b      	beq.n	8004b00 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 8004a88:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a90:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a96:	688a      	ldr	r2, [r1, #8]
 8004a98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9e:	684a      	ldr	r2, [r1, #4]
 8004aa0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aa6:	680a      	ldr	r2, [r1, #0]
 8004aa8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aae:	690a      	ldr	r2, [r1, #16]
 8004ab0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab6:	694a      	ldr	r2, [r1, #20]
 8004ab8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004ac0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ac2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004ac6:	698a      	ldr	r2, [r1, #24]
 8004ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004acc:	6802      	ldr	r2, [r0, #0]
 8004ace:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8004ad0:	42a2      	cmp	r2, r4
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
  htim->Instance->BDTR = tmpbdtr;
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004adc:	4618      	mov	r0, r3
}
 8004ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae2:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ae4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ae8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004aea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af2:	69cc      	ldr	r4, [r1, #28]
 8004af4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004af6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004afa:	6a09      	ldr	r1, [r1, #32]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	e7e9      	b.n	8004ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8004b00:	2002      	movs	r0, #2
}
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00

08004b08 <HAL_TIMEx_CommutCallback>:
}
 8004b08:	4770      	bx	lr

08004b0a <HAL_TIMEx_BreakCallback>:
}
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_Break2Callback>:
}
 8004b0c:	4770      	bx	lr

08004b0e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	e852 3f00 	ldrex	r3, [r2]
 8004b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	e842 3100 	strex	r1, r3, [r2]
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d1f6      	bne.n	8004b0e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	f102 0308 	add.w	r3, r2, #8
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	3208      	adds	r2, #8
 8004b30:	e842 3100 	strex	r1, r3, [r2]
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d1f3      	bne.n	8004b20 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b38:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d006      	beq.n	8004b4c <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	2300      	movs	r3, #0
 8004b46:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b48:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004b4a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	e852 3f00 	ldrex	r3, [r2]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	e842 3100 	strex	r1, r3, [r2]
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d1f6      	bne.n	8004b4c <UART_EndRxTransfer+0x3e>
 8004b5e:	e7ee      	b.n	8004b3e <UART_EndRxTransfer+0x30>

08004b60 <UART_SetConfig>:
{
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b64:	6883      	ldr	r3, [r0, #8]
 8004b66:	6902      	ldr	r2, [r0, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	6942      	ldr	r2, [r0, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	69c2      	ldr	r2, [r0, #28]
 8004b70:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b72:	6801      	ldr	r1, [r0, #0]
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	4a4e      	ldr	r2, [pc, #312]	; (8004cb0 <UART_SetConfig+0x150>)
 8004b78:	4002      	ands	r2, r0
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	6853      	ldr	r3, [r2, #4]
 8004b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b86:	68e1      	ldr	r1, [r4, #12]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8c:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8004b8e:	6a23      	ldr	r3, [r4, #32]
 8004b90:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	688b      	ldr	r3, [r1, #8]
 8004b96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	4a44      	ldr	r2, [pc, #272]	; (8004cb4 <UART_SetConfig+0x154>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d014      	beq.n	8004bd0 <UART_SetConfig+0x70>
 8004ba6:	4a44      	ldr	r2, [pc, #272]	; (8004cb8 <UART_SetConfig+0x158>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d027      	beq.n	8004bfc <UART_SetConfig+0x9c>
 8004bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d01f      	beq.n	8004bf4 <UART_SetConfig+0x94>
 8004bb4:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb6:	69e0      	ldr	r0, [r4, #28]
 8004bb8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004bbc:	d020      	beq.n	8004c00 <UART_SetConfig+0xa0>
    switch (clocksource)
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d870      	bhi.n	8004ca4 <UART_SetConfig+0x144>
 8004bc2:	e8df f003 	tbb	[pc, r3]
 8004bc6:	604a      	.short	0x604a
 8004bc8:	6f636f48 	.word	0x6f636f48
 8004bcc:	6f6f      	.short	0x6f6f
 8004bce:	66          	.byte	0x66
 8004bcf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bd0:	4b3a      	ldr	r3, [pc, #232]	; (8004cbc <UART_SetConfig+0x15c>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d809      	bhi.n	8004bf0 <UART_SetConfig+0x90>
 8004bdc:	e8df f003 	tbb	[pc, r3]
 8004be0:	0c060402 	.word	0x0c060402
 8004be4:	2300      	movs	r3, #0
 8004be6:	e7e6      	b.n	8004bb6 <UART_SetConfig+0x56>
 8004be8:	2304      	movs	r3, #4
 8004bea:	e7e4      	b.n	8004bb6 <UART_SetConfig+0x56>
 8004bec:	2308      	movs	r3, #8
 8004bee:	e7e2      	b.n	8004bb6 <UART_SetConfig+0x56>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	e7e0      	b.n	8004bb6 <UART_SetConfig+0x56>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e7de      	b.n	8004bb6 <UART_SetConfig+0x56>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e7dc      	b.n	8004bb6 <UART_SetConfig+0x56>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e7da      	b.n	8004bb6 <UART_SetConfig+0x56>
    switch (clocksource)
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d849      	bhi.n	8004c98 <UART_SetConfig+0x138>
 8004c04:	e8df f003 	tbb	[pc, r3]
 8004c08:	48251f05 	.word	0x48251f05
 8004c0c:	48484822 	.word	0x48484822
 8004c10:	09          	.byte	0x09
 8004c11:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fe ff19 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d040      	beq.n	8004c9c <UART_SetConfig+0x13c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	0853      	lsrs	r3, r2, #1
 8004c1e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004c22:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c26:	f1a0 0210 	sub.w	r2, r0, #16
 8004c2a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d836      	bhi.n	8004ca0 <UART_SetConfig+0x140>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c32:	b283      	uxth	r3, r0
 8004c34:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c38:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004c3c:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	60d8      	str	r0, [r3, #12]
 8004c42:	2000      	movs	r0, #0
 8004c44:	e01b      	b.n	8004c7e <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c46:	f7fe ff15 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
        break;
 8004c4a:	e7e4      	b.n	8004c16 <UART_SetConfig+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4c:	f7fe fdea 	bl	8003824 <HAL_RCC_GetSysClockFreq>
        break;
 8004c50:	e7e1      	b.n	8004c16 <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 8004c52:	481b      	ldr	r0, [pc, #108]	; (8004cc0 <UART_SetConfig+0x160>)
 8004c54:	e7e1      	b.n	8004c1a <UART_SetConfig+0xba>
    switch (clocksource)
 8004c56:	481a      	ldr	r0, [pc, #104]	; (8004cc0 <UART_SetConfig+0x160>)
 8004c58:	e002      	b.n	8004c60 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5a:	f7fe fef5 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c5e:	b318      	cbz	r0, 8004ca8 <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004c66:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6a:	f1a0 0210 	sub.w	r2, r0, #16
 8004c6e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d81a      	bhi.n	8004cac <UART_SetConfig+0x14c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	b280      	uxth	r0, r0
 8004c7a:	60d8      	str	r0, [r3, #12]
 8004c7c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004c82:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004c84:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c86:	f7fe fef5 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
        break;
 8004c8a:	e7e8      	b.n	8004c5e <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8c:	f7fe fdca 	bl	8003824 <HAL_RCC_GetSysClockFreq>
        break;
 8004c90:	e7e5      	b.n	8004c5e <UART_SetConfig+0xfe>
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c96:	e7e3      	b.n	8004c60 <UART_SetConfig+0x100>
    switch (clocksource)
 8004c98:	2001      	movs	r0, #1
 8004c9a:	e7f0      	b.n	8004c7e <UART_SetConfig+0x11e>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e7ee      	b.n	8004c7e <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e7ec      	b.n	8004c7e <UART_SetConfig+0x11e>
    switch (clocksource)
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e7ea      	b.n	8004c7e <UART_SetConfig+0x11e>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e7e8      	b.n	8004c7e <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8004cac:	2001      	movs	r0, #1
 8004cae:	e7e6      	b.n	8004c7e <UART_SetConfig+0x11e>
 8004cb0:	efff69f3 	.word	0xefff69f3
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	40004400 	.word	0x40004400
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200

08004cc4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cc6:	f013 0f01 	tst.w	r3, #1
 8004cca:	d006      	beq.n	8004cda <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ccc:	6802      	ldr	r2, [r0, #0]
 8004cce:	6853      	ldr	r3, [r2, #4]
 8004cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cd4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cdc:	f013 0f02 	tst.w	r3, #2
 8004ce0:	d006      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce2:	6802      	ldr	r2, [r0, #0]
 8004ce4:	6853      	ldr	r3, [r2, #4]
 8004ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cf2:	f013 0f04 	tst.w	r3, #4
 8004cf6:	d006      	beq.n	8004d06 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf8:	6802      	ldr	r2, [r0, #0]
 8004cfa:	6853      	ldr	r3, [r2, #4]
 8004cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d00:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004d02:	430b      	orrs	r3, r1
 8004d04:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d08:	f013 0f08 	tst.w	r3, #8
 8004d0c:	d006      	beq.n	8004d1c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0e:	6802      	ldr	r2, [r0, #0]
 8004d10:	6853      	ldr	r3, [r2, #4]
 8004d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d16:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d1e:	f013 0f10 	tst.w	r3, #16
 8004d22:	d006      	beq.n	8004d32 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d24:	6802      	ldr	r2, [r0, #0]
 8004d26:	6893      	ldr	r3, [r2, #8]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d34:	f013 0f20 	tst.w	r3, #32
 8004d38:	d006      	beq.n	8004d48 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	6802      	ldr	r2, [r0, #0]
 8004d3c:	6893      	ldr	r3, [r2, #8]
 8004d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d42:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d50:	6802      	ldr	r2, [r0, #0]
 8004d52:	6853      	ldr	r3, [r2, #4]
 8004d54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d64:	d00b      	beq.n	8004d7e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d6c:	d006      	beq.n	8004d7c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6e:	6802      	ldr	r2, [r0, #0]
 8004d70:	6853      	ldr	r3, [r2, #4]
 8004d72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6053      	str	r3, [r2, #4]
}
 8004d7c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7e:	6802      	ldr	r2, [r0, #0]
 8004d80:	6853      	ldr	r3, [r2, #4]
 8004d82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d86:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6053      	str	r3, [r2, #4]
 8004d8c:	e7eb      	b.n	8004d66 <UART_AdvFeatureConfig+0xa2>

08004d8e <UART_WaitOnFlagUntilTimeout>:
{
 8004d8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d92:	4605      	mov	r5, r0
 8004d94:	460f      	mov	r7, r1
 8004d96:	4616      	mov	r6, r2
 8004d98:	4699      	mov	r9, r3
 8004d9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9e:	682c      	ldr	r4, [r5, #0]
 8004da0:	69e4      	ldr	r4, [r4, #28]
 8004da2:	ea37 0304 	bics.w	r3, r7, r4
 8004da6:	bf0c      	ite	eq
 8004da8:	f04f 0c01 	moveq.w	ip, #1
 8004dac:	f04f 0c00 	movne.w	ip, #0
 8004db0:	45b4      	cmp	ip, r6
 8004db2:	d132      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8004db4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004db8:	d0f1      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fd f8b1 	bl	8001f20 <HAL_GetTick>
 8004dbe:	eba0 0009 	sub.w	r0, r0, r9
 8004dc2:	4540      	cmp	r0, r8
 8004dc4:	d82c      	bhi.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x92>
 8004dc6:	f1b8 0f00 	cmp.w	r8, #0
 8004dca:	d02b      	beq.n	8004e24 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	f012 0f04 	tst.w	r2, #4
 8004dd4:	d0e3      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	f012 0f08 	tst.w	r2, #8
 8004ddc:	d111      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004de4:	d0db      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dea:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004dec:	4628      	mov	r0, r5
 8004dee:	f7ff fe8e 	bl	8004b0e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004df2:	2320      	movs	r3, #32
 8004df4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 8004dfe:	2003      	movs	r0, #3
 8004e00:	e00c      	b.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x8e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e02:	2408      	movs	r4, #8
 8004e04:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8004e06:	4628      	mov	r0, r5
 8004e08:	f7ff fe81 	bl	8004b0e <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e0c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
           __HAL_UNLOCK(huart);
 8004e10:	2300      	movs	r3, #0
 8004e12:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
           return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
 8004e18:	e000      	b.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8004e1a:	2000      	movs	r0, #0
}
 8004e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004e20:	2003      	movs	r0, #3
 8004e22:	e7fb      	b.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x8e>
 8004e24:	2003      	movs	r0, #3
 8004e26:	e7f9      	b.n	8004e1c <UART_WaitOnFlagUntilTimeout+0x8e>

08004e28 <UART_CheckIdleState>:
{
 8004e28:	b530      	push	{r4, r5, lr}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004e34:	f7fd f874 	bl	8001f20 <HAL_GetTick>
 8004e38:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	f012 0f08 	tst.w	r2, #8
 8004e42:	d10f      	bne.n	8004e64 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f013 0f04 	tst.w	r3, #4
 8004e4c:	d126      	bne.n	8004e9c <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8004e4e:	2320      	movs	r3, #32
 8004e50:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	2000      	movs	r0, #0
 8004e58:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5a:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004e5c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8004e60:	b003      	add	sp, #12
 8004e62:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff ff8b 	bl	8004d8e <UART_WaitOnFlagUntilTimeout>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0e3      	beq.n	8004e44 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	e852 3f00 	ldrex	r3, [r2]
 8004e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	e842 3100 	strex	r1, r3, [r2]
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	d1f6      	bne.n	8004e7c <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8004e8e:	2320      	movs	r3, #32
 8004e90:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004e92:	2300      	movs	r3, #0
 8004e94:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8004e98:	2003      	movs	r0, #3
 8004e9a:	e7e1      	b.n	8004e60 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff ff6f 	bl	8004d8e <UART_WaitOnFlagUntilTimeout>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d0cc      	beq.n	8004e4e <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	e852 3f00 	ldrex	r3, [r2]
 8004eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	e842 3100 	strex	r1, r3, [r2]
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	d1f6      	bne.n	8004eb4 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	f102 0308 	add.w	r3, r2, #8
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	3208      	adds	r2, #8
 8004ed6:	e842 3100 	strex	r1, r3, [r2]
 8004eda:	2900      	cmp	r1, #0
 8004edc:	d1f3      	bne.n	8004ec6 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8004eea:	2003      	movs	r0, #3
 8004eec:	e7b8      	b.n	8004e60 <UART_CheckIdleState+0x38>

08004eee <HAL_UART_Init>:
  if (huart == NULL)
 8004eee:	b368      	cbz	r0, 8004f4c <HAL_UART_Init+0x5e>
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004ef6:	b303      	cbz	r3, 8004f3a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ef8:	2324      	movs	r3, #36	; 0x24
 8004efa:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff fe2a 	bl	8004b60 <UART_SetConfig>
 8004f0c:	2801      	cmp	r0, #1
 8004f0e:	d013      	beq.n	8004f38 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f12:	b9bb      	cbnz	r3, 8004f44 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	6853      	ldr	r3, [r2, #4]
 8004f18:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004f1c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	6893      	ldr	r3, [r2, #8]
 8004f22:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004f26:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7ff ff78 	bl	8004e28 <UART_CheckIdleState>
}
 8004f38:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004f3a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004f3e:	f7fc ff11 	bl	8001d64 <HAL_UART_MspInit>
 8004f42:	e7d9      	b.n	8004ef8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7ff febd 	bl	8004cc4 <UART_AdvFeatureConfig>
 8004f4a:	e7e3      	b.n	8004f14 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004f4c:	2001      	movs	r0, #1
}
 8004f4e:	4770      	bx	lr

08004f50 <cosf>:
 8004f50:	b507      	push	{r0, r1, r2, lr}
 8004f52:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <cosf+0x7c>)
 8004f54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	ee07 0a90 	vmov	s15, r0
 8004f5e:	dc05      	bgt.n	8004f6c <cosf+0x1c>
 8004f60:	2100      	movs	r1, #0
 8004f62:	b003      	add	sp, #12
 8004f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f68:	f000 bb14 	b.w	8005594 <__kernel_cosf>
 8004f6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f70:	db06      	blt.n	8004f80 <cosf+0x30>
 8004f72:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004f76:	ee17 0a90 	vmov	r0, s15
 8004f7a:	b003      	add	sp, #12
 8004f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f80:	4669      	mov	r1, sp
 8004f82:	f000 f9d5 	bl	8005330 <__ieee754_rem_pio2f>
 8004f86:	f000 0203 	and.w	r2, r0, #3
 8004f8a:	2a01      	cmp	r2, #1
 8004f8c:	d009      	beq.n	8004fa2 <cosf+0x52>
 8004f8e:	2a02      	cmp	r2, #2
 8004f90:	d010      	beq.n	8004fb4 <cosf+0x64>
 8004f92:	b9a2      	cbnz	r2, 8004fbe <cosf+0x6e>
 8004f94:	9901      	ldr	r1, [sp, #4]
 8004f96:	9800      	ldr	r0, [sp, #0]
 8004f98:	f000 fafc 	bl	8005594 <__kernel_cosf>
 8004f9c:	ee07 0a90 	vmov	s15, r0
 8004fa0:	e7e9      	b.n	8004f76 <cosf+0x26>
 8004fa2:	9901      	ldr	r1, [sp, #4]
 8004fa4:	9800      	ldr	r0, [sp, #0]
 8004fa6:	f000 fdd5 	bl	8005b54 <__kernel_sinf>
 8004faa:	ee07 0a90 	vmov	s15, r0
 8004fae:	eef1 7a67 	vneg.f32	s15, s15
 8004fb2:	e7e0      	b.n	8004f76 <cosf+0x26>
 8004fb4:	9901      	ldr	r1, [sp, #4]
 8004fb6:	9800      	ldr	r0, [sp, #0]
 8004fb8:	f000 faec 	bl	8005594 <__kernel_cosf>
 8004fbc:	e7f5      	b.n	8004faa <cosf+0x5a>
 8004fbe:	9901      	ldr	r1, [sp, #4]
 8004fc0:	9800      	ldr	r0, [sp, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f000 fdc6 	bl	8005b54 <__kernel_sinf>
 8004fc8:	e7e8      	b.n	8004f9c <cosf+0x4c>
 8004fca:	bf00      	nop
 8004fcc:	3f490fd8 	.word	0x3f490fd8

08004fd0 <sinf>:
 8004fd0:	b507      	push	{r0, r1, r2, lr}
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <sinf+0x80>)
 8004fd4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	ee07 0a90 	vmov	s15, r0
 8004fde:	dc06      	bgt.n	8004fee <sinf+0x1e>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	b003      	add	sp, #12
 8004fe6:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fea:	f000 bdb3 	b.w	8005b54 <__kernel_sinf>
 8004fee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004ff2:	db06      	blt.n	8005002 <sinf+0x32>
 8004ff4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004ff8:	ee17 0a90 	vmov	r0, s15
 8004ffc:	b003      	add	sp, #12
 8004ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005002:	4669      	mov	r1, sp
 8005004:	f000 f994 	bl	8005330 <__ieee754_rem_pio2f>
 8005008:	f000 0003 	and.w	r0, r0, #3
 800500c:	2801      	cmp	r0, #1
 800500e:	d00a      	beq.n	8005026 <sinf+0x56>
 8005010:	2802      	cmp	r0, #2
 8005012:	d00d      	beq.n	8005030 <sinf+0x60>
 8005014:	b9b0      	cbnz	r0, 8005044 <sinf+0x74>
 8005016:	9901      	ldr	r1, [sp, #4]
 8005018:	9800      	ldr	r0, [sp, #0]
 800501a:	2201      	movs	r2, #1
 800501c:	f000 fd9a 	bl	8005b54 <__kernel_sinf>
 8005020:	ee07 0a90 	vmov	s15, r0
 8005024:	e7e8      	b.n	8004ff8 <sinf+0x28>
 8005026:	9901      	ldr	r1, [sp, #4]
 8005028:	9800      	ldr	r0, [sp, #0]
 800502a:	f000 fab3 	bl	8005594 <__kernel_cosf>
 800502e:	e7f7      	b.n	8005020 <sinf+0x50>
 8005030:	9901      	ldr	r1, [sp, #4]
 8005032:	9800      	ldr	r0, [sp, #0]
 8005034:	2201      	movs	r2, #1
 8005036:	f000 fd8d 	bl	8005b54 <__kernel_sinf>
 800503a:	ee07 0a90 	vmov	s15, r0
 800503e:	eef1 7a67 	vneg.f32	s15, s15
 8005042:	e7d9      	b.n	8004ff8 <sinf+0x28>
 8005044:	9901      	ldr	r1, [sp, #4]
 8005046:	9800      	ldr	r0, [sp, #0]
 8005048:	f000 faa4 	bl	8005594 <__kernel_cosf>
 800504c:	e7f5      	b.n	800503a <sinf+0x6a>
 800504e:	bf00      	nop
 8005050:	3f490fd8 	.word	0x3f490fd8

08005054 <atan2f>:
 8005054:	f000 b846 	b.w	80050e4 <__ieee754_atan2f>

08005058 <fmodf>:
 8005058:	b508      	push	{r3, lr}
 800505a:	ed2d 8b02 	vpush	{d8}
 800505e:	ee08 0a90 	vmov	s17, r0
 8005062:	ee08 1a10 	vmov	s16, r1
 8005066:	f000 f8df 	bl	8005228 <__ieee754_fmodf>
 800506a:	eef4 8a48 	vcmp.f32	s17, s16
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	ee07 0a90 	vmov	s15, r0
 8005076:	d60c      	bvs.n	8005092 <fmodf+0x3a>
 8005078:	eddf 8a08 	vldr	s17, [pc, #32]	; 800509c <fmodf+0x44>
 800507c:	eeb4 8a68 	vcmp.f32	s16, s17
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	d105      	bne.n	8005092 <fmodf+0x3a>
 8005086:	f000 ff47 	bl	8005f18 <__errno>
 800508a:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800508e:	2321      	movs	r3, #33	; 0x21
 8005090:	6003      	str	r3, [r0, #0]
 8005092:	ecbd 8b02 	vpop	{d8}
 8005096:	ee17 0a90 	vmov	r0, s15
 800509a:	bd08      	pop	{r3, pc}
 800509c:	00000000 	.word	0x00000000

080050a0 <sqrtf>:
 80050a0:	b508      	push	{r3, lr}
 80050a2:	ed2d 8b02 	vpush	{d8}
 80050a6:	ee08 0a10 	vmov	s16, r0
 80050aa:	f000 fa6b 	bl	8005584 <__ieee754_sqrtf>
 80050ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80050b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b6:	ee07 0a90 	vmov	s15, r0
 80050ba:	d60c      	bvs.n	80050d6 <sqrtf+0x36>
 80050bc:	eddf 8a08 	vldr	s17, [pc, #32]	; 80050e0 <sqrtf+0x40>
 80050c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	d505      	bpl.n	80050d6 <sqrtf+0x36>
 80050ca:	f000 ff25 	bl	8005f18 <__errno>
 80050ce:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 80050d2:	2321      	movs	r3, #33	; 0x21
 80050d4:	6003      	str	r3, [r0, #0]
 80050d6:	ecbd 8b02 	vpop	{d8}
 80050da:	ee17 0a90 	vmov	r0, s15
 80050de:	bd08      	pop	{r3, pc}
 80050e0:	00000000 	.word	0x00000000

080050e4 <__ieee754_atan2f>:
 80050e4:	ee07 1a10 	vmov	s14, r1
 80050e8:	460a      	mov	r2, r1
 80050ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80050ee:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80050f2:	b538      	push	{r3, r4, r5, lr}
 80050f4:	ee07 0a90 	vmov	s15, r0
 80050f8:	dc05      	bgt.n	8005106 <__ieee754_atan2f+0x22>
 80050fa:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80050fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005102:	4605      	mov	r5, r0
 8005104:	dd04      	ble.n	8005110 <__ieee754_atan2f+0x2c>
 8005106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800510a:	ee17 0a90 	vmov	r0, s15
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005114:	d103      	bne.n	800511e <__ieee754_atan2f+0x3a>
 8005116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800511a:	f000 bd67 	b.w	8005bec <atanf>
 800511e:	1794      	asrs	r4, r2, #30
 8005120:	f004 0402 	and.w	r4, r4, #2
 8005124:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005128:	b943      	cbnz	r3, 800513c <__ieee754_atan2f+0x58>
 800512a:	2c02      	cmp	r4, #2
 800512c:	d060      	beq.n	80051f0 <__ieee754_atan2f+0x10c>
 800512e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005204 <__ieee754_atan2f+0x120>
 8005132:	2c03      	cmp	r4, #3
 8005134:	bf08      	it	eq
 8005136:	eef0 7a47 	vmoveq.f32	s15, s14
 800513a:	e7e6      	b.n	800510a <__ieee754_atan2f+0x26>
 800513c:	b941      	cbnz	r1, 8005150 <__ieee754_atan2f+0x6c>
 800513e:	eddf 7a32 	vldr	s15, [pc, #200]	; 8005208 <__ieee754_atan2f+0x124>
 8005142:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800520c <__ieee754_atan2f+0x128>
 8005146:	2d00      	cmp	r5, #0
 8005148:	bfb8      	it	lt
 800514a:	eef0 7a47 	vmovlt.f32	s15, s14
 800514e:	e7dc      	b.n	800510a <__ieee754_atan2f+0x26>
 8005150:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005154:	d110      	bne.n	8005178 <__ieee754_atan2f+0x94>
 8005156:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800515a:	f104 34ff 	add.w	r4, r4, #4294967295
 800515e:	d107      	bne.n	8005170 <__ieee754_atan2f+0x8c>
 8005160:	2c02      	cmp	r4, #2
 8005162:	d848      	bhi.n	80051f6 <__ieee754_atan2f+0x112>
 8005164:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <__ieee754_atan2f+0x12c>)
 8005166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800516a:	edd4 7a00 	vldr	s15, [r4]
 800516e:	e7cc      	b.n	800510a <__ieee754_atan2f+0x26>
 8005170:	2c02      	cmp	r4, #2
 8005172:	d843      	bhi.n	80051fc <__ieee754_atan2f+0x118>
 8005174:	4b27      	ldr	r3, [pc, #156]	; (8005214 <__ieee754_atan2f+0x130>)
 8005176:	e7f6      	b.n	8005166 <__ieee754_atan2f+0x82>
 8005178:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800517c:	d0df      	beq.n	800513e <__ieee754_atan2f+0x5a>
 800517e:	1a5b      	subs	r3, r3, r1
 8005180:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8005184:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005188:	da1c      	bge.n	80051c4 <__ieee754_atan2f+0xe0>
 800518a:	2a00      	cmp	r2, #0
 800518c:	da01      	bge.n	8005192 <__ieee754_atan2f+0xae>
 800518e:	313c      	adds	r1, #60	; 0x3c
 8005190:	db1b      	blt.n	80051ca <__ieee754_atan2f+0xe6>
 8005192:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005196:	ee17 0a90 	vmov	r0, s15
 800519a:	f000 fdfd 	bl	8005d98 <fabsf>
 800519e:	f000 fd25 	bl	8005bec <atanf>
 80051a2:	ee07 0a90 	vmov	s15, r0
 80051a6:	2c01      	cmp	r4, #1
 80051a8:	d012      	beq.n	80051d0 <__ieee754_atan2f+0xec>
 80051aa:	2c02      	cmp	r4, #2
 80051ac:	d017      	beq.n	80051de <__ieee754_atan2f+0xfa>
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d0ab      	beq.n	800510a <__ieee754_atan2f+0x26>
 80051b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005218 <__ieee754_atan2f+0x134>
 80051b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800521c <__ieee754_atan2f+0x138>
 80051be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051c2:	e7a2      	b.n	800510a <__ieee754_atan2f+0x26>
 80051c4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005208 <__ieee754_atan2f+0x124>
 80051c8:	e7ed      	b.n	80051a6 <__ieee754_atan2f+0xc2>
 80051ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005220 <__ieee754_atan2f+0x13c>
 80051ce:	e7ea      	b.n	80051a6 <__ieee754_atan2f+0xc2>
 80051d0:	ee17 3a90 	vmov	r3, s15
 80051d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	e795      	b.n	800510a <__ieee754_atan2f+0x26>
 80051de:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005218 <__ieee754_atan2f+0x134>
 80051e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051e6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800521c <__ieee754_atan2f+0x138>
 80051ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ee:	e78c      	b.n	800510a <__ieee754_atan2f+0x26>
 80051f0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800521c <__ieee754_atan2f+0x138>
 80051f4:	e789      	b.n	800510a <__ieee754_atan2f+0x26>
 80051f6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005224 <__ieee754_atan2f+0x140>
 80051fa:	e786      	b.n	800510a <__ieee754_atan2f+0x26>
 80051fc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005220 <__ieee754_atan2f+0x13c>
 8005200:	e783      	b.n	800510a <__ieee754_atan2f+0x26>
 8005202:	bf00      	nop
 8005204:	c0490fdb 	.word	0xc0490fdb
 8005208:	3fc90fdb 	.word	0x3fc90fdb
 800520c:	bfc90fdb 	.word	0xbfc90fdb
 8005210:	08005fe8 	.word	0x08005fe8
 8005214:	08005ff4 	.word	0x08005ff4
 8005218:	33bbbd2e 	.word	0x33bbbd2e
 800521c:	40490fdb 	.word	0x40490fdb
 8005220:	00000000 	.word	0x00000000
 8005224:	3f490fdb 	.word	0x3f490fdb

08005228 <__ieee754_fmodf>:
 8005228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800522e:	ee07 1a90 	vmov	s15, r1
 8005232:	460d      	mov	r5, r1
 8005234:	d008      	beq.n	8005248 <__ieee754_fmodf+0x20>
 8005236:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 800523a:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 800523e:	4606      	mov	r6, r0
 8005240:	da02      	bge.n	8005248 <__ieee754_fmodf+0x20>
 8005242:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005246:	dd08      	ble.n	800525a <__ieee754_fmodf+0x32>
 8005248:	ee07 0a10 	vmov	s14, r0
 800524c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005250:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8005254:	ee17 0a90 	vmov	r0, s15
 8005258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800525a:	45a4      	cmp	ip, r4
 800525c:	dbfc      	blt.n	8005258 <__ieee754_fmodf+0x30>
 800525e:	f000 4700 	and.w	r7, r0, #2147483648	; 0x80000000
 8005262:	d104      	bne.n	800526e <__ieee754_fmodf+0x46>
 8005264:	4831      	ldr	r0, [pc, #196]	; (800532c <__ieee754_fmodf+0x104>)
 8005266:	eb00 7057 	add.w	r0, r0, r7, lsr #29
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	e7f4      	b.n	8005258 <__ieee754_fmodf+0x30>
 800526e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8005272:	d146      	bne.n	8005302 <__ieee754_fmodf+0xda>
 8005274:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8005278:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800527c:	2b00      	cmp	r3, #0
 800527e:	dc3d      	bgt.n	80052fc <__ieee754_fmodf+0xd4>
 8005280:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8005284:	d144      	bne.n	8005310 <__ieee754_fmodf+0xe8>
 8005286:	0223      	lsls	r3, r4, #8
 8005288:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800528c:	2b00      	cmp	r3, #0
 800528e:	da3c      	bge.n	800530a <__ieee754_fmodf+0xe2>
 8005290:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8005294:	bfb9      	ittee	lt
 8005296:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800529a:	1a5b      	sublt	r3, r3, r1
 800529c:	f3c6 0316 	ubfxge	r3, r6, #0, #23
 80052a0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80052a4:	bfb8      	it	lt
 80052a6:	fa0c f303 	lsllt.w	r3, ip, r3
 80052aa:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80052ae:	bfb5      	itete	lt
 80052b0:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 80052b4:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80052b8:	1a80      	sublt	r0, r0, r2
 80052ba:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80052be:	bfb8      	it	lt
 80052c0:	4084      	lsllt	r4, r0
 80052c2:	1a89      	subs	r1, r1, r2
 80052c4:	1b18      	subs	r0, r3, r4
 80052c6:	bb31      	cbnz	r1, 8005316 <__ieee754_fmodf+0xee>
 80052c8:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 80052cc:	bf38      	it	cc
 80052ce:	4603      	movcc	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0c7      	beq.n	8005264 <__ieee754_fmodf+0x3c>
 80052d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052d8:	db25      	blt.n	8005326 <__ieee754_fmodf+0xfe>
 80052da:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80052de:	bfb5      	itete	lt
 80052e0:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 80052e4:	f5a3 0000 	subge.w	r0, r3, #8388608	; 0x800000
 80052e8:	1a80      	sublt	r0, r0, r2
 80052ea:	327f      	addge	r2, #127	; 0x7f
 80052ec:	bfab      	itete	ge
 80052ee:	4338      	orrge	r0, r7
 80052f0:	fa43 f000 	asrlt.w	r0, r3, r0
 80052f4:	ea40 50c2 	orrge.w	r0, r0, r2, lsl #23
 80052f8:	4338      	orrlt	r0, r7
 80052fa:	e7ad      	b.n	8005258 <__ieee754_fmodf+0x30>
 80052fc:	3901      	subs	r1, #1
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	e7bc      	b.n	800527c <__ieee754_fmodf+0x54>
 8005302:	ea4f 51ec 	mov.w	r1, ip, asr #23
 8005306:	397f      	subs	r1, #127	; 0x7f
 8005308:	e7ba      	b.n	8005280 <__ieee754_fmodf+0x58>
 800530a:	3a01      	subs	r2, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	e7bd      	b.n	800528c <__ieee754_fmodf+0x64>
 8005310:	15e2      	asrs	r2, r4, #23
 8005312:	3a7f      	subs	r2, #127	; 0x7f
 8005314:	e7bc      	b.n	8005290 <__ieee754_fmodf+0x68>
 8005316:	2800      	cmp	r0, #0
 8005318:	da02      	bge.n	8005320 <__ieee754_fmodf+0xf8>
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	3901      	subs	r1, #1
 800531e:	e7d1      	b.n	80052c4 <__ieee754_fmodf+0x9c>
 8005320:	d0a0      	beq.n	8005264 <__ieee754_fmodf+0x3c>
 8005322:	0043      	lsls	r3, r0, #1
 8005324:	e7fa      	b.n	800531c <__ieee754_fmodf+0xf4>
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	3a01      	subs	r2, #1
 800532a:	e7d3      	b.n	80052d4 <__ieee754_fmodf+0xac>
 800532c:	08006000 	.word	0x08006000

08005330 <__ieee754_rem_pio2f>:
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	4b86      	ldr	r3, [pc, #536]	; (800554c <__ieee754_rem_pio2f+0x21c>)
 8005334:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005338:	429d      	cmp	r5, r3
 800533a:	ee07 0a90 	vmov	s15, r0
 800533e:	b087      	sub	sp, #28
 8005340:	460c      	mov	r4, r1
 8005342:	4606      	mov	r6, r0
 8005344:	dc04      	bgt.n	8005350 <__ieee754_rem_pio2f+0x20>
 8005346:	2300      	movs	r3, #0
 8005348:	6008      	str	r0, [r1, #0]
 800534a:	604b      	str	r3, [r1, #4]
 800534c:	2000      	movs	r0, #0
 800534e:	e020      	b.n	8005392 <__ieee754_rem_pio2f+0x62>
 8005350:	4b7f      	ldr	r3, [pc, #508]	; (8005550 <__ieee754_rem_pio2f+0x220>)
 8005352:	429d      	cmp	r5, r3
 8005354:	dc38      	bgt.n	80053c8 <__ieee754_rem_pio2f+0x98>
 8005356:	2800      	cmp	r0, #0
 8005358:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005554 <__ieee754_rem_pio2f+0x224>
 800535c:	4b7e      	ldr	r3, [pc, #504]	; (8005558 <__ieee754_rem_pio2f+0x228>)
 800535e:	f025 050f 	bic.w	r5, r5, #15
 8005362:	dd18      	ble.n	8005396 <__ieee754_rem_pio2f+0x66>
 8005364:	429d      	cmp	r5, r3
 8005366:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800536a:	bf09      	itett	eq
 800536c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800555c <__ieee754_rem_pio2f+0x22c>
 8005370:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8005560 <__ieee754_rem_pio2f+0x230>
 8005374:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005378:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 8005564 <__ieee754_rem_pio2f+0x234>
 800537c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005380:	2001      	movs	r0, #1
 8005382:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005386:	edc1 6a00 	vstr	s13, [r1]
 800538a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800538e:	edc1 7a01 	vstr	s15, [r1, #4]
 8005392:	b007      	add	sp, #28
 8005394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005396:	429d      	cmp	r5, r3
 8005398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800539c:	bf09      	itett	eq
 800539e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800555c <__ieee754_rem_pio2f+0x22c>
 80053a2:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8005560 <__ieee754_rem_pio2f+0x230>
 80053a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80053aa:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 8005564 <__ieee754_rem_pio2f+0x234>
 80053ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80053ba:	edc1 6a00 	vstr	s13, [r1]
 80053be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053c2:	edc1 7a01 	vstr	s15, [r1, #4]
 80053c6:	e7e4      	b.n	8005392 <__ieee754_rem_pio2f+0x62>
 80053c8:	4b67      	ldr	r3, [pc, #412]	; (8005568 <__ieee754_rem_pio2f+0x238>)
 80053ca:	429d      	cmp	r5, r3
 80053cc:	dc74      	bgt.n	80054b8 <__ieee754_rem_pio2f+0x188>
 80053ce:	f000 fce3 	bl	8005d98 <fabsf>
 80053d2:	eddf 6a66 	vldr	s13, [pc, #408]	; 800556c <__ieee754_rem_pio2f+0x23c>
 80053d6:	ee07 0a90 	vmov	s15, r0
 80053da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053de:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80053e2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80053e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80053ea:	ee17 0a10 	vmov	r0, s14
 80053ee:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005554 <__ieee754_rem_pio2f+0x224>
 80053f2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80053f6:	281f      	cmp	r0, #31
 80053f8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005560 <__ieee754_rem_pio2f+0x230>
 80053fc:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005400:	eef1 5a66 	vneg.f32	s11, s13
 8005404:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8005408:	ee16 2a10 	vmov	r2, s12
 800540c:	dc1c      	bgt.n	8005448 <__ieee754_rem_pio2f+0x118>
 800540e:	4958      	ldr	r1, [pc, #352]	; (8005570 <__ieee754_rem_pio2f+0x240>)
 8005410:	1e47      	subs	r7, r0, #1
 8005412:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005416:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800541a:	428b      	cmp	r3, r1
 800541c:	d014      	beq.n	8005448 <__ieee754_rem_pio2f+0x118>
 800541e:	6022      	str	r2, [r4, #0]
 8005420:	edd4 6a00 	vldr	s13, [r4]
 8005424:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005428:	2e00      	cmp	r6, #0
 800542a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800542e:	edc4 7a01 	vstr	s15, [r4, #4]
 8005432:	daae      	bge.n	8005392 <__ieee754_rem_pio2f+0x62>
 8005434:	eef1 6a66 	vneg.f32	s13, s13
 8005438:	edc4 6a00 	vstr	s13, [r4]
 800543c:	eef1 7a67 	vneg.f32	s15, s15
 8005440:	edc4 7a01 	vstr	s15, [r4, #4]
 8005444:	4240      	negs	r0, r0
 8005446:	e7a4      	b.n	8005392 <__ieee754_rem_pio2f+0x62>
 8005448:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800544c:	15eb      	asrs	r3, r5, #23
 800544e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8005452:	2d08      	cmp	r5, #8
 8005454:	dde3      	ble.n	800541e <__ieee754_rem_pio2f+0xee>
 8005456:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800555c <__ieee754_rem_pio2f+0x22c>
 800545a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005564 <__ieee754_rem_pio2f+0x234>
 800545e:	eeb0 6a67 	vmov.f32	s12, s15
 8005462:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005466:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800546a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800546e:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8005472:	eeb0 7a67 	vmov.f32	s14, s15
 8005476:	ee76 7a67 	vsub.f32	s15, s12, s15
 800547a:	ee17 2a90 	vmov	r2, s15
 800547e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	2b19      	cmp	r3, #25
 8005486:	dc04      	bgt.n	8005492 <__ieee754_rem_pio2f+0x162>
 8005488:	edc4 7a00 	vstr	s15, [r4]
 800548c:	eef0 7a46 	vmov.f32	s15, s12
 8005490:	e7c6      	b.n	8005420 <__ieee754_rem_pio2f+0xf0>
 8005492:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005574 <__ieee754_rem_pio2f+0x244>
 8005496:	eef0 7a46 	vmov.f32	s15, s12
 800549a:	eee5 7a85 	vfma.f32	s15, s11, s10
 800549e:	ee36 7a67 	vsub.f32	s14, s12, s15
 80054a2:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8005578 <__ieee754_rem_pio2f+0x248>
 80054a6:	eea5 7a85 	vfma.f32	s14, s11, s10
 80054aa:	ee96 7a86 	vfnms.f32	s14, s13, s12
 80054ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80054b2:	edc4 6a00 	vstr	s13, [r4]
 80054b6:	e7b3      	b.n	8005420 <__ieee754_rem_pio2f+0xf0>
 80054b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80054bc:	db06      	blt.n	80054cc <__ieee754_rem_pio2f+0x19c>
 80054be:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80054c2:	edc1 7a01 	vstr	s15, [r1, #4]
 80054c6:	edc1 7a00 	vstr	s15, [r1]
 80054ca:	e73f      	b.n	800534c <__ieee754_rem_pio2f+0x1c>
 80054cc:	15ea      	asrs	r2, r5, #23
 80054ce:	3a86      	subs	r2, #134	; 0x86
 80054d0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054dc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800557c <__ieee754_rem_pio2f+0x24c>
 80054e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054e8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80054ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80054f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054fc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005500:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005504:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550c:	edcd 7a05 	vstr	s15, [sp, #20]
 8005510:	d11a      	bne.n	8005548 <__ieee754_rem_pio2f+0x218>
 8005512:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	bf14      	ite	ne
 800551c:	2302      	movne	r3, #2
 800551e:	2301      	moveq	r3, #1
 8005520:	4917      	ldr	r1, [pc, #92]	; (8005580 <__ieee754_rem_pio2f+0x250>)
 8005522:	9101      	str	r1, [sp, #4]
 8005524:	2102      	movs	r1, #2
 8005526:	9100      	str	r1, [sp, #0]
 8005528:	a803      	add	r0, sp, #12
 800552a:	4621      	mov	r1, r4
 800552c:	f000 f896 	bl	800565c <__kernel_rem_pio2f>
 8005530:	2e00      	cmp	r6, #0
 8005532:	f6bf af2e 	bge.w	8005392 <__ieee754_rem_pio2f+0x62>
 8005536:	edd4 7a00 	vldr	s15, [r4]
 800553a:	eef1 7a67 	vneg.f32	s15, s15
 800553e:	edc4 7a00 	vstr	s15, [r4]
 8005542:	edd4 7a01 	vldr	s15, [r4, #4]
 8005546:	e779      	b.n	800543c <__ieee754_rem_pio2f+0x10c>
 8005548:	2303      	movs	r3, #3
 800554a:	e7e9      	b.n	8005520 <__ieee754_rem_pio2f+0x1f0>
 800554c:	3f490fd8 	.word	0x3f490fd8
 8005550:	4016cbe3 	.word	0x4016cbe3
 8005554:	3fc90f80 	.word	0x3fc90f80
 8005558:	3fc90fd0 	.word	0x3fc90fd0
 800555c:	37354400 	.word	0x37354400
 8005560:	37354443 	.word	0x37354443
 8005564:	2e85a308 	.word	0x2e85a308
 8005568:	43490f80 	.word	0x43490f80
 800556c:	3f22f984 	.word	0x3f22f984
 8005570:	08006008 	.word	0x08006008
 8005574:	2e85a300 	.word	0x2e85a300
 8005578:	248d3132 	.word	0x248d3132
 800557c:	43800000 	.word	0x43800000
 8005580:	08006088 	.word	0x08006088

08005584 <__ieee754_sqrtf>:
 8005584:	ee07 0a90 	vmov	s15, r0
 8005588:	eef1 7ae7 	vsqrt.f32	s15, s15
 800558c:	ee17 0a90 	vmov	r0, s15
 8005590:	4770      	bx	lr
	...

08005594 <__kernel_cosf>:
 8005594:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005598:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800559c:	ee05 0a10 	vmov	s10, r0
 80055a0:	ee07 1a10 	vmov	s14, r1
 80055a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80055a8:	da05      	bge.n	80055b6 <__kernel_cosf+0x22>
 80055aa:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 80055ae:	ee17 2a90 	vmov	r2, s15
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	d03f      	beq.n	8005636 <__kernel_cosf+0xa2>
 80055b6:	ee65 5a05 	vmul.f32	s11, s10, s10
 80055ba:	eddf 7a20 	vldr	s15, [pc, #128]	; 800563c <__kernel_cosf+0xa8>
 80055be:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005640 <__kernel_cosf+0xac>
 80055c2:	4a20      	ldr	r2, [pc, #128]	; (8005644 <__kernel_cosf+0xb0>)
 80055c4:	eee5 6aa7 	vfma.f32	s13, s11, s15
 80055c8:	4293      	cmp	r3, r2
 80055ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005648 <__kernel_cosf+0xb4>
 80055ce:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80055d2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800564c <__kernel_cosf+0xb8>
 80055d6:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80055da:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8005650 <__kernel_cosf+0xbc>
 80055de:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80055e2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005654 <__kernel_cosf+0xc0>
 80055e6:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80055ea:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80055ee:	eef0 4a66 	vmov.f32	s9, s13
 80055f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80055f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80055fa:	ee64 6aa5 	vmul.f32	s13, s9, s11
 80055fe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005602:	dc06      	bgt.n	8005612 <__kernel_cosf+0x7e>
 8005604:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005608:	ee76 7a47 	vsub.f32	s15, s12, s14
 800560c:	ee17 0a90 	vmov	r0, s15
 8005610:	4770      	bx	lr
 8005612:	4a11      	ldr	r2, [pc, #68]	; (8005658 <__kernel_cosf+0xc4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	bfda      	itte	le
 8005618:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800561c:	ee06 3a90 	vmovle	s13, r3
 8005620:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005624:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005628:	ee36 6a66 	vsub.f32	s12, s12, s13
 800562c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005630:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005634:	e7ea      	b.n	800560c <__kernel_cosf+0x78>
 8005636:	eef0 7a46 	vmov.f32	s15, s12
 800563a:	e7e7      	b.n	800560c <__kernel_cosf+0x78>
 800563c:	ad47d74e 	.word	0xad47d74e
 8005640:	310f74f6 	.word	0x310f74f6
 8005644:	3e999999 	.word	0x3e999999
 8005648:	b493f27c 	.word	0xb493f27c
 800564c:	37d00d01 	.word	0x37d00d01
 8005650:	bab60b61 	.word	0xbab60b61
 8005654:	3d2aaaab 	.word	0x3d2aaaab
 8005658:	3f480000 	.word	0x3f480000

0800565c <__kernel_rem_pio2f>:
 800565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	ed2d 8b04 	vpush	{d8-d9}
 8005664:	b0d9      	sub	sp, #356	; 0x164
 8005666:	4691      	mov	r9, r2
 8005668:	4688      	mov	r8, r1
 800566a:	4abc      	ldr	r2, [pc, #752]	; (800595c <__kernel_rem_pio2f+0x300>)
 800566c:	9966      	ldr	r1, [sp, #408]	; 0x198
 800566e:	f8dd c19c 	ldr.w	ip, [sp, #412]	; 0x19c
 8005672:	f852 b021 	ldr.w	fp, [r2, r1, lsl #2]
 8005676:	9002      	str	r0, [sp, #8]
 8005678:	f119 0f04 	cmn.w	r9, #4
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	f103 32ff 	add.w	r2, r3, #4294967295
 8005682:	db25      	blt.n	80056d0 <__kernel_rem_pio2f+0x74>
 8005684:	f1b9 0103 	subs.w	r1, r9, #3
 8005688:	bf48      	it	mi
 800568a:	f109 0104 	addmi.w	r1, r9, #4
 800568e:	10c9      	asrs	r1, r1, #3
 8005690:	1c4d      	adds	r5, r1, #1
 8005692:	00e8      	lsls	r0, r5, #3
 8005694:	1a8e      	subs	r6, r1, r2
 8005696:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800596c <__kernel_rem_pio2f+0x310>
 800569a:	9003      	str	r0, [sp, #12]
 800569c:	eba9 05c5 	sub.w	r5, r9, r5, lsl #3
 80056a0:	eb0b 0702 	add.w	r7, fp, r2
 80056a4:	ac1c      	add	r4, sp, #112	; 0x70
 80056a6:	eb0c 0e86 	add.w	lr, ip, r6, lsl #2
 80056aa:	2000      	movs	r0, #0
 80056ac:	42b8      	cmp	r0, r7
 80056ae:	dd11      	ble.n	80056d4 <__kernel_rem_pio2f+0x78>
 80056b0:	9b01      	ldr	r3, [sp, #4]
 80056b2:	a81c      	add	r0, sp, #112	; 0x70
 80056b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80056b8:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 80056bc:	2700      	movs	r7, #0
 80056be:	455f      	cmp	r7, fp
 80056c0:	dc26      	bgt.n	8005710 <__kernel_rem_pio2f+0xb4>
 80056c2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80056c6:	eddf 7aa9 	vldr	s15, [pc, #676]	; 800596c <__kernel_rem_pio2f+0x310>
 80056ca:	4606      	mov	r6, r0
 80056cc:	2400      	movs	r4, #0
 80056ce:	e016      	b.n	80056fe <__kernel_rem_pio2f+0xa2>
 80056d0:	2100      	movs	r1, #0
 80056d2:	e7dd      	b.n	8005690 <__kernel_rem_pio2f+0x34>
 80056d4:	42c6      	cmn	r6, r0
 80056d6:	bf5d      	ittte	pl
 80056d8:	f85e 3020 	ldrpl.w	r3, [lr, r0, lsl #2]
 80056dc:	ee07 3a90 	vmovpl	s15, r3
 80056e0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80056e4:	eef0 7a47 	vmovmi.f32	s15, s14
 80056e8:	ece4 7a01 	vstmia	r4!, {s15}
 80056ec:	3001      	adds	r0, #1
 80056ee:	e7dd      	b.n	80056ac <__kernel_rem_pio2f+0x50>
 80056f0:	ecfe 6a01 	vldmia	lr!, {s13}
 80056f4:	ed96 7a00 	vldr	s14, [r6]
 80056f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80056fc:	3401      	adds	r4, #1
 80056fe:	4294      	cmp	r4, r2
 8005700:	f1a6 0604 	sub.w	r6, r6, #4
 8005704:	ddf4      	ble.n	80056f0 <__kernel_rem_pio2f+0x94>
 8005706:	ecea 7a01 	vstmia	sl!, {s15}
 800570a:	3701      	adds	r7, #1
 800570c:	3004      	adds	r0, #4
 800570e:	e7d6      	b.n	80056be <__kernel_rem_pio2f+0x62>
 8005710:	ab08      	add	r3, sp, #32
 8005712:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	eddf 8a93 	vldr	s17, [pc, #588]	; 8005968 <__kernel_rem_pio2f+0x30c>
 800571c:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8005964 <__kernel_rem_pio2f+0x308>
 8005720:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	465e      	mov	r6, fp
 8005728:	00b3      	lsls	r3, r6, #2
 800572a:	9306      	str	r3, [sp, #24]
 800572c:	ab58      	add	r3, sp, #352	; 0x160
 800572e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 8005732:	ac08      	add	r4, sp, #32
 8005734:	ab44      	add	r3, sp, #272	; 0x110
 8005736:	ed51 7a14 	vldr	s15, [r1, #-80]	; 0xffffffb0
 800573a:	4627      	mov	r7, r4
 800573c:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 8005740:	4630      	mov	r0, r6
 8005742:	2800      	cmp	r0, #0
 8005744:	f1a1 0104 	sub.w	r1, r1, #4
 8005748:	dc53      	bgt.n	80057f2 <__kernel_rem_pio2f+0x196>
 800574a:	ee17 0a90 	vmov	r0, s15
 800574e:	4629      	mov	r1, r5
 8005750:	9207      	str	r2, [sp, #28]
 8005752:	f000 fb6b 	bl	8005e2c <scalbnf>
 8005756:	ee08 0a10 	vmov	s16, r0
 800575a:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 800575e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005762:	ee17 0a90 	vmov	r0, s15
 8005766:	f000 fb1b 	bl	8005da0 <floorf>
 800576a:	ee07 0a10 	vmov	s14, r0
 800576e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005772:	eea7 8a67 	vfms.f32	s16, s14, s15
 8005776:	2d00      	cmp	r5, #0
 8005778:	9a07      	ldr	r2, [sp, #28]
 800577a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800577e:	ee17 aa90 	vmov	sl, s15
 8005782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005786:	ee38 8a67 	vsub.f32	s16, s16, s15
 800578a:	dd44      	ble.n	8005816 <__kernel_rem_pio2f+0x1ba>
 800578c:	1e70      	subs	r0, r6, #1
 800578e:	ab08      	add	r3, sp, #32
 8005790:	f1c5 0c08 	rsb	ip, r5, #8
 8005794:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005798:	fa47 f10c 	asr.w	r1, r7, ip
 800579c:	448a      	add	sl, r1
 800579e:	fa01 f10c 	lsl.w	r1, r1, ip
 80057a2:	1a7f      	subs	r7, r7, r1
 80057a4:	f1c5 0107 	rsb	r1, r5, #7
 80057a8:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 80057ac:	410f      	asrs	r7, r1
 80057ae:	2f00      	cmp	r7, #0
 80057b0:	dd40      	ble.n	8005834 <__kernel_rem_pio2f+0x1d8>
 80057b2:	2000      	movs	r0, #0
 80057b4:	f10a 0a01 	add.w	sl, sl, #1
 80057b8:	4603      	mov	r3, r0
 80057ba:	4286      	cmp	r6, r0
 80057bc:	dc6e      	bgt.n	800589c <__kernel_rem_pio2f+0x240>
 80057be:	2d00      	cmp	r5, #0
 80057c0:	dd04      	ble.n	80057cc <__kernel_rem_pio2f+0x170>
 80057c2:	2d01      	cmp	r5, #1
 80057c4:	d07a      	beq.n	80058bc <__kernel_rem_pio2f+0x260>
 80057c6:	2d02      	cmp	r5, #2
 80057c8:	f000 8082 	beq.w	80058d0 <__kernel_rem_pio2f+0x274>
 80057cc:	2f02      	cmp	r7, #2
 80057ce:	d131      	bne.n	8005834 <__kernel_rem_pio2f+0x1d8>
 80057d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80057d4:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80057d8:	b363      	cbz	r3, 8005834 <__kernel_rem_pio2f+0x1d8>
 80057da:	ee17 0a90 	vmov	r0, s15
 80057de:	4629      	mov	r1, r5
 80057e0:	9207      	str	r2, [sp, #28]
 80057e2:	f000 fb23 	bl	8005e2c <scalbnf>
 80057e6:	ee07 0a90 	vmov	s15, r0
 80057ea:	9a07      	ldr	r2, [sp, #28]
 80057ec:	ee38 8a67 	vsub.f32	s16, s16, s15
 80057f0:	e020      	b.n	8005834 <__kernel_rem_pio2f+0x1d8>
 80057f2:	ee27 7aa8 	vmul.f32	s14, s15, s17
 80057f6:	3801      	subs	r0, #1
 80057f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80057fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005800:	eee7 7a49 	vfms.f32	s15, s14, s18
 8005804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005808:	ece7 7a01 	vstmia	r7!, {s15}
 800580c:	edd1 7a00 	vldr	s15, [r1]
 8005810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005814:	e795      	b.n	8005742 <__kernel_rem_pio2f+0xe6>
 8005816:	d105      	bne.n	8005824 <__kernel_rem_pio2f+0x1c8>
 8005818:	1e71      	subs	r1, r6, #1
 800581a:	ab08      	add	r3, sp, #32
 800581c:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 8005820:	11ff      	asrs	r7, r7, #7
 8005822:	e7c4      	b.n	80057ae <__kernel_rem_pio2f+0x152>
 8005824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005828:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	da32      	bge.n	8005898 <__kernel_rem_pio2f+0x23c>
 8005832:	2700      	movs	r7, #0
 8005834:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	f040 8098 	bne.w	8005970 <__kernel_rem_pio2f+0x314>
 8005840:	1e74      	subs	r4, r6, #1
 8005842:	4621      	mov	r1, r4
 8005844:	2000      	movs	r0, #0
 8005846:	4559      	cmp	r1, fp
 8005848:	da49      	bge.n	80058de <__kernel_rem_pio2f+0x282>
 800584a:	2800      	cmp	r0, #0
 800584c:	d078      	beq.n	8005940 <__kernel_rem_pio2f+0x2e4>
 800584e:	ab08      	add	r3, sp, #32
 8005850:	3d08      	subs	r5, #8
 8005852:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d07d      	beq.n	8005956 <__kernel_rem_pio2f+0x2fa>
 800585a:	4629      	mov	r1, r5
 800585c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005860:	f000 fae4 	bl	8005e2c <scalbnf>
 8005864:	00a5      	lsls	r5, r4, #2
 8005866:	aa44      	add	r2, sp, #272	; 0x110
 8005868:	1d2b      	adds	r3, r5, #4
 800586a:	ee07 0a90 	vmov	s15, r0
 800586e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005968 <__kernel_rem_pio2f+0x30c>
 8005872:	18d1      	adds	r1, r2, r3
 8005874:	4622      	mov	r2, r4
 8005876:	2a00      	cmp	r2, #0
 8005878:	f280 80ad 	bge.w	80059d6 <__kernel_rem_pio2f+0x37a>
 800587c:	4622      	mov	r2, r4
 800587e:	2a00      	cmp	r2, #0
 8005880:	f2c0 80cb 	blt.w	8005a1a <__kernel_rem_pio2f+0x3be>
 8005884:	a944      	add	r1, sp, #272	; 0x110
 8005886:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800588a:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8005960 <__kernel_rem_pio2f+0x304>
 800588e:	eddf 7a37 	vldr	s15, [pc, #220]	; 800596c <__kernel_rem_pio2f+0x310>
 8005892:	2000      	movs	r0, #0
 8005894:	1aa1      	subs	r1, r4, r2
 8005896:	e0b5      	b.n	8005a04 <__kernel_rem_pio2f+0x3a8>
 8005898:	2702      	movs	r7, #2
 800589a:	e78a      	b.n	80057b2 <__kernel_rem_pio2f+0x156>
 800589c:	6821      	ldr	r1, [r4, #0]
 800589e:	b943      	cbnz	r3, 80058b2 <__kernel_rem_pio2f+0x256>
 80058a0:	b119      	cbz	r1, 80058aa <__kernel_rem_pio2f+0x24e>
 80058a2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80058a6:	6021      	str	r1, [r4, #0]
 80058a8:	2101      	movs	r1, #1
 80058aa:	3001      	adds	r0, #1
 80058ac:	3404      	adds	r4, #4
 80058ae:	460b      	mov	r3, r1
 80058b0:	e783      	b.n	80057ba <__kernel_rem_pio2f+0x15e>
 80058b2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 80058b6:	6021      	str	r1, [r4, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	e7f6      	b.n	80058aa <__kernel_rem_pio2f+0x24e>
 80058bc:	1e70      	subs	r0, r6, #1
 80058be:	a908      	add	r1, sp, #32
 80058c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80058c4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80058c8:	ac08      	add	r4, sp, #32
 80058ca:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 80058ce:	e77d      	b.n	80057cc <__kernel_rem_pio2f+0x170>
 80058d0:	1e70      	subs	r0, r6, #1
 80058d2:	a908      	add	r1, sp, #32
 80058d4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80058d8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80058dc:	e7f4      	b.n	80058c8 <__kernel_rem_pio2f+0x26c>
 80058de:	ab08      	add	r3, sp, #32
 80058e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058e4:	3901      	subs	r1, #1
 80058e6:	4318      	orrs	r0, r3
 80058e8:	e7ad      	b.n	8005846 <__kernel_rem_pio2f+0x1ea>
 80058ea:	3701      	adds	r7, #1
 80058ec:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0fa      	beq.n	80058ea <__kernel_rem_pio2f+0x28e>
 80058f4:	9b06      	ldr	r3, [sp, #24]
 80058f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80058fa:	eb0d 0103 	add.w	r1, sp, r3
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	18f0      	adds	r0, r6, r3
 8005902:	ab1c      	add	r3, sp, #112	; 0x70
 8005904:	1c74      	adds	r4, r6, #1
 8005906:	394c      	subs	r1, #76	; 0x4c
 8005908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800590c:	443e      	add	r6, r7
 800590e:	42a6      	cmp	r6, r4
 8005910:	f6ff af0a 	blt.w	8005728 <__kernel_rem_pio2f+0xcc>
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	f8dd c008 	ldr.w	ip, [sp, #8]
 800591a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800591e:	9306      	str	r3, [sp, #24]
 8005920:	ee07 3a90 	vmov	s15, r3
 8005924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005928:	2700      	movs	r7, #0
 800592a:	ece0 7a01 	vstmia	r0!, {s15}
 800592e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800596c <__kernel_rem_pio2f+0x310>
 8005932:	4686      	mov	lr, r0
 8005934:	4297      	cmp	r7, r2
 8005936:	dd06      	ble.n	8005946 <__kernel_rem_pio2f+0x2ea>
 8005938:	ece1 7a01 	vstmia	r1!, {s15}
 800593c:	3401      	adds	r4, #1
 800593e:	e7e6      	b.n	800590e <__kernel_rem_pio2f+0x2b2>
 8005940:	9905      	ldr	r1, [sp, #20]
 8005942:	2701      	movs	r7, #1
 8005944:	e7d2      	b.n	80058ec <__kernel_rem_pio2f+0x290>
 8005946:	ecfc 6a01 	vldmia	ip!, {s13}
 800594a:	ed3e 7a01 	vldmdb	lr!, {s14}
 800594e:	3701      	adds	r7, #1
 8005950:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005954:	e7ee      	b.n	8005934 <__kernel_rem_pio2f+0x2d8>
 8005956:	3c01      	subs	r4, #1
 8005958:	e779      	b.n	800584e <__kernel_rem_pio2f+0x1f2>
 800595a:	bf00      	nop
 800595c:	080063cc 	.word	0x080063cc
 8005960:	080063a0 	.word	0x080063a0
 8005964:	43800000 	.word	0x43800000
 8005968:	3b800000 	.word	0x3b800000
 800596c:	00000000 	.word	0x00000000
 8005970:	9b03      	ldr	r3, [sp, #12]
 8005972:	ee18 0a10 	vmov	r0, s16
 8005976:	eba3 0109 	sub.w	r1, r3, r9
 800597a:	f000 fa57 	bl	8005e2c <scalbnf>
 800597e:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8005964 <__kernel_rem_pio2f+0x308>
 8005982:	ee07 0a90 	vmov	s15, r0
 8005986:	eef4 7ae6 	vcmpe.f32	s15, s13
 800598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598e:	db19      	blt.n	80059c4 <__kernel_rem_pio2f+0x368>
 8005990:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8005968 <__kernel_rem_pio2f+0x30c>
 8005994:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005998:	aa08      	add	r2, sp, #32
 800599a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800599e:	1c74      	adds	r4, r6, #1
 80059a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80059a4:	3508      	adds	r5, #8
 80059a6:	eee7 7a66 	vfms.f32	s15, s14, s13
 80059aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80059ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059b2:	ee17 3a90 	vmov	r3, s15
 80059b6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80059ba:	ee17 3a10 	vmov	r3, s14
 80059be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80059c2:	e74a      	b.n	800585a <__kernel_rem_pio2f+0x1fe>
 80059c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059c8:	aa08      	add	r2, sp, #32
 80059ca:	ee17 3a90 	vmov	r3, s15
 80059ce:	4634      	mov	r4, r6
 80059d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80059d4:	e741      	b.n	800585a <__kernel_rem_pio2f+0x1fe>
 80059d6:	a808      	add	r0, sp, #32
 80059d8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80059dc:	9001      	str	r0, [sp, #4]
 80059de:	ee07 0a10 	vmov	s14, r0
 80059e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80059e6:	3a01      	subs	r2, #1
 80059e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80059f0:	ed21 7a01 	vstmdb	r1!, {s14}
 80059f4:	e73f      	b.n	8005876 <__kernel_rem_pio2f+0x21a>
 80059f6:	ecfc 6a01 	vldmia	ip!, {s13}
 80059fa:	ecb6 7a01 	vldmia	r6!, {s14}
 80059fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a02:	3001      	adds	r0, #1
 8005a04:	4558      	cmp	r0, fp
 8005a06:	dc01      	bgt.n	8005a0c <__kernel_rem_pio2f+0x3b0>
 8005a08:	4288      	cmp	r0, r1
 8005a0a:	ddf4      	ble.n	80059f6 <__kernel_rem_pio2f+0x39a>
 8005a0c:	a858      	add	r0, sp, #352	; 0x160
 8005a0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a12:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005a16:	3a01      	subs	r2, #1
 8005a18:	e731      	b.n	800587e <__kernel_rem_pio2f+0x222>
 8005a1a:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8005a1c:	2a02      	cmp	r2, #2
 8005a1e:	dc09      	bgt.n	8005a34 <__kernel_rem_pio2f+0x3d8>
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	dc2a      	bgt.n	8005a7a <__kernel_rem_pio2f+0x41e>
 8005a24:	d043      	beq.n	8005aae <__kernel_rem_pio2f+0x452>
 8005a26:	f00a 0007 	and.w	r0, sl, #7
 8005a2a:	b059      	add	sp, #356	; 0x164
 8005a2c:	ecbd 8b04 	vpop	{d8-d9}
 8005a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a34:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d1f5      	bne.n	8005a26 <__kernel_rem_pio2f+0x3ca>
 8005a3a:	ab30      	add	r3, sp, #192	; 0xc0
 8005a3c:	442b      	add	r3, r5
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	4620      	mov	r0, r4
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f1a1 0104 	sub.w	r1, r1, #4
 8005a4a:	dc51      	bgt.n	8005af0 <__kernel_rem_pio2f+0x494>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	2901      	cmp	r1, #1
 8005a50:	f1a2 0204 	sub.w	r2, r2, #4
 8005a54:	dc5c      	bgt.n	8005b10 <__kernel_rem_pio2f+0x4b4>
 8005a56:	ed5f 7a3b 	vldr	s15, [pc, #-236]	; 800596c <__kernel_rem_pio2f+0x310>
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	2c01      	cmp	r4, #1
 8005a5e:	dc67      	bgt.n	8005b30 <__kernel_rem_pio2f+0x4d4>
 8005a60:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8005a64:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8005a68:	2f00      	cmp	r7, #0
 8005a6a:	d167      	bne.n	8005b3c <__kernel_rem_pio2f+0x4e0>
 8005a6c:	edc8 6a00 	vstr	s13, [r8]
 8005a70:	ed88 7a01 	vstr	s14, [r8, #4]
 8005a74:	edc8 7a02 	vstr	s15, [r8, #8]
 8005a78:	e7d5      	b.n	8005a26 <__kernel_rem_pio2f+0x3ca>
 8005a7a:	aa30      	add	r2, sp, #192	; 0xc0
 8005a7c:	ed1f 7a45 	vldr	s14, [pc, #-276]	; 800596c <__kernel_rem_pio2f+0x310>
 8005a80:	4413      	add	r3, r2
 8005a82:	4622      	mov	r2, r4
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	da24      	bge.n	8005ad2 <__kernel_rem_pio2f+0x476>
 8005a88:	b34f      	cbz	r7, 8005ade <__kernel_rem_pio2f+0x482>
 8005a8a:	eef1 7a47 	vneg.f32	s15, s14
 8005a8e:	edc8 7a00 	vstr	s15, [r8]
 8005a92:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a9a:	aa31      	add	r2, sp, #196	; 0xc4
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	429c      	cmp	r4, r3
 8005aa0:	da20      	bge.n	8005ae4 <__kernel_rem_pio2f+0x488>
 8005aa2:	b10f      	cbz	r7, 8005aa8 <__kernel_rem_pio2f+0x44c>
 8005aa4:	eef1 7a67 	vneg.f32	s15, s15
 8005aa8:	edc8 7a01 	vstr	s15, [r8, #4]
 8005aac:	e7bb      	b.n	8005a26 <__kernel_rem_pio2f+0x3ca>
 8005aae:	aa30      	add	r2, sp, #192	; 0xc0
 8005ab0:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 800596c <__kernel_rem_pio2f+0x310>
 8005ab4:	4413      	add	r3, r2
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	da05      	bge.n	8005ac6 <__kernel_rem_pio2f+0x46a>
 8005aba:	b10f      	cbz	r7, 8005ac0 <__kernel_rem_pio2f+0x464>
 8005abc:	eef1 7a67 	vneg.f32	s15, s15
 8005ac0:	edc8 7a00 	vstr	s15, [r8]
 8005ac4:	e7af      	b.n	8005a26 <__kernel_rem_pio2f+0x3ca>
 8005ac6:	ed33 7a01 	vldmdb	r3!, {s14}
 8005aca:	3c01      	subs	r4, #1
 8005acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ad0:	e7f1      	b.n	8005ab6 <__kernel_rem_pio2f+0x45a>
 8005ad2:	ed73 7a01 	vldmdb	r3!, {s15}
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005adc:	e7d2      	b.n	8005a84 <__kernel_rem_pio2f+0x428>
 8005ade:	eef0 7a47 	vmov.f32	s15, s14
 8005ae2:	e7d4      	b.n	8005a8e <__kernel_rem_pio2f+0x432>
 8005ae4:	ecb2 7a01 	vldmia	r2!, {s14}
 8005ae8:	3301      	adds	r3, #1
 8005aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aee:	e7d6      	b.n	8005a9e <__kernel_rem_pio2f+0x442>
 8005af0:	edd1 7a00 	vldr	s15, [r1]
 8005af4:	edd1 6a01 	vldr	s13, [r1, #4]
 8005af8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005afc:	3801      	subs	r0, #1
 8005afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b02:	ed81 7a00 	vstr	s14, [r1]
 8005b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0a:	edc1 7a01 	vstr	s15, [r1, #4]
 8005b0e:	e799      	b.n	8005a44 <__kernel_rem_pio2f+0x3e8>
 8005b10:	edd2 7a00 	vldr	s15, [r2]
 8005b14:	edd2 6a01 	vldr	s13, [r2, #4]
 8005b18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b1c:	3901      	subs	r1, #1
 8005b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b22:	ed82 7a00 	vstr	s14, [r2]
 8005b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2a:	edc2 7a01 	vstr	s15, [r2, #4]
 8005b2e:	e78e      	b.n	8005a4e <__kernel_rem_pio2f+0x3f2>
 8005b30:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b34:	3c01      	subs	r4, #1
 8005b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b3a:	e78f      	b.n	8005a5c <__kernel_rem_pio2f+0x400>
 8005b3c:	eef1 6a66 	vneg.f32	s13, s13
 8005b40:	eeb1 7a47 	vneg.f32	s14, s14
 8005b44:	edc8 6a00 	vstr	s13, [r8]
 8005b48:	ed88 7a01 	vstr	s14, [r8, #4]
 8005b4c:	eef1 7a67 	vneg.f32	s15, s15
 8005b50:	e790      	b.n	8005a74 <__kernel_rem_pio2f+0x418>
 8005b52:	bf00      	nop

08005b54 <__kernel_sinf>:
 8005b54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005b58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005b5c:	ee07 0a90 	vmov	s15, r0
 8005b60:	ee07 1a10 	vmov	s14, r1
 8005b64:	da04      	bge.n	8005b70 <__kernel_sinf+0x1c>
 8005b66:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005b6a:	ee16 3a90 	vmov	r3, s13
 8005b6e:	b1e3      	cbz	r3, 8005baa <__kernel_sinf+0x56>
 8005b70:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005b74:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005bd0 <__kernel_sinf+0x7c>
 8005b78:	ed9f 5a16 	vldr	s10, [pc, #88]	; 8005bd4 <__kernel_sinf+0x80>
 8005b7c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8005b80:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005bd8 <__kernel_sinf+0x84>
 8005b84:	eee5 6a06 	vfma.f32	s13, s10, s12
 8005b88:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005bdc <__kernel_sinf+0x88>
 8005b8c:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005b90:	eddf 6a13 	vldr	s13, [pc, #76]	; 8005be0 <__kernel_sinf+0x8c>
 8005b94:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005b98:	eee5 6a06 	vfma.f32	s13, s10, s12
 8005b9c:	b942      	cbnz	r2, 8005bb0 <__kernel_sinf+0x5c>
 8005b9e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005be4 <__kernel_sinf+0x90>
 8005ba2:	eea6 7a26 	vfma.f32	s14, s12, s13
 8005ba6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005baa:	ee17 0a90 	vmov	r0, s15
 8005bae:	4770      	bx	lr
 8005bb0:	ee66 6ae5 	vnmul.f32	s13, s13, s11
 8005bb4:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8005bb8:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005bbc:	ee96 7a86 	vfnms.f32	s14, s13, s12
 8005bc0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005be8 <__kernel_sinf+0x94>
 8005bc4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bcc:	e7ed      	b.n	8005baa <__kernel_sinf+0x56>
 8005bce:	bf00      	nop
 8005bd0:	2f2ec9d3 	.word	0x2f2ec9d3
 8005bd4:	b2d72f34 	.word	0xb2d72f34
 8005bd8:	3638ef1b 	.word	0x3638ef1b
 8005bdc:	b9500d01 	.word	0xb9500d01
 8005be0:	3c088889 	.word	0x3c088889
 8005be4:	be2aaaab 	.word	0xbe2aaaab
 8005be8:	3e2aaaab 	.word	0x3e2aaaab

08005bec <atanf>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8005bf2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005bf6:	ee07 0a90 	vmov	s15, r0
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	db10      	blt.n	8005c20 <atanf+0x34>
 8005bfe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005c02:	dd04      	ble.n	8005c0e <atanf+0x22>
 8005c04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c08:	ee17 0a90 	vmov	r0, s15
 8005c0c:	bd38      	pop	{r3, r4, r5, pc}
 8005c0e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005d4c <atanf+0x160>
 8005c12:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8005d50 <atanf+0x164>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	bfc8      	it	gt
 8005c1a:	eef0 7a47 	vmovgt.f32	s15, s14
 8005c1e:	e7f3      	b.n	8005c08 <atanf+0x1c>
 8005c20:	4b4c      	ldr	r3, [pc, #304]	; (8005d54 <atanf+0x168>)
 8005c22:	429c      	cmp	r4, r3
 8005c24:	dc10      	bgt.n	8005c48 <atanf+0x5c>
 8005c26:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005c2a:	da0a      	bge.n	8005c42 <atanf+0x56>
 8005c2c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005d58 <atanf+0x16c>
 8005c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c38:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	dce2      	bgt.n	8005c08 <atanf+0x1c>
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	e015      	b.n	8005c74 <atanf+0x88>
 8005c48:	f000 f8a6 	bl	8005d98 <fabsf>
 8005c4c:	4b43      	ldr	r3, [pc, #268]	; (8005d5c <atanf+0x170>)
 8005c4e:	429c      	cmp	r4, r3
 8005c50:	ee07 0a10 	vmov	s14, r0
 8005c54:	dc4f      	bgt.n	8005cf6 <atanf+0x10a>
 8005c56:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	dc41      	bgt.n	8005ce2 <atanf+0xf6>
 8005c5e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005c62:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8005c66:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005c7a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005d60 <atanf+0x174>
 8005c7e:	eddf 5a39 	vldr	s11, [pc, #228]	; 8005d64 <atanf+0x178>
 8005c82:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8005d68 <atanf+0x17c>
 8005c86:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005c8a:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005c8e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005d6c <atanf+0x180>
 8005c92:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005c96:	eddf 5a36 	vldr	s11, [pc, #216]	; 8005d70 <atanf+0x184>
 8005c9a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005c9e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005d74 <atanf+0x188>
 8005ca2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005ca6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d78 <atanf+0x18c>
 8005caa:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005cae:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005d7c <atanf+0x190>
 8005cb2:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005cb6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005d80 <atanf+0x194>
 8005cba:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005cbe:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8005d84 <atanf+0x198>
 8005cc2:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005cc6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005d88 <atanf+0x19c>
 8005cca:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005cce:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005cd2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005cd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005cda:	d121      	bne.n	8005d20 <atanf+0x134>
 8005cdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ce0:	e792      	b.n	8005c08 <atanf+0x1c>
 8005ce2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005ce6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cee:	2301      	movs	r3, #1
 8005cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf4:	e7be      	b.n	8005c74 <atanf+0x88>
 8005cf6:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <atanf+0x1a0>)
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	dc0b      	bgt.n	8005d14 <atanf+0x128>
 8005cfc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d04:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d08:	2302      	movs	r3, #2
 8005d0a:	ee37 6a67 	vsub.f32	s12, s14, s15
 8005d0e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005d12:	e7af      	b.n	8005c74 <atanf+0x88>
 8005d14:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8005d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e7a9      	b.n	8005c74 <atanf+0x88>
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <atanf+0x1a4>)
 8005d22:	491c      	ldr	r1, [pc, #112]	; (8005d94 <atanf+0x1a8>)
 8005d24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005d28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005d2c:	edd3 6a00 	vldr	s13, [r3]
 8005d30:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d3a:	ed92 7a00 	vldr	s14, [r2]
 8005d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d42:	bfb8      	it	lt
 8005d44:	eef1 7a67 	vneglt.f32	s15, s15
 8005d48:	e75e      	b.n	8005c08 <atanf+0x1c>
 8005d4a:	bf00      	nop
 8005d4c:	3fc90fdb 	.word	0x3fc90fdb
 8005d50:	bfc90fdb 	.word	0xbfc90fdb
 8005d54:	3edfffff 	.word	0x3edfffff
 8005d58:	7149f2ca 	.word	0x7149f2ca
 8005d5c:	3f97ffff 	.word	0x3f97ffff
 8005d60:	3c8569d7 	.word	0x3c8569d7
 8005d64:	3d4bda59 	.word	0x3d4bda59
 8005d68:	bd6ef16b 	.word	0xbd6ef16b
 8005d6c:	3d886b35 	.word	0x3d886b35
 8005d70:	3dba2e6e 	.word	0x3dba2e6e
 8005d74:	3e124925 	.word	0x3e124925
 8005d78:	3eaaaaab 	.word	0x3eaaaaab
 8005d7c:	bd15a221 	.word	0xbd15a221
 8005d80:	bd9d8795 	.word	0xbd9d8795
 8005d84:	bde38e38 	.word	0xbde38e38
 8005d88:	be4ccccd 	.word	0xbe4ccccd
 8005d8c:	401bffff 	.word	0x401bffff
 8005d90:	080063d8 	.word	0x080063d8
 8005d94:	080063e8 	.word	0x080063e8

08005d98 <fabsf>:
 8005d98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d9c:	4770      	bx	lr
	...

08005da0 <floorf>:
 8005da0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005da4:	3a7f      	subs	r2, #127	; 0x7f
 8005da6:	2a16      	cmp	r2, #22
 8005da8:	ee07 0a90 	vmov	s15, r0
 8005dac:	4603      	mov	r3, r0
 8005dae:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8005db2:	dc2a      	bgt.n	8005e0a <floorf+0x6a>
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	da11      	bge.n	8005ddc <floorf+0x3c>
 8005db8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005e20 <floorf+0x80>
 8005dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	dd05      	ble.n	8005dd6 <floorf+0x36>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	da25      	bge.n	8005e1a <floorf+0x7a>
 8005dce:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <floorf+0x84>)
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	bf18      	it	ne
 8005dd4:	4613      	movne	r3, r2
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	e01b      	b.n	8005e14 <floorf+0x74>
 8005ddc:	4912      	ldr	r1, [pc, #72]	; (8005e28 <floorf+0x88>)
 8005dde:	4111      	asrs	r1, r2
 8005de0:	4208      	tst	r0, r1
 8005de2:	d017      	beq.n	8005e14 <floorf+0x74>
 8005de4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005e20 <floorf+0x80>
 8005de8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df4:	ddef      	ble.n	8005dd6 <floorf+0x36>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	bfbe      	ittt	lt
 8005dfa:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005dfe:	fa40 f202 	asrlt.w	r2, r0, r2
 8005e02:	189b      	addlt	r3, r3, r2
 8005e04:	ea23 0301 	bic.w	r3, r3, r1
 8005e08:	e7e5      	b.n	8005dd6 <floorf+0x36>
 8005e0a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005e0e:	d301      	bcc.n	8005e14 <floorf+0x74>
 8005e10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e14:	ee17 0a90 	vmov	r0, s15
 8005e18:	4770      	bx	lr
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e7db      	b.n	8005dd6 <floorf+0x36>
 8005e1e:	bf00      	nop
 8005e20:	7149f2ca 	.word	0x7149f2ca
 8005e24:	bf800000 	.word	0xbf800000
 8005e28:	007fffff 	.word	0x007fffff

08005e2c <scalbnf>:
 8005e2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005e30:	ee07 0a90 	vmov	s15, r0
 8005e34:	4603      	mov	r3, r0
 8005e36:	d004      	beq.n	8005e42 <scalbnf+0x16>
 8005e38:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005e3c:	d304      	bcc.n	8005e48 <scalbnf+0x1c>
 8005e3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e42:	ee17 0a90 	vmov	r0, s15
 8005e46:	4770      	bx	lr
 8005e48:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8005e4c:	d122      	bne.n	8005e94 <scalbnf+0x68>
 8005e4e:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <scalbnf+0xd0>)
 8005e50:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005f00 <scalbnf+0xd4>
 8005e54:	4299      	cmp	r1, r3
 8005e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e5a:	db16      	blt.n	8005e8a <scalbnf+0x5e>
 8005e5c:	ee17 3a90 	vmov	r3, s15
 8005e60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005e64:	3a19      	subs	r2, #25
 8005e66:	440a      	add	r2, r1
 8005e68:	2afe      	cmp	r2, #254	; 0xfe
 8005e6a:	dd15      	ble.n	8005e98 <scalbnf+0x6c>
 8005e6c:	ee17 3a90 	vmov	r3, s15
 8005e70:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005f04 <scalbnf+0xd8>
 8005e74:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005f08 <scalbnf+0xdc>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	eef0 6a47 	vmov.f32	s13, s14
 8005e7e:	bfb8      	it	lt
 8005e80:	eeb0 7a67 	vmovlt.f32	s14, s15
 8005e84:	ee67 7a26 	vmul.f32	s15, s14, s13
 8005e88:	e7db      	b.n	8005e42 <scalbnf+0x16>
 8005e8a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005f0c <scalbnf+0xe0>
 8005e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e92:	e7d6      	b.n	8005e42 <scalbnf+0x16>
 8005e94:	0dd2      	lsrs	r2, r2, #23
 8005e96:	e7e6      	b.n	8005e66 <scalbnf+0x3a>
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	dd06      	ble.n	8005eaa <scalbnf+0x7e>
 8005e9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ea0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	e7cb      	b.n	8005e42 <scalbnf+0x16>
 8005eaa:	f112 0f16 	cmn.w	r2, #22
 8005eae:	da1a      	bge.n	8005ee6 <scalbnf+0xba>
 8005eb0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005eb4:	4299      	cmp	r1, r3
 8005eb6:	ee17 3a90 	vmov	r3, s15
 8005eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ebe:	dd0a      	ble.n	8005ed6 <scalbnf+0xaa>
 8005ec0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005f04 <scalbnf+0xd8>
 8005ec4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8005f08 <scalbnf+0xdc>
 8005ec8:	eeb0 7a67 	vmov.f32	s14, s15
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf18      	it	ne
 8005ed0:	eef0 7a66 	vmovne.f32	s15, s13
 8005ed4:	e7db      	b.n	8005e8e <scalbnf+0x62>
 8005ed6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005f0c <scalbnf+0xe0>
 8005eda:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005f10 <scalbnf+0xe4>
 8005ede:	eeb0 7a67 	vmov.f32	s14, s15
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	e7f3      	b.n	8005ece <scalbnf+0xa2>
 8005ee6:	3219      	adds	r2, #25
 8005ee8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005eec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005ef0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005f14 <scalbnf+0xe8>
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	e7c9      	b.n	8005e8e <scalbnf+0x62>
 8005efa:	bf00      	nop
 8005efc:	ffff3cb0 	.word	0xffff3cb0
 8005f00:	4c000000 	.word	0x4c000000
 8005f04:	7149f2ca 	.word	0x7149f2ca
 8005f08:	f149f2ca 	.word	0xf149f2ca
 8005f0c:	0da24260 	.word	0x0da24260
 8005f10:	8da24260 	.word	0x8da24260
 8005f14:	33000000 	.word	0x33000000

08005f18 <__errno>:
 8005f18:	4b01      	ldr	r3, [pc, #4]	; (8005f20 <__errno+0x8>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2600      	movs	r6, #0
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f000 f82e 	bl	8005f98 <_init>
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2600      	movs	r6, #0
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	080063f8 	.word	0x080063f8
 8005f60:	080063f8 	.word	0x080063f8
 8005f64:	080063f8 	.word	0x080063f8
 8005f68:	080063fc 	.word	0x080063fc

08005f6c <memcpy>:
 8005f6c:	440a      	add	r2, r1
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f74:	d100      	bne.n	8005f78 <memcpy+0xc>
 8005f76:	4770      	bx	lr
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f82:	4291      	cmp	r1, r2
 8005f84:	d1f9      	bne.n	8005f7a <memcpy+0xe>
 8005f86:	bd10      	pop	{r4, pc}

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <_init>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr

08005fa4 <_fini>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr
