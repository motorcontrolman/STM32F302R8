
STM32F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005fdc  08005fdc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fdc  08005fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000070  08006054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08006054  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fa1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e51  00000000  00000000  00039041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012f04  00000000  00000000  0003be92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  0004ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  0004fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d891  00000000  00000000  00050d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3fb  00000000  00000000  0006e591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000acd25  00000000  00000000  0008a98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001376b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c58  00000000  00000000  00137704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b7c 	.word	0x08005b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005b7c 	.word	0x08005b7c

080001c8 <cfPhaseLockedLoop>:

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 80001c8:	ee20 1a01 	vmul.f32	s2, s0, s2
 80001cc:	edd0 7a00 	vldr	s15, [r0]
 80001d0:	ee31 1a27 	vadd.f32	s2, s2, s15
 80001d4:	ed80 1a00 	vstr	s2, [r0]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 80001d8:	ee20 0a20 	vmul.f32	s0, s0, s1

	return ElectAngVeloEstimate;
}
 80001dc:	ee31 0a00 	vadd.f32	s0, s2, s0
 80001e0:	4770      	bx	lr

080001e2 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 80001e2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80001e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001ea:	db04      	blt.n	80001f6 <gfDivideAvoidZero+0x14>
 80001ec:	eef4 0ac1 	vcmpe.f32	s1, s2
 80001f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001f4:	d411      	bmi.n	800021a <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 80001f6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80001fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80001fe:	d402      	bmi.n	8000206 <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000200:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000204:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 8000206:	eeb1 1a41 	vneg.f32	s2, s2
 800020a:	eeb4 1ae0 	vcmpe.f32	s2, s1
 800020e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000212:	d5f5      	bpl.n	8000200 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 8000214:	eef0 0a41 	vmov.f32	s1, s2
 8000218:	e7f2      	b.n	8000200 <gfDivideAvoidZero+0x1e>
		den = threshold;
 800021a:	eef0 0a41 	vmov.f32	s1, s2
 800021e:	e7ef      	b.n	8000200 <gfDivideAvoidZero+0x1e>

08000220 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000220:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000222:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800025c <gfWrapTheta+0x3c>
 8000226:	f004 fd5b 	bl	8004ce0 <fmodf>
	if( theta > PI)
 800022a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000260 <gfWrapTheta+0x40>
 800022e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000236:	dd04      	ble.n	8000242 <gfWrapTheta+0x22>
		theta -= TWOPI;
 8000238:	eddf 7a08 	vldr	s15, [pc, #32]	; 800025c <gfWrapTheta+0x3c>
 800023c:	ee30 0a67 	vsub.f32	s0, s0, s15
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000240:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000242:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000264 <gfWrapTheta+0x44>
 8000246:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800024e:	d5f7      	bpl.n	8000240 <gfWrapTheta+0x20>
		theta += TWOPI;
 8000250:	eddf 7a02 	vldr	s15, [pc, #8]	; 800025c <gfWrapTheta+0x3c>
 8000254:	ee30 0a27 	vadd.f32	s0, s0, s15
	return theta;
 8000258:	e7f2      	b.n	8000240 <gfWrapTheta+0x20>
 800025a:	bf00      	nop
 800025c:	40c90fdb 	.word	0x40c90fdb
 8000260:	40490fdb 	.word	0x40490fdb
 8000264:	c0490fdb 	.word	0xc0490fdb

08000268 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000268:	eef0 7a40 	vmov.f32	s15, s0
 800026c:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 8000270:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000278:	dc01      	bgt.n	800027e <gUpperLowerLimit+0x16>
 800027a:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 800027e:	eef4 0ac0 	vcmpe.f32	s1, s0
 8000282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000286:	d401      	bmi.n	800028c <gUpperLowerLimit+0x24>
 8000288:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 800028c:	4770      	bx	lr

0800028e <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	outputMode[0] = OUTPUTMODE_OPEN;
 800028e:	2300      	movs	r3, #0
 8000290:	700b      	strb	r3, [r1, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 8000292:	704b      	strb	r3, [r1, #1]
	outputMode[2] = OUTPUTMODE_OPEN;
 8000294:	708b      	strb	r3, [r1, #2]
	Duty[0] = 0.0f;
 8000296:	2300      	movs	r3, #0
 8000298:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 800029a:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 800029c:	6083      	str	r3, [r0, #8]
}
 800029e:	4770      	bx	lr

080002a0 <gLPF>:
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 80002a0:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 80002a4:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 80002a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80002ac:	ee77 7ac1 	vsub.f32	s15, s15, s2
 80002b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002b4:	ee21 1a00 	vmul.f32	s2, s2, s0
 80002b8:	ee77 7a81 	vadd.f32	s15, s15, s2
 80002bc:	edc0 7a00 	vstr	s15, [r0]
}
 80002c0:	4770      	bx	lr

080002c2 <slctPosMode>:

}

void slctPosMode(float electFreq, uint8_t* posMode){

	*posMode = POSMODE_FREERUN;
 80002c2:	2301      	movs	r3, #1
 80002c4:	7003      	strb	r3, [r0, #0]

	if(*posMode != POSMODE_HALL_PLL){
		if (electFreq > ELECTFREQ_VALIDPLL)
 80002c6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80002ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80002ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d2:	dd02      	ble.n	80002da <slctPosMode+0x18>
			*posMode = POSMODE_HALL_PLL;
 80002d4:	2303      	movs	r3, #3
 80002d6:	7003      	strb	r3, [r0, #0]
 80002d8:	4770      	bx	lr
		else
			*posMode = POSMODE_HALL;
 80002da:	2302      	movs	r3, #2
 80002dc:	7003      	strb	r3, [r0, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 80002de:	4770      	bx	lr

080002e0 <slctDrvMode>:

void slctDrvMode(float electFreq, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 80002e0:	7803      	ldrb	r3, [r0, #0]
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d00c      	beq.n	8000300 <slctDrvMode+0x20>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 80002e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800031c <slctDrvMode+0x3c>
 80002ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dd02      	ble.n	80002fa <slctDrvMode+0x1a>
			*drvMode = DRVMODE_VECTORCONTROL;
 80002f4:	2304      	movs	r3, #4
 80002f6:	7003      	strb	r3, [r0, #0]
 80002f8:	4770      	bx	lr
		else
			*drvMode = DRVMODE_OPENLOOP;
 80002fa:	2302      	movs	r3, #2
 80002fc:	7003      	strb	r3, [r0, #0]
 80002fe:	4770      	bx	lr
	}
	else if(*drvMode == DRVMODE_VECTORCONTROL){
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000300:	eddf 7a06 	vldr	s15, [pc, #24]	; 800031c <slctDrvMode+0x3c>
 8000304:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030c:	d502      	bpl.n	8000314 <slctDrvMode+0x34>
			*drvMode = DRVMODE_OPENLOOP;
 800030e:	2302      	movs	r3, #2
 8000310:	7003      	strb	r3, [r0, #0]
 8000312:	4770      	bx	lr
		else
			*drvMode = DRVMODE_VECTORCONTROL;
 8000314:	2304      	movs	r3, #4
 8000316:	7003      	strb	r3, [r0, #0]
	}
}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	447a0000 	.word	0x447a0000

08000320 <slctElectAngleFromPosMode>:
		*drvMode = DRVMODE_OPENLOOP_SENSORLESS;
	else
		*drvMode = DRVMODE_VECTORCONTROL;
}

void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo){
 8000320:	b510      	push	{r4, lr}
 8000322:	460c      	mov	r4, r1
	uint8_t flgPLL;

	switch(posMode){
 8000324:	2804      	cmp	r0, #4
 8000326:	d848      	bhi.n	80003ba <slctElectAngleFromPosMode+0x9a>
 8000328:	e8df f000 	tbb	[pc, r0]
 800032c:	281e0903 	.word	0x281e0903
 8000330:	32          	.byte	0x32
 8000331:	00          	.byte	0x00
	case POSMODE_STOP:
		*electAngle = 0.0f;
 8000332:	2300      	movs	r3, #0
 8000334:	600b      	str	r3, [r1, #0]
		*electAngVelo = 0.0f;
 8000336:	6013      	str	r3, [r2, #0]
		sElectAngVeloRef = 0.0f;
 8000338:	4a22      	ldr	r2, [pc, #136]	; (80003c4 <slctElectAngleFromPosMode+0xa4>)
 800033a:	6013      	str	r3, [r2, #0]
	default:
		*electAngle = 0;
		*electAngVelo = 0;
		break;
	}
}
 800033c:	bd10      	pop	{r4, pc}
		*electAngVelo = sElectAngVeloRefRateLimit;
 800033e:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <slctElectAngleFromPosMode+0xa8>)
 8000340:	edd3 7a00 	vldr	s15, [r3]
 8000344:	edc2 7a00 	vstr	s15, [r2]
		sElectAngleFreerun = sElectAngleFreerun + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000348:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80003cc <slctElectAngleFromPosMode+0xac>
 800034c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <slctElectAngleFromPosMode+0xb0>)
 8000352:	edd3 7a00 	vldr	s15, [r3]
 8000356:	ee30 0a27 	vadd.f32	s0, s0, s15
 800035a:	ed83 0a00 	vstr	s0, [r3]
		*electAngle = gfWrapTheta(sElectAngleFreerun);
 800035e:	f7ff ff5f 	bl	8000220 <gfWrapTheta>
 8000362:	ed84 0a00 	vstr	s0, [r4]
		break;
 8000366:	e7e9      	b.n	800033c <slctElectAngleFromPosMode+0x1c>
		calcElectAngle(gHall, gElectFreq, flgPLL, electAngle, electAngVelo);
 8000368:	4613      	mov	r3, r2
 800036a:	460a      	mov	r2, r1
 800036c:	2100      	movs	r1, #0
 800036e:	4819      	ldr	r0, [pc, #100]	; (80003d4 <slctElectAngleFromPosMode+0xb4>)
 8000370:	ed90 0a00 	vldr	s0, [r0]
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <slctElectAngleFromPosMode+0xb8>)
 8000376:	f000 fa9f 	bl	80008b8 <calcElectAngle>
		break;
 800037a:	e7df      	b.n	800033c <slctElectAngleFromPosMode+0x1c>
		calcElectAngle(gHall, gElectFreq, flgPLL, electAngle, electAngVelo);
 800037c:	4613      	mov	r3, r2
 800037e:	460a      	mov	r2, r1
 8000380:	2101      	movs	r1, #1
 8000382:	4814      	ldr	r0, [pc, #80]	; (80003d4 <slctElectAngleFromPosMode+0xb4>)
 8000384:	ed90 0a00 	vldr	s0, [r0]
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <slctElectAngleFromPosMode+0xb8>)
 800038a:	f000 fa95 	bl	80008b8 <calcElectAngle>
		break;
 800038e:	e7d5      	b.n	800033c <slctElectAngleFromPosMode+0x1c>
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <slctElectAngleFromPosMode+0xa8>)
 8000392:	edd3 7a00 	vldr	s15, [r3]
 8000396:	edc2 7a00 	vstr	s15, [r2]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 800039a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80003cc <slctElectAngleFromPosMode+0xac>
 800039e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <slctElectAngleFromPosMode+0xbc>)
 80003a4:	edd3 7a00 	vldr	s15, [r3]
 80003a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80003ac:	ed83 0a00 	vstr	s0, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 80003b0:	f7ff ff36 	bl	8000220 <gfWrapTheta>
 80003b4:	ed84 0a00 	vstr	s0, [r4]
		break;
 80003b8:	e7c0      	b.n	800033c <slctElectAngleFromPosMode+0x1c>
		*electAngle = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	600b      	str	r3, [r1, #0]
		*electAngVelo = 0;
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	e7bc      	b.n	800033c <slctElectAngleFromPosMode+0x1c>
 80003c2:	bf00      	nop
 80003c4:	200000d8 	.word	0x200000d8
 80003c8:	200000dc 	.word	0x200000dc
 80003cc:	468ca000 	.word	0x468ca000
 80003d0:	200000e4 	.word	0x200000e4
 80003d4:	20000098 	.word	0x20000098
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	200000e0 	.word	0x200000e0

080003e0 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode){
 80003e0:	b500      	push	{lr}
 80003e2:	b085      	sub	sp, #20
 80003e4:	460b      	mov	r3, r1
	uint8_t flgFB;
	uint8_t flgPLL;
	// MotorDrive

	float Idq_ref[2];
	Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 80003e6:	2100      	movs	r1, #0
 80003e8:	9102      	str	r1, [sp, #8]
	Idq_ref[1] = IQREFMAX * gVolume;
 80003ea:	4928      	ldr	r1, [pc, #160]	; (800048c <slctCntlFromDrvMode+0xac>)
 80003ec:	ed91 0a00 	vldr	s0, [r1]
 80003f0:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80003f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80003f8:	ed8d 0a03 	vstr	s0, [sp, #12]

	switch(drvMode){
 80003fc:	2804      	cmp	r0, #4
 80003fe:	d840      	bhi.n	8000482 <slctCntlFromDrvMode+0xa2>
 8000400:	e8df f000 	tbb	[pc, r0]
 8000404:	150a3f03 	.word	0x150a3f03
 8000408:	2a          	.byte	0x2a
 8000409:	00          	.byte	0x00
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff3e 	bl	800028e <gOffDuty>
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
			break;
		default :
			gOffDuty(Duty, outputMode);
	}
}
 8000412:	b005      	add	sp, #20
 8000414:	f85d fb04 	ldr.w	pc, [sp], #4
			OpenLoopTasks(5.0f * gVolume, sElectAngle, gIuvw, gTwoDivVdc, Duty, outputMode);
 8000418:	4619      	mov	r1, r3
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <slctCntlFromDrvMode+0xb0>)
 800041c:	ed93 1a00 	vldr	s2, [r3]
 8000420:	481c      	ldr	r0, [pc, #112]	; (8000494 <slctCntlFromDrvMode+0xb4>)
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <slctCntlFromDrvMode+0xb8>)
 8000424:	edd3 0a00 	vldr	s1, [r3]
 8000428:	f000 fdc2 	bl	8000fb0 <OpenLoopTasks>
			break;
 800042c:	e7f1      	b.n	8000412 <slctCntlFromDrvMode+0x32>
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2301      	movs	r3, #1
 8000434:	2200      	movs	r2, #0
 8000436:	4916      	ldr	r1, [pc, #88]	; (8000490 <slctCntlFromDrvMode+0xb0>)
 8000438:	edd1 1a00 	vldr	s3, [r1]
 800043c:	4917      	ldr	r1, [pc, #92]	; (800049c <slctCntlFromDrvMode+0xbc>)
 800043e:	ed91 1a00 	vldr	s2, [r1]
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <slctCntlFromDrvMode+0xb4>)
 8000444:	4816      	ldr	r0, [pc, #88]	; (80004a0 <slctCntlFromDrvMode+0xc0>)
 8000446:	edd0 0a00 	vldr	s1, [r0]
 800044a:	4813      	ldr	r0, [pc, #76]	; (8000498 <slctCntlFromDrvMode+0xb8>)
 800044c:	ed90 0a00 	vldr	s0, [r0]
 8000450:	a802      	add	r0, sp, #8
 8000452:	f000 fb35 	bl	8000ac0 <VectorControlTasks>
			break;
 8000456:	e7dc      	b.n	8000412 <slctCntlFromDrvMode+0x32>
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 8000458:	9201      	str	r2, [sp, #4]
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2301      	movs	r3, #1
 800045e:	461a      	mov	r2, r3
 8000460:	490b      	ldr	r1, [pc, #44]	; (8000490 <slctCntlFromDrvMode+0xb0>)
 8000462:	edd1 1a00 	vldr	s3, [r1]
 8000466:	490d      	ldr	r1, [pc, #52]	; (800049c <slctCntlFromDrvMode+0xbc>)
 8000468:	ed91 1a00 	vldr	s2, [r1]
 800046c:	4909      	ldr	r1, [pc, #36]	; (8000494 <slctCntlFromDrvMode+0xb4>)
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <slctCntlFromDrvMode+0xc0>)
 8000470:	edd0 0a00 	vldr	s1, [r0]
 8000474:	4808      	ldr	r0, [pc, #32]	; (8000498 <slctCntlFromDrvMode+0xb8>)
 8000476:	ed90 0a00 	vldr	s0, [r0]
 800047a:	a802      	add	r0, sp, #8
 800047c:	f000 fb20 	bl	8000ac0 <VectorControlTasks>
			break;
 8000480:	e7c7      	b.n	8000412 <slctCntlFromDrvMode+0x32>
			gOffDuty(Duty, outputMode);
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff02 	bl	800028e <gOffDuty>
}
 800048a:	e7c2      	b.n	8000412 <slctCntlFromDrvMode+0x32>
 800048c:	200000c0 	.word	0x200000c0
 8000490:	200000b8 	.word	0x200000b8
 8000494:	200000a0 	.word	0x200000a0
 8000498:	200000e0 	.word	0x200000e0
 800049c:	200000bc 	.word	0x200000bc
 80004a0:	200000dc 	.word	0x200000dc

080004a4 <Sequence>:
void Sequence(void){
 80004a4:	b538      	push	{r3, r4, r5, lr}
	gButton1 = readButton1();
 80004a6:	f000 f88b 	bl	80005c0 <readButton1>
 80004aa:	4b31      	ldr	r3, [pc, #196]	; (8000570 <Sequence+0xcc>)
 80004ac:	7018      	strb	r0, [r3, #0]
	gVolume = readVolume();
 80004ae:	f000 f8c7 	bl	8000640 <readVolume>
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <Sequence+0xd0>)
 80004b4:	ed83 0a00 	vstr	s0, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 80004b8:	492f      	ldr	r1, [pc, #188]	; (8000578 <Sequence+0xd4>)
 80004ba:	4830      	ldr	r0, [pc, #192]	; (800057c <Sequence+0xd8>)
 80004bc:	f000 f8ec 	bl	8000698 <readCurrent>
	gVdc = readVdc();
 80004c0:	f000 f8da 	bl	8000678 <readVdc>
 80004c4:	eef0 0a40 	vmov.f32	s1, s0
 80004c8:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <Sequence+0xdc>)
 80004ca:	ed83 0a00 	vstr	s0, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 80004ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80004d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80004d6:	f7ff fe84 	bl	80001e2 <gfDivideAvoidZero>
 80004da:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <Sequence+0xe0>)
 80004dc:	ed83 0a00 	vstr	s0, [r3]
	readHallSignal(gHall);
 80004e0:	4829      	ldr	r0, [pc, #164]	; (8000588 <Sequence+0xe4>)
 80004e2:	f000 f919 	bl	8000718 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 80004e6:	4829      	ldr	r0, [pc, #164]	; (800058c <Sequence+0xe8>)
 80004e8:	f000 f92e 	bl	8000748 <readElectFreqFromHallSignal>
	if(sInitCnt < 500){
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <Sequence+0xec>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004f4:	d224      	bcs.n	8000540 <Sequence+0x9c>
		sInitCnt++;
 80004f6:	3301      	adds	r3, #1
 80004f8:	4a25      	ldr	r2, [pc, #148]	; (8000590 <Sequence+0xec>)
 80004fa:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <Sequence+0xf0>)
 80004fe:	2202      	movs	r2, #2
 8000500:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <Sequence+0xf4>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <Sequence+0xf8>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	slctElectAngleFromPosMode(sPosMode, &sElectAngle, &sElectAngVelo);
 800050e:	4c24      	ldr	r4, [pc, #144]	; (80005a0 <Sequence+0xfc>)
 8000510:	4d24      	ldr	r5, [pc, #144]	; (80005a4 <Sequence+0x100>)
 8000512:	4622      	mov	r2, r4
 8000514:	4629      	mov	r1, r5
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <Sequence+0xf0>)
 8000518:	7818      	ldrb	r0, [r3, #0]
 800051a:	f7ff ff01 	bl	8000320 <slctElectAngleFromPosMode>
	gTheta = sElectAngle;
 800051e:	682a      	ldr	r2, [r5, #0]
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <Sequence+0x104>)
 8000522:	601a      	str	r2, [r3, #0]
	gElectAngVelo = sElectAngVelo;
 8000524:	6822      	ldr	r2, [r4, #0]
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <Sequence+0x108>)
 8000528:	601a      	str	r2, [r3, #0]
	slctCntlFromDrvMode(sDrvMode, sDuty, sOutputMode);
 800052a:	4c21      	ldr	r4, [pc, #132]	; (80005b0 <Sequence+0x10c>)
 800052c:	4622      	mov	r2, r4
 800052e:	4921      	ldr	r1, [pc, #132]	; (80005b4 <Sequence+0x110>)
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <Sequence+0xf4>)
 8000532:	7818      	ldrb	r0, [r3, #0]
 8000534:	f7ff ff54 	bl	80003e0 <slctCntlFromDrvMode>
	writeOutputMode(sOutputMode);
 8000538:	4620      	mov	r0, r4
 800053a:	f000 f93f 	bl	80007bc <writeOutputMode>
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
	slctPosMode(gElectFreq, &sPosMode);
 8000540:	4d14      	ldr	r5, [pc, #80]	; (8000594 <Sequence+0xf0>)
 8000542:	4c12      	ldr	r4, [pc, #72]	; (800058c <Sequence+0xe8>)
 8000544:	4628      	mov	r0, r5
 8000546:	ed94 0a00 	vldr	s0, [r4]
 800054a:	f7ff feba 	bl	80002c2 <slctPosMode>
	sElectAngVeloRef = 50.0f;// * gVolume;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <Sequence+0x114>)
 8000550:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <Sequence+0x118>)
 8000552:	6013      	str	r3, [r2, #0]
	sElectAngVeloRefRateLimit = sElectAngVeloRef;
 8000554:	4a11      	ldr	r2, [pc, #68]	; (800059c <Sequence+0xf8>)
 8000556:	6013      	str	r3, [r2, #0]
	slctPosMode(gElectFreq, &sPosMode);
 8000558:	4628      	mov	r0, r5
 800055a:	ed94 0a00 	vldr	s0, [r4]
 800055e:	f7ff feb0 	bl	80002c2 <slctPosMode>
	slctDrvMode(gElectFreq, &sDrvMode);
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <Sequence+0xf4>)
 8000564:	ed94 0a00 	vldr	s0, [r4]
 8000568:	f7ff feba 	bl	80002e0 <slctDrvMode>
 800056c:	e7cf      	b.n	800050e <Sequence+0x6a>
 800056e:	bf00      	nop
 8000570:	20000090 	.word	0x20000090
 8000574:	200000c0 	.word	0x200000c0
 8000578:	200000a0 	.word	0x200000a0
 800057c:	200000ac 	.word	0x200000ac
 8000580:	200000bc 	.word	0x200000bc
 8000584:	200000b8 	.word	0x200000b8
 8000588:	2000009c 	.word	0x2000009c
 800058c:	20000098 	.word	0x20000098
 8000590:	200000e8 	.word	0x200000e8
 8000594:	200000ef 	.word	0x200000ef
 8000598:	200000c4 	.word	0x200000c4
 800059c:	200000dc 	.word	0x200000dc
 80005a0:	200000d4 	.word	0x200000d4
 80005a4:	200000e0 	.word	0x200000e0
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	20000094 	.word	0x20000094
 80005b0:	200000ec 	.word	0x200000ec
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	42480000 	.word	0x42480000
 80005bc:	200000d8 	.word	0x200000d8

080005c0 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 80005c0:	b500      	push	{lr}
 80005c2:	b083      	sub	sp, #12
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <readButton1+0x1c>)
 80005ca:	f002 fc35 	bl	8002e38 <HAL_GPIO_ReadPin>
 80005ce:	f88d 0007 	strb.w	r0, [sp, #7]
	return B1;
 80005d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80005d6:	b003      	add	sp, #12
 80005d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80005dc:	48000800 	.word	0x48000800

080005e0 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 80005e0:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 80005e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e8:	9301      	str	r3, [sp, #4]

	return inputCaptureCnt;
 80005ea:	9801      	ldr	r0, [sp, #4]
}
 80005ec:	b002      	add	sp, #8
 80005ee:	4770      	bx	lr

080005f0 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 80005f0:	ee07 0a90 	vmov	s15, r0
 80005f4:	ee00 1a10 	vmov	s0, r1
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 80005f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 80005fe:	1c53      	adds	r3, r2, #1
 8000600:	085b      	lsrs	r3, r3, #1
 8000602:	ee07 3a10 	vmov	s14, r3


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800060e:	ee77 7ac0 	vsub.f32	s15, s15, s0

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000612:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000616:	eeb1 7a47 	vneg.f32	s14, s14
 800061a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000622:	dd05      	ble.n	8000630 <readTimeInterval+0x40>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000624:	ee07 2a10 	vmov	s14, r2
 8000628:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800062c:	ee77 7a87 	vadd.f32	s15, s15, s14

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}
 8000630:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800063c <readTimeInterval+0x4c>
 8000634:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	4c895440 	.word	0x4c895440

08000640 <readVolume>:
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <readVolume+0x2c>)
 8000642:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000646:	3b63      	subs	r3, #99	; 0x63
 8000648:	ee00 3a10 	vmov	s0, r3
 800064c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000650:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000670 <readVolume+0x30>
 8000654:	ee20 0a27 	vmul.f32	s0, s0, s15
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 8000658:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000660:	d400      	bmi.n	8000664 <readVolume+0x24>
	return Volume;
}
 8000662:	4770      	bx	lr
	if( Volume < 0) Volume = 0;
 8000664:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000674 <readVolume+0x34>
	return Volume;
 8000668:	e7fb      	b.n	8000662 <readVolume+0x22>
 800066a:	bf00      	nop
 800066c:	2000008c 	.word	0x2000008c
 8000670:	398007f8 	.word	0x398007f8
 8000674:	00000000 	.word	0x00000000

08000678 <readVdc>:

float readVdc(void){
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <readVdc+0x18>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	ee07 3a90 	vmov	s15, r3
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return Vdc;
}
 8000684:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8000694 <readVdc+0x1c>
 8000688:	ee27 0a80 	vmul.f32	s0, s15, s0
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c
 8000694:	3c7cd035 	.word	0x3c7cd035

08000698 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000698:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 800069a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800069e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 80006a6:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 80006aa:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 80006ac:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80006b0:	8082      	strh	r2, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000708 <readCurrent+0x70>
 80006be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006c2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800070c <readCurrent+0x74>
 80006c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006ca:	edc1 7a00 	vstr	s15, [r1]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 80006ce:	8843      	ldrh	r3, [r0, #2]
 80006d0:	ee07 3a10 	vmov	s14, r3
 80006d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80006d8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000710 <readCurrent+0x78>
 80006dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80006e4:	ed81 7a01 	vstr	s14, [r1, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 80006e8:	8883      	ldrh	r3, [r0, #4]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000714 <readCurrent+0x7c>
 80006f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006fe:	edc1 7a02 	vstr	s15, [r1, #8]
}
 8000702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	44ece000 	.word	0x44ece000
 800070c:	bafdbcc5 	.word	0xbafdbcc5
 8000710:	44eb6000 	.word	0x44eb6000
 8000714:	44e96000 	.word	0x44e96000

08000718 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000718:	b538      	push	{r3, r4, r5, lr}
 800071a:	4604      	mov	r4, r0
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 800071c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f002 fb88 	bl	8002e38 <HAL_GPIO_ReadPin>
 8000728:	7020      	strb	r0, [r4, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 800072a:	4d06      	ldr	r5, [pc, #24]	; (8000744 <readHallSignal+0x2c>)
 800072c:	2108      	movs	r1, #8
 800072e:	4628      	mov	r0, r5
 8000730:	f002 fb82 	bl	8002e38 <HAL_GPIO_ReadPin>
 8000734:	7060      	strb	r0, [r4, #1]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4628      	mov	r0, r5
 800073c:	f002 fb7c 	bl	8002e38 <HAL_GPIO_ReadPin>
 8000740:	70a0      	strb	r0, [r4, #2]
}
 8000742:	bd38      	pop	{r3, r4, r5, pc}
 8000744:	48000400 	.word	0x48000400

08000748 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	4606      	mov	r6, r0
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 800074c:	4c16      	ldr	r4, [pc, #88]	; (80007a8 <readElectFreqFromHallSignal+0x60>)
 800074e:	4d17      	ldr	r5, [pc, #92]	; (80007ac <readElectFreqFromHallSignal+0x64>)
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	6023      	str	r3, [r4, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 8000754:	f7ff ff44 	bl	80005e0 <readInputCaptureCnt>
 8000758:	6028      	str	r0, [r5, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 800075a:	6821      	ldr	r1, [r4, #0]
 800075c:	4288      	cmp	r0, r1
 800075e:	d108      	bne.n	8000772 <readElectFreqFromHallSignal+0x2a>
		if( timeInterval > 0.0001f)
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);

		sNoInputCaptureCnt = 0;
	}
	else if(sNoInputCaptureCnt < 2000)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <readElectFreqFromHallSignal+0x68>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000768:	d21b      	bcs.n	80007a2 <readElectFreqFromHallSignal+0x5a>
		sNoInputCaptureCnt ++;
 800076a:	3301      	adds	r3, #1
 800076c:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <readElectFreqFromHallSignal+0x68>)
 800076e:	8013      	strh	r3, [r2, #0]
 8000770:	e00b      	b.n	800078a <readElectFreqFromHallSignal+0x42>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 8000772:	f7ff ff3d 	bl	80005f0 <readTimeInterval>
		if( timeInterval > 0.0001f)
 8000776:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80007b4 <readElectFreqFromHallSignal+0x6c>
 800077a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000782:	dc03      	bgt.n	800078c <readElectFreqFromHallSignal+0x44>
		sNoInputCaptureCnt = 0;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <readElectFreqFromHallSignal+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	801a      	strh	r2, [r3, #0]
	else
		*electFreq = 0;
}
 800078a:	bd70      	pop	{r4, r5, r6, pc}
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 800078c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80007b8 <readElectFreqFromHallSignal+0x70>
 8000790:	eef0 0a40 	vmov.f32	s1, s0
 8000794:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000798:	f7ff fd23 	bl	80001e2 <gfDivideAvoidZero>
 800079c:	ed86 0a00 	vstr	s0, [r6]
 80007a0:	e7f0      	b.n	8000784 <readElectFreqFromHallSignal+0x3c>
		*electFreq = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	6033      	str	r3, [r6, #0]
}
 80007a6:	e7f0      	b.n	800078a <readElectFreqFromHallSignal+0x42>
 80007a8:	200000f4 	.word	0x200000f4
 80007ac:	200000f0 	.word	0x200000f0
 80007b0:	200000f8 	.word	0x200000f8
 80007b4:	38d1b717 	.word	0x38d1b717
 80007b8:	326e9bfb 	.word	0x326e9bfb

080007bc <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 80007bc:	b510      	push	{r4, lr}
 80007be:	4604      	mov	r4, r0

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 80007c0:	f990 3000 	ldrsb.w	r3, [r0]
 80007c4:	b9c3      	cbnz	r3, 80007f8 <writeOutputMode+0x3c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <writeOutputMode+0x68>)
 80007ce:	f002 fb3a 	bl	8002e46 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);

	if(outputMode[1] == OUTPUTMODE_OPEN )
 80007d2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80007d6:	b9b3      	cbnz	r3, 8000806 <writeOutputMode+0x4a>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <writeOutputMode+0x68>)
 80007e0:	f002 fb31 	bl	8002e46 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);

	if(outputMode[2] == OUTPUTMODE_OPEN )
 80007e4:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80007e8:	b9a3      	cbnz	r3, 8000814 <writeOutputMode+0x58>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <writeOutputMode+0x68>)
 80007f2:	f002 fb28 	bl	8002e46 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 80007f6:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <writeOutputMode+0x68>)
 8000800:	f002 fb21 	bl	8002e46 <HAL_GPIO_WritePin>
 8000804:	e7e5      	b.n	80007d2 <writeOutputMode+0x16>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <writeOutputMode+0x68>)
 800080e:	f002 fb1a 	bl	8002e46 <HAL_GPIO_WritePin>
 8000812:	e7e7      	b.n	80007e4 <writeOutputMode+0x28>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081a:	4802      	ldr	r0, [pc, #8]	; (8000824 <writeOutputMode+0x68>)
 800081c:	f002 fb13 	bl	8002e46 <HAL_GPIO_WritePin>
}
 8000820:	e7e9      	b.n	80007f6 <writeOutputMode+0x3a>
 8000822:	bf00      	nop
 8000824:	48000800 	.word	0x48000800

08000828 <writeDuty>:

void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000828:	ed90 7a00 	vldr	s14, [r0]
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <writeDuty+0x4c>)
 800082e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800083a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000842:	ed90 7a01 	vldr	s14, [r0, #4]
 8000846:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800084a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000856:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 800085a:	ed90 7a02 	vldr	s14, [r0, #8]
 800085e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8000872:	4770      	bx	lr
 8000874:	40012c00 	.word	0x40012c00

08000878 <calcVoltageMode>:

	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000878:	7883      	ldrb	r3, [r0, #2]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	7842      	ldrb	r2, [r0, #1]
 8000880:	0052      	lsls	r2, r2, #1
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	4413      	add	r3, r2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	7800      	ldrb	r0, [r0, #0]
 800088a:	4418      	add	r0, r3
 800088c:	b2c0      	uxtb	r0, r0

	// Decode digital signal to voltage mode
	switch(hallInput){
 800088e:	1e43      	subs	r3, r0, #1
 8000890:	2b05      	cmp	r3, #5
 8000892:	d80c      	bhi.n	80008ae <calcVoltageMode+0x36>
 8000894:	e8df f003 	tbb	[pc, r3]
 8000898:	050e0d09 	.word	0x050e0d09
 800089c:	0307      	.short	0x0307
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 800089e:	2005      	movs	r0, #5
		break;
 80008a0:	4770      	bx	lr
	  case 4:
		voltageMode = 6;
 80008a2:	2006      	movs	r0, #6
		break;
 80008a4:	4770      	bx	lr
	  case 5:
		voltageMode = 1;
 80008a6:	2001      	movs	r0, #1
		break;
 80008a8:	4770      	bx	lr
	  case 1:
		voltageMode = 2;
 80008aa:	2002      	movs	r0, #2
		break;
 80008ac:	4770      	bx	lr
	  default :
		voltageMode = 0;
 80008ae:	2000      	movs	r0, #0
	  break;
 80008b0:	4770      	bx	lr
		voltageMode = 4;
 80008b2:	2004      	movs	r0, #4
	}
	return voltageMode;
}
 80008b4:	4770      	bx	lr
	...

080008b8 <calcElectAngle>:
void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 80008b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008bc:	ed2d 8b04 	vpush	{d8-d9}
 80008c0:	4680      	mov	r8, r0
 80008c2:	eef0 8a40 	vmov.f32	s17, s0
 80008c6:	460d      	mov	r5, r1
 80008c8:	4617      	mov	r7, r2
 80008ca:	461e      	mov	r6, r3
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80008cc:	4c65      	ldr	r4, [pc, #404]	; (8000a64 <calcElectAngle+0x1ac>)
 80008ce:	ed94 0a00 	vldr	s0, [r4]
	wc_PLL = gUpperLowerLimit(wc_PLL, 100.0f, 0.0f);
 80008d2:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8000a68 <calcElectAngle+0x1b0>
 80008d6:	eddf 0a65 	vldr	s1, [pc, #404]	; 8000a6c <calcElectAngle+0x1b4>
 80008da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80008de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80008e2:	f7ff fcc1 	bl	8000268 <gUpperLowerLimit>
 80008e6:	eeb0 9a40 	vmov.f32	s18, s0
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80008ea:	ed94 7a00 	vldr	s14, [r4]
 80008ee:	eddf 7a60 	vldr	s15, [pc, #384]	; 8000a70 <calcElectAngle+0x1b8>
 80008f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80008fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000902:	ee87 8a87 	vdiv.f32	s16, s15, s14
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000906:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8000a74 <calcElectAngle+0x1bc>
 800090a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800090e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000912:	ee27 8a88 	vmul.f32	s16, s15, s16
	sVoltageMode_pre = sVoltageMode;
 8000916:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8000abc <calcElectAngle+0x204>
 800091a:	f899 4000 	ldrb.w	r4, [r9]
 800091e:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <calcElectAngle+0x1c0>)
 8000920:	701c      	strb	r4, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8000922:	4640      	mov	r0, r8
 8000924:	f7ff ffa8 	bl	8000878 <calcVoltageMode>
 8000928:	f889 0000 	strb.w	r0, [r9]
	sElectAngleActual_pre = sElectAngleActual;
 800092c:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <calcElectAngle+0x1c4>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <calcElectAngle+0x1c8>)
 8000932:	601a      	str	r2, [r3, #0]

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8000934:	1b04      	subs	r4, r0, r4
 8000936:	b2e3      	uxtb	r3, r4
 8000938:	b264      	sxtb	r4, r4

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 800093a:	2c01      	cmp	r4, #1
 800093c:	dd11      	ble.n	8000962 <calcElectAngle+0xaa>
		voltageMode_Diff -= 6;
 800093e:	3b06      	subs	r3, #6
 8000940:	b25c      	sxtb	r4, r3
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8000942:	b10c      	cbz	r4, 8000948 <calcElectAngle+0x90>
		*rotDir = voltageMode_Diff;
 8000944:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <calcElectAngle+0x1cc>)
 8000946:	701c      	strb	r4, [r3, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000948:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <calcElectAngle+0x1cc>)
 800094a:	f993 3000 	ldrsb.w	r3, [r3]
 800094e:	ee07 3a90 	vmov	s15, r3
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 8000952:	3801      	subs	r0, #1
 8000954:	2805      	cmp	r0, #5
 8000956:	d80a      	bhi.n	800096e <calcElectAngle+0xb6>
 8000958:	e8df f000 	tbb	[pc, r0]
 800095c:	18091512 	.word	0x18091512
 8000960:	0f0c      	.short	0x0f0c
	else if(voltageMode_Diff < -1)
 8000962:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000966:	daec      	bge.n	8000942 <calcElectAngle+0x8a>
		voltageMode_Diff += 6;
 8000968:	3306      	adds	r3, #6
 800096a:	b25c      	sxtb	r4, r3
 800096c:	e7e9      	b.n	8000942 <calcElectAngle+0x8a>
		switch(voltageMode){
 800096e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000a68 <calcElectAngle+0x1b0>
 8000972:	e00d      	b.n	8000990 <calcElectAngle+0xd8>
			break;
		  case 4:
			  electAngle_Center = PIDIV3;
			break;
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 8000974:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000a88 <calcElectAngle+0x1d0>
			break;
 8000978:	e00a      	b.n	8000990 <calcElectAngle+0xd8>
		  case 6:
			  electAngle_Center = PI;
 800097a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000a8c <calcElectAngle+0x1d4>
			break;
 800097e:	e007      	b.n	8000990 <calcElectAngle+0xd8>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 8000980:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000a90 <calcElectAngle+0x1d8>
			break;
 8000984:	e004      	b.n	8000990 <calcElectAngle+0xd8>
		  case 2:
			  electAngle_Center = -PIDIV3;
 8000986:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000a94 <calcElectAngle+0x1dc>
			break;
 800098a:	e001      	b.n	8000990 <calcElectAngle+0xd8>
			  electAngle_Center = PIDIV3;
 800098c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000a98 <calcElectAngle+0x1e0>
		  default :
			  electAngle_Center = 0.0f;
		  break;
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8000a9c <calcElectAngle+0x1e4>
 8000998:	ee67 7a80 	vmul.f32	s15, s15, s0
 800099c:	ee37 0a67 	vsub.f32	s0, s14, s15
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 80009a0:	4c36      	ldr	r4, [pc, #216]	; (8000a7c <calcElectAngle+0x1c4>)
 80009a2:	ed84 0a00 	vstr	s0, [r4]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 80009a6:	f7ff fc3b 	bl	8000220 <gfWrapTheta>
 80009aa:	ed84 0a00 	vstr	s0, [r4]
	sFlgPLL_pre = sFlgPLL;
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <calcElectAngle+0x1e8>)
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	493c      	ldr	r1, [pc, #240]	; (8000aa4 <calcElectAngle+0x1ec>)
 80009b4:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 80009b6:	701d      	strb	r5, [r3, #0]
	if(flgPLL == 1){
 80009b8:	2d01      	cmp	r5, #1
 80009ba:	d013      	beq.n	80009e4 <calcElectAngle+0x12c>
		sElectAngleEstimate = sElectAngleActual;
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <calcElectAngle+0x1f0>)
 80009be:	ed83 0a00 	vstr	s0, [r3]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80009c2:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8000aac <calcElectAngle+0x1f4>
 80009c6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <calcElectAngle+0x1ac>)
 80009cc:	edc3 8a00 	vstr	s17, [r3]
	*electAngle = sElectAngleEstimate;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <calcElectAngle+0x1f0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	603b      	str	r3, [r7, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <calcElectAngle+0x1ac>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6033      	str	r3, [r6, #0]
}
 80009dc:	ecbd 8b04 	vpop	{d8-d9}
 80009e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ( sFlgPLL_pre == 0 ){
 80009e4:	b962      	cbnz	r2, 8000a00 <calcElectAngle+0x148>
			sElectAngVeloEstimate = electFreq * TWOPI;
 80009e6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8000aac <calcElectAngle+0x1f4>
 80009ea:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <calcElectAngle+0x1ac>)
 80009f0:	edc3 8a00 	vstr	s17, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <calcElectAngle+0x1f8>)
 80009f6:	edc3 8a00 	vstr	s17, [r3]
			sElectAngleEstimate = sElectAngleActual;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <calcElectAngle+0x1f0>)
 80009fc:	ed83 0a00 	vstr	s0, [r3]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <calcElectAngle+0x1ac>)
 8000a02:	ed93 7a00 	vldr	s14, [r3]
 8000a06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8000ab4 <calcElectAngle+0x1fc>
 8000a0a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8000a0e:	4c26      	ldr	r4, [pc, #152]	; (8000aa8 <calcElectAngle+0x1f0>)
 8000a10:	edd4 7a00 	vldr	s15, [r4]
 8000a14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000a18:	ed84 0a00 	vstr	s0, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000a1c:	f7ff fc00 	bl	8000220 <gfWrapTheta>
 8000a20:	ed84 0a00 	vstr	s0, [r4]
		if( sElectAngleActual != sElectAngleActual_pre){
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <calcElectAngle+0x1c4>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <calcElectAngle+0x1c8>)
 8000a2c:	ed93 7a00 	vldr	s14, [r3]
 8000a30:	eef4 7a47 	vcmp.f32	s15, s14
 8000a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a38:	d0ca      	beq.n	80009d0 <calcElectAngle+0x118>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000a3a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8000a3e:	4c1e      	ldr	r4, [pc, #120]	; (8000ab8 <calcElectAngle+0x200>)
 8000a40:	ed84 0a00 	vstr	s0, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000a44:	f7ff fbec 	bl	8000220 <gfWrapTheta>
 8000a48:	ed84 0a00 	vstr	s0, [r4]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <calcElectAngle+0x1f8>)
 8000a4e:	eeb0 1a48 	vmov.f32	s2, s16
 8000a52:	eef0 0a49 	vmov.f32	s1, s18
 8000a56:	f7ff fbb7 	bl	80001c8 <cfPhaseLockedLoop>
 8000a5a:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <calcElectAngle+0x1ac>)
 8000a5c:	ed83 0a00 	vstr	s0, [r3]
 8000a60:	e7b6      	b.n	80009d0 <calcElectAngle+0x118>
 8000a62:	bf00      	nop
 8000a64:	200000fc 	.word	0x200000fc
 8000a68:	00000000 	.word	0x00000000
 8000a6c:	42c80000 	.word	0x42c80000
 8000a70:	3e22f983 	.word	0x3e22f983
 8000a74:	3e4ccccd 	.word	0x3e4ccccd
 8000a78:	2000011a 	.word	0x2000011a
 8000a7c:	20000100 	.word	0x20000100
 8000a80:	20000104 	.word	0x20000104
 8000a84:	20000118 	.word	0x20000118
 8000a88:	40060a92 	.word	0x40060a92
 8000a8c:	40490fdb 	.word	0x40490fdb
 8000a90:	c0060a92 	.word	0xc0060a92
 8000a94:	bf860a92 	.word	0xbf860a92
 8000a98:	3f860a92 	.word	0x3f860a92
 8000a9c:	3f060a92 	.word	0x3f060a92
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	20000111 	.word	0x20000111
 8000aa8:	2000010c 	.word	0x2000010c
 8000aac:	40c90fdb 	.word	0x40c90fdb
 8000ab0:	20000114 	.word	0x20000114
 8000ab4:	468ca000 	.word	0x468ca000
 8000ab8:	20000108 	.word	0x20000108
 8000abc:	20000119 	.word	0x20000119

08000ac0 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, float *Igd, float electAngVelo, float Vdc, float *Vgd, float* Vamp);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo, float* Egd);
static inline void calcElectAngleEstimate(uint8_t flgPLL, float electAngle, float electAngVelo, float *electAngleEstimate, float *electAngVeloEstimate);

void VectorControlTasks(float *Idq_ref, float electAngle, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, uint8_t flgPLL, float* Duty, int8_t* outputMode){
 8000ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ac4:	ed2d 8b08 	vpush	{d8-d11}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	4605      	mov	r5, r0
 8000acc:	eeb0 aa40 	vmov.f32	s20, s0
 8000ad0:	eef0 aa60 	vmov.f32	s21, s1
 8000ad4:	460e      	mov	r6, r1
 8000ad6:	eef0 9a41 	vmov.f32	s19, s2
 8000ada:	eef0 8a61 	vmov.f32	s17, s3
 8000ade:	4698      	mov	r8, r3
 8000ae0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000ae2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	sElectAngleErr = FluxObserver(sIdq, sVdq, *electAngleEstimate, sEdq);
 8000ae4:	4bed      	ldr	r3, [pc, #948]	; (8000e9c <VectorControlTasks+0x3dc>)
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8000aea:	4aed      	ldr	r2, [pc, #948]	; (8000ea0 <VectorControlTasks+0x3e0>)
 8000aec:	ed92 0a00 	vldr	s0, [r2]
 8000af0:	4bec      	ldr	r3, [pc, #944]	; (8000ea4 <VectorControlTasks+0x3e4>)
 8000af2:	edd3 6a00 	vldr	s13, [r3]
 8000af6:	ed9f 6aec 	vldr	s12, [pc, #944]	; 8000ea8 <VectorControlTasks+0x3e8>
 8000afa:	ee26 7a86 	vmul.f32	s14, s13, s12
 8000afe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8000b02:	eddf 0aea 	vldr	s1, [pc, #936]	; 8000eac <VectorControlTasks+0x3ec>
 8000b06:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8000b0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b0e:	ee67 5a87 	vmul.f32	s11, s15, s14
 8000b12:	ee30 0a25 	vadd.f32	s0, s0, s11
 8000b16:	4be6      	ldr	r3, [pc, #920]	; (8000eb0 <VectorControlTasks+0x3f0>)
 8000b18:	ed83 0a00 	vstr	s0, [r3]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8000b1c:	edd2 0a01 	vldr	s1, [r2, #4]
 8000b20:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000b24:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8000b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b2c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8000b30:	edc3 0a01 	vstr	s1, [r3, #4]
	angleErr = atan2f(-1.0f * sEdq[0], sEdq[1]); //推定q軸を基準とした実q軸との誤差を算出
 8000b34:	eeb1 0a40 	vneg.f32	s0, s0
 8000b38:	f004 f8d0 	bl	8004cdc <atan2f>
	sElectAngleErr = FluxObserver(sIdq, sVdq, *electAngleEstimate, sEdq);
 8000b3c:	4bdd      	ldr	r3, [pc, #884]	; (8000eb4 <VectorControlTasks+0x3f4>)
 8000b3e:	ed83 0a00 	vstr	s0, [r3]

	if( flgPLL == 0){
 8000b42:	f1b8 0f00 	cmp.w	r8, #0
 8000b46:	f040 81f3 	bne.w	8000f30 <VectorControlTasks+0x470>
		*electAngVeloEstimate = electAngVelo;
 8000b4a:	4bdb      	ldr	r3, [pc, #876]	; (8000eb8 <VectorControlTasks+0x3f8>)
 8000b4c:	edc3 aa00 	vstr	s21, [r3]
		*electAngleEstimate = electAngle;
 8000b50:	4bd2      	ldr	r3, [pc, #840]	; (8000e9c <VectorControlTasks+0x3dc>)
 8000b52:	ed83 aa00 	vstr	s20, [r3]
		sIntegral_ElectAngleErr_Ki = electAngVelo;
 8000b56:	4bd9      	ldr	r3, [pc, #868]	; (8000ebc <VectorControlTasks+0x3fc>)
 8000b58:	edc3 aa00 	vstr	s21, [r3]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	703b      	strb	r3, [r7, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8000b60:	707b      	strb	r3, [r7, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8000b62:	70bb      	strb	r3, [r7, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8000b64:	ed96 8a00 	vldr	s16, [r6]
 8000b68:	ed96 7a01 	vldr	s14, [r6, #4]
 8000b6c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000b70:	ee67 7a26 	vmul.f32	s15, s14, s13
 8000b74:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000b78:	ed96 6a02 	vldr	s12, [r6, #8]
 8000b7c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8000b80:	ee38 8a66 	vsub.f32	s16, s16, s13
 8000b84:	eddf 7ace 	vldr	s15, [pc, #824]	; 8000ec0 <VectorControlTasks+0x400>
 8000b88:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000b8c:	4bcd      	ldr	r3, [pc, #820]	; (8000ec4 <VectorControlTasks+0x404>)
 8000b8e:	ed83 8a00 	vstr	s16, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8000b92:	eddf 6acd 	vldr	s13, [pc, #820]	; 8000ec8 <VectorControlTasks+0x408>
 8000b96:	ee27 9a26 	vmul.f32	s18, s14, s13
 8000b9a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8000b9e:	ee39 9a66 	vsub.f32	s18, s18, s13
 8000ba2:	ee29 9a27 	vmul.f32	s18, s18, s15
 8000ba6:	ed83 9a01 	vstr	s18, [r3, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8000baa:	edd6 7a00 	vldr	s15, [r6]
 8000bae:	ed96 7a01 	vldr	s14, [r6, #4]
 8000bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bb6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000bba:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8000ecc <VectorControlTasks+0x40c>
 8000bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc2:	edc3 7a02 	vstr	s15, [r3, #8]
	sinTheta = sinf(theta);
 8000bc6:	eeb0 0a4a 	vmov.f32	s0, s20
 8000bca:	f004 f841 	bl	8004c50 <sinf>
 8000bce:	eeb0 ba40 	vmov.f32	s22, s0
	cosTheta = cosf(theta);
 8000bd2:	eeb0 0a4a 	vmov.f32	s0, s20
 8000bd6:	f003 fff7 	bl	8004bc8 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000bda:	ee60 7a08 	vmul.f32	s15, s0, s16
 8000bde:	ee2b 7a09 	vmul.f32	s14, s22, s18
 8000be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000be6:	4eaf      	ldr	r6, [pc, #700]	; (8000ea4 <VectorControlTasks+0x3e4>)
 8000be8:	edc6 7a00 	vstr	s15, [r6]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000bec:	ee28 8a4b 	vnmul.f32	s16, s16, s22
 8000bf0:	ee20 0a09 	vmul.f32	s0, s0, s18
 8000bf4:	ee38 8a00 	vadd.f32	s16, s16, s0
 8000bf8:	ed86 8a01 	vstr	s16, [r6, #4]
	gLPF(Idq_ref[1], 62.8f, CARRIERCYCLE, &sIq_ref_LPF);
 8000bfc:	4fb4      	ldr	r7, [pc, #720]	; (8000ed0 <VectorControlTasks+0x410>)
 8000bfe:	4638      	mov	r0, r7
 8000c00:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8000ed4 <VectorControlTasks+0x414>
 8000c04:	eddf 0ab4 	vldr	s1, [pc, #720]	; 8000ed8 <VectorControlTasks+0x418>
 8000c08:	ed95 0a01 	vldr	s0, [r5, #4]
 8000c0c:	f7ff fb48 	bl	80002a0 <gLPF>
	Idq_ref[1] = sIq_ref_LPF; // zanteisyori
 8000c10:	ed97 7a00 	vldr	s14, [r7]
 8000c14:	ed85 7a01 	vstr	s14, [r5, #4]
	Ierr[0] = Igd_ref[0] - Igd[0];
 8000c18:	edd5 6a00 	vldr	s13, [r5]
 8000c1c:	edd6 0a00 	vldr	s1, [r6]
 8000c20:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8000c24:	edcd 6a00 	vstr	s13, [sp]
	Ierr[1] = Igd_ref[1] - Igd[1];
 8000c28:	ed96 0a01 	vldr	s0, [r6, #4]
 8000c2c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8000c30:	ed8d 7a01 	vstr	s14, [sp, #4]
	sVdq_i[0] += Kig * Ierr[0];
 8000c34:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8000edc <VectorControlTasks+0x41c>
 8000c38:	ee66 0aa7 	vmul.f32	s1, s13, s15
 8000c3c:	4ba8      	ldr	r3, [pc, #672]	; (8000ee0 <VectorControlTasks+0x420>)
 8000c3e:	ed93 6a00 	vldr	s12, [r3]
 8000c42:	ee70 0a86 	vadd.f32	s1, s1, s12
 8000c46:	edc3 0a00 	vstr	s1, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	ed93 0a01 	vldr	s0, [r3, #4]
 8000c52:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000c56:	edc3 7a01 	vstr	s15, [r3, #4]
	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 8000c5a:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8000ee4 <VectorControlTasks+0x424>
 8000c5e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8000c62:	ee70 0aa6 	vadd.f32	s1, s1, s13
 8000c66:	4e8e      	ldr	r6, [pc, #568]	; (8000ea0 <VectorControlTasks+0x3e0>)
 8000c68:	edc6 0a00 	vstr	s1, [r6]
	Vgd[1] = Kp * Ierr[1] + sVdq_i[1];// + Ke * electAngVelo;// + Vgd[1] + Kid * Ierr[1] + ;
 8000c6c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8000c70:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000c74:	ed86 0a01 	vstr	s0, [r6, #4]
	Vphase = atan2f(Vgd[1], Vgd[0]);
 8000c78:	f004 f830 	bl	8004cdc <atan2f>
 8000c7c:	eeb0 9a40 	vmov.f32	s18, s0
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8000c80:	edd6 7a00 	vldr	s15, [r6]
 8000c84:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8000c88:	edd6 7a01 	vldr	s15, [r6, #4]
 8000c8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8000c90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000c94:	f004 f844 	bl	8004d20 <sqrtf>
	*Vamp = calcAmpFromVect(Vgd);
 8000c98:	4b93      	ldr	r3, [pc, #588]	; (8000ee8 <VectorControlTasks+0x428>)
 8000c9a:	ed83 0a00 	vstr	s0, [r3]
	VampLimit = Vdc * SQRT3DIV2_DIV2 * 1.15f;
 8000c9e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8000eec <VectorControlTasks+0x42c>
 8000ca2:	ee29 8a88 	vmul.f32	s16, s19, s16
 8000ca6:	ed9f 1a92 	vldr	s2, [pc, #584]	; 8000ef0 <VectorControlTasks+0x430>
 8000caa:	ee28 8a01 	vmul.f32	s16, s16, s2
	if( *Vamp > VampLimit ){
 8000cae:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	d51b      	bpl.n	8000cf0 <VectorControlTasks+0x230>
		Vgd[0] = VampLimit * cosf(Vphase);
 8000cb8:	eeb0 0a49 	vmov.f32	s0, s18
 8000cbc:	f003 ff84 	bl	8004bc8 <cosf>
 8000cc0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8000cc4:	4637      	mov	r7, r6
 8000cc6:	ed86 0a00 	vstr	s0, [r6]
		sVdq_i[0] = Vgd[0];
 8000cca:	4e85      	ldr	r6, [pc, #532]	; (8000ee0 <VectorControlTasks+0x420>)
 8000ccc:	ed86 0a00 	vstr	s0, [r6]
		Vgd[1] = VampLimit * sinf(Vphase);
 8000cd0:	eeb0 0a49 	vmov.f32	s0, s18
 8000cd4:	f003 ffbc 	bl	8004c50 <sinf>
 8000cd8:	ee28 8a00 	vmul.f32	s16, s16, s0
 8000cdc:	ed87 8a01 	vstr	s16, [r7, #4]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 8000ce0:	eddf 0a84 	vldr	s1, [pc, #528]	; 8000ef4 <VectorControlTasks+0x434>
 8000ce4:	ee6a aaa0 	vmul.f32	s21, s21, s1
 8000ce8:	ee38 8a6a 	vsub.f32	s16, s16, s21
 8000cec:	ed86 8a01 	vstr	s16, [r6, #4]
	sMod = calcModFromVamp(sVamp, twoDivVdc);
 8000cf0:	4b7d      	ldr	r3, [pc, #500]	; (8000ee8 <VectorControlTasks+0x428>)
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8000cf6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8000cfa:	ed9f 9a71 	vldr	s18, [pc, #452]	; 8000ec0 <VectorControlTasks+0x400>
 8000cfe:	ee67 7a89 	vmul.f32	s15, s15, s18
	sMod = calcModFromVamp(sVamp, twoDivVdc);
 8000d02:	4b7d      	ldr	r3, [pc, #500]	; (8000ef8 <VectorControlTasks+0x438>)
 8000d04:	edc3 7a00 	vstr	s15, [r3]
	sinTheta = sinf(theta);
 8000d08:	eeb0 0a4a 	vmov.f32	s0, s20
 8000d0c:	f003 ffa0 	bl	8004c50 <sinf>
 8000d10:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8000d14:	eeb0 0a4a 	vmov.f32	s0, s20
 8000d18:	f003 ff56 	bl	8004bc8 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000d1c:	4b60      	ldr	r3, [pc, #384]	; (8000ea0 <VectorControlTasks+0x3e0>)
 8000d1e:	edd3 6a00 	vldr	s13, [r3]
 8000d22:	ee20 7a26 	vmul.f32	s14, s0, s13
 8000d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d2a:	ee28 6a27 	vmul.f32	s12, s16, s15
 8000d2e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000d32:	4b72      	ldr	r3, [pc, #456]	; (8000efc <VectorControlTasks+0x43c>)
 8000d34:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000d38:	ee28 8a26 	vmul.f32	s16, s16, s13
 8000d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000d40:	ee38 8a00 	vadd.f32	s16, s16, s0
 8000d44:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8000d48:	ee27 0a09 	vmul.f32	s0, s14, s18
 8000d4c:	4b6c      	ldr	r3, [pc, #432]	; (8000f00 <VectorControlTasks+0x440>)
 8000d4e:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 8000d52:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8000d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d5a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000ec8 <VectorControlTasks+0x408>
 8000d5e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8000d62:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000d66:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000d6a:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8000d6e:	eeb1 7a40 	vneg.f32	s14, s0
 8000d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d76:	ed83 7a02 	vstr	s14, [r3, #8]
	if(Vuvw[1] > max)
 8000d7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	f100 80fb 	bmi.w	8000f7c <VectorControlTasks+0x4bc>
	max = Vuvw[0];
 8000d86:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <VectorControlTasks+0x440>)
 8000d8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d90:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d98:	dd01      	ble.n	8000d9e <VectorControlTasks+0x2de>
		max = Vuvw[2];
 8000d9a:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 8000d9e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da6:	f300 80ec 	bgt.w	8000f82 <VectorControlTasks+0x4c2>
	min = Vuvw[0];
 8000daa:	eeb0 6a40 	vmov.f32	s12, s0
	if(Vuvw[2] < min)
 8000dae:	eef4 6ac6 	vcmpe.f32	s13, s12
 8000db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db6:	d501      	bpl.n	8000dbc <VectorControlTasks+0x2fc>
		min = Vuvw[2];
 8000db8:	eeb0 6a66 	vmov.f32	s12, s13
	vo = (max + min) * 0.5f;
 8000dbc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8000dc0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8000dc4:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 8000dc8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8000dcc:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <VectorControlTasks+0x440>)
 8000dce:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8000dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dd6:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 8000dda:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8000dde:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8000de2:	ee28 0a80 	vmul.f32	s0, s17, s0
 8000de6:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8000dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000df2:	edc4 7a01 	vstr	s15, [r4, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8000df6:	edd3 1a02 	vldr	s3, [r3, #8]
 8000dfa:	ee68 8aa1 	vmul.f32	s17, s17, s3
 8000dfe:	edc4 8a02 	vstr	s17, [r4, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8000e02:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000e06:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e0a:	f7ff fa2d 	bl	8000268 <gUpperLowerLimit>
 8000e0e:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8000e12:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000e16:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e1a:	ed94 0a01 	vldr	s0, [r4, #4]
 8000e1e:	f7ff fa23 	bl	8000268 <gUpperLowerLimit>
 8000e22:	ed84 0a01 	vstr	s0, [r4, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8000e26:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000e2a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e2e:	ed94 0a02 	vldr	s0, [r4, #8]
 8000e32:	f7ff fa19 	bl	8000268 <gUpperLowerLimit>
 8000e36:	ed84 0a02 	vstr	s0, [r4, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8000e3a:	edd4 7a00 	vldr	s15, [r4]
 8000e3e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000e42:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000e46:	edc4 7a00 	vstr	s15, [r4]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8000e4a:	edd4 7a01 	vldr	s15, [r4, #4]
 8000e4e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000e52:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000e56:	edc4 7a01 	vstr	s15, [r4, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8000e5a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8000e5e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000e62:	ed84 0a02 	vstr	s0, [r4, #8]
	sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 8000e66:	ed95 7a00 	vldr	s14, [r5]
 8000e6a:	eddf 7a26 	vldr	s15, [pc, #152]	; 8000f04 <VectorControlTasks+0x444>
 8000e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <VectorControlTasks+0x448>)
 8000e74:	ed83 7a00 	vstr	s14, [r3]
	sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8000e78:	ed95 7a01 	vldr	s14, [r5, #4]
 8000e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e80:	ed83 7a01 	vstr	s14, [r3, #4]
	sIdq_1000[0] = sIdq[0] * 1000.0f;
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <VectorControlTasks+0x3e4>)
 8000e86:	ed92 7a00 	vldr	s14, [r2]
 8000e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <VectorControlTasks+0x44c>)
 8000e90:	ed83 7a00 	vstr	s14, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 8000e94:	ed92 0a01 	vldr	s0, [r2, #4]
 8000e98:	e03a      	b.n	8000f10 <VectorControlTasks+0x450>
 8000e9a:	bf00      	nop
 8000e9c:	2000012c 	.word	0x2000012c
 8000ea0:	20000170 	.word	0x20000170
 8000ea4:	2000013c 	.word	0x2000013c
 8000ea8:	3cf5c28f 	.word	0x3cf5c28f
 8000eac:	3849539c 	.word	0x3849539c
 8000eb0:	2000011c 	.word	0x2000011c
 8000eb4:	20000128 	.word	0x20000128
 8000eb8:	20000124 	.word	0x20000124
 8000ebc:	20000154 	.word	0x20000154
 8000ec0:	3f5105ec 	.word	0x3f5105ec
 8000ec4:	20000130 	.word	0x20000130
 8000ec8:	3f5db3d7 	.word	0x3f5db3d7
 8000ecc:	3f13cd3a 	.word	0x3f13cd3a
 8000ed0:	2000015c 	.word	0x2000015c
 8000ed4:	38690453 	.word	0x38690453
 8000ed8:	427b3333 	.word	0x427b3333
 8000edc:	38db9cfe 	.word	0x38db9cfe
 8000ee0:	20000178 	.word	0x20000178
 8000ee4:	3b45a6e5 	.word	0x3b45a6e5
 8000ee8:	2000016c 	.word	0x2000016c
 8000eec:	3f1cc471 	.word	0x3f1cc471
 8000ef0:	3f933333 	.word	0x3f933333
 8000ef4:	3c449ba6 	.word	0x3c449ba6
 8000ef8:	20000160 	.word	0x20000160
 8000efc:	20000164 	.word	0x20000164
 8000f00:	20000180 	.word	0x20000180
 8000f04:	447a0000 	.word	0x447a0000
 8000f08:	2000014c 	.word	0x2000014c
 8000f0c:	20000144 	.word	0x20000144
 8000f10:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000f14:	edc3 7a01 	vstr	s15, [r3, #4]
	gLPF(sIdq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 8000f18:	481b      	ldr	r0, [pc, #108]	; (8000f88 <VectorControlTasks+0x4c8>)
 8000f1a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8000f8c <VectorControlTasks+0x4cc>
 8000f1e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8000f90 <VectorControlTasks+0x4d0>
 8000f22:	f7ff f9bd 	bl	80002a0 <gLPF>
}
 8000f26:	b003      	add	sp, #12
 8000f28:	ecbd 8b08 	vpop	{d8-d11}
 8000f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Ts_PLL = CARRIERCYCLE;
		Kp_PLL = wc_PLL;
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;

		// Estimate Electrical Angle & Velocity using PLL
		*electAngleEstimate += (*electAngVeloEstimate) * CARRIERCYCLE;
 8000f30:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000fa4 <VectorControlTasks+0x4e4>
 8000f34:	ed99 7a00 	vldr	s14, [r9]
 8000f38:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000f94 <VectorControlTasks+0x4d4>
 8000f3c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8000f40:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8000fa8 <VectorControlTasks+0x4e8>
 8000f44:	edd8 7a00 	vldr	s15, [r8]
 8000f48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000f4c:	ed88 0a00 	vstr	s0, [r8]
		*electAngleEstimate = gfWrapTheta(*electAngleEstimate);
 8000f50:	f7ff f966 	bl	8000220 <gfWrapTheta>
 8000f54:	ed88 0a00 	vstr	s0, [r8]

		// wrap Electrical Angle Err
		sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000f58:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8000fac <VectorControlTasks+0x4ec>
 8000f5c:	ed98 0a00 	vldr	s0, [r8]
 8000f60:	f7ff f95e 	bl	8000220 <gfWrapTheta>
 8000f64:	ed88 0a00 	vstr	s0, [r8]

		//PLL
		*electAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <VectorControlTasks+0x4d8>)
 8000f6a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8000f9c <VectorControlTasks+0x4dc>
 8000f6e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8000fa0 <VectorControlTasks+0x4e0>
 8000f72:	f7ff f929 	bl	80001c8 <cfPhaseLockedLoop>
 8000f76:	ed89 0a00 	vstr	s0, [r9]
 8000f7a:	e5ef      	b.n	8000b5c <VectorControlTasks+0x9c>
		max = Vuvw[1];
 8000f7c:	eeb0 7a67 	vmov.f32	s14, s15
 8000f80:	e703      	b.n	8000d8a <VectorControlTasks+0x2ca>
		min = Vuvw[1];
 8000f82:	eeb0 6a67 	vmov.f32	s12, s15
 8000f86:	e712      	b.n	8000dae <VectorControlTasks+0x2ee>
 8000f88:	20000158 	.word	0x20000158
 8000f8c:	38690453 	.word	0x38690453
 8000f90:	42fb3333 	.word	0x42fb3333
 8000f94:	468ca000 	.word	0x468ca000
 8000f98:	20000154 	.word	0x20000154
 8000f9c:	3f8c5e23 	.word	0x3f8c5e23
 8000fa0:	439d1463 	.word	0x439d1463
 8000fa4:	20000124 	.word	0x20000124
 8000fa8:	2000012c 	.word	0x2000012c
 8000fac:	20000128 	.word	0x20000128

08000fb0 <OpenLoopTasks>:
void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	ed2d 8b08 	vpush	{d8-d11}
 8000fb6:	eef0 aa40 	vmov.f32	s21, s0
 8000fba:	eeb0 ba60 	vmov.f32	s22, s1
 8000fbe:	eef0 8a41 	vmov.f32	s17, s2
 8000fc2:	460c      	mov	r4, r1
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	7013      	strb	r3, [r2, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8000fc8:	7053      	strb	r3, [r2, #1]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8000fca:	7093      	strb	r3, [r2, #2]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8000fcc:	ed90 8a00 	vldr	s16, [r0]
 8000fd0:	ed90 9a01 	vldr	s18, [r0, #4]
 8000fd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fd8:	ee69 7a07 	vmul.f32	s15, s18, s14
 8000fdc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000fe0:	edd0 6a02 	vldr	s13, [r0, #8]
 8000fe4:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000fe8:	ee38 8a47 	vsub.f32	s16, s16, s14
 8000fec:	eddf 9a82 	vldr	s19, [pc, #520]	; 80011f8 <OpenLoopTasks+0x248>
 8000ff0:	ee28 8a29 	vmul.f32	s16, s16, s19
 8000ff4:	4b81      	ldr	r3, [pc, #516]	; (80011fc <OpenLoopTasks+0x24c>)
 8000ff6:	ed83 8a00 	vstr	s16, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8000ffa:	ed9f aa81 	vldr	s20, [pc, #516]	; 8001200 <OpenLoopTasks+0x250>
 8000ffe:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8001002:	ee66 7a8a 	vmul.f32	s15, s13, s20
 8001006:	ee39 9a67 	vsub.f32	s18, s18, s15
 800100a:	ee29 9a29 	vmul.f32	s18, s18, s19
 800100e:	ed83 9a01 	vstr	s18, [r3, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001012:	edd0 7a00 	vldr	s15, [r0]
 8001016:	ed90 7a01 	vldr	s14, [r0, #4]
 800101a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800101e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001022:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001204 <OpenLoopTasks+0x254>
 8001026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102a:	edc3 7a02 	vstr	s15, [r3, #8]
	sinTheta = sinf(theta);
 800102e:	eeb0 0a60 	vmov.f32	s0, s1
 8001032:	f003 fe0d 	bl	8004c50 <sinf>
 8001036:	eef0 ba40 	vmov.f32	s23, s0
	cosTheta = cosf(theta);
 800103a:	eeb0 0a4b 	vmov.f32	s0, s22
 800103e:	f003 fdc3 	bl	8004bc8 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001042:	ee60 7a08 	vmul.f32	s15, s0, s16
 8001046:	ee2b 7a89 	vmul.f32	s14, s23, s18
 800104a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800104e:	4b6e      	ldr	r3, [pc, #440]	; (8001208 <OpenLoopTasks+0x258>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001054:	ee28 8a6b 	vnmul.f32	s16, s16, s23
 8001058:	ee20 9a09 	vmul.f32	s18, s0, s18
 800105c:	ee38 9a09 	vadd.f32	s18, s16, s18
 8001060:	ed83 9a01 	vstr	s18, [r3, #4]
	sVdq[0] = 0.0f;
 8001064:	4b69      	ldr	r3, [pc, #420]	; (800120c <OpenLoopTasks+0x25c>)
 8001066:	ed9f 9a6a 	vldr	s18, [pc, #424]	; 8001210 <OpenLoopTasks+0x260>
 800106a:	ed83 9a00 	vstr	s18, [r3]
	sVdq[1] = VamRef;
 800106e:	edc3 aa01 	vstr	s21, [r3, #4]
	sinTheta = sinf(theta);
 8001072:	eeb0 0a4b 	vmov.f32	s0, s22
 8001076:	f003 fdeb 	bl	8004c50 <sinf>
 800107a:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 800107e:	eeb0 0a4b 	vmov.f32	s0, s22
 8001082:	f003 fda1 	bl	8004bc8 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001086:	ee20 7a09 	vmul.f32	s14, s0, s18
 800108a:	ee68 7a2a 	vmul.f32	s15, s16, s21
 800108e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001092:	4b60      	ldr	r3, [pc, #384]	; (8001214 <OpenLoopTasks+0x264>)
 8001094:	ed83 7a00 	vstr	s14, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001098:	ee28 8a09 	vmul.f32	s16, s16, s18
 800109c:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80010a0:	ee38 8a00 	vadd.f32	s16, s16, s0
 80010a4:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80010a8:	ee27 0a29 	vmul.f32	s0, s14, s19
 80010ac:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <OpenLoopTasks+0x268>)
 80010ae:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80010b2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80010be:	ee77 7a88 	vadd.f32	s15, s15, s16
 80010c2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80010c6:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 80010ca:	eeb1 7a40 	vneg.f32	s14, s0
 80010ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d2:	ed83 7a02 	vstr	s14, [r3, #8]
	if(Vuvw[1] > max)
 80010d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	f100 8085 	bmi.w	80011ec <OpenLoopTasks+0x23c>
	max = Vuvw[0];
 80010e2:	eeb0 7a40 	vmov.f32	s14, s0
	if(Vuvw[2] > max)
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <OpenLoopTasks+0x268>)
 80010e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80010ec:	eef4 6ac7 	vcmpe.f32	s13, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	dd01      	ble.n	80010fa <OpenLoopTasks+0x14a>
		max = Vuvw[2];
 80010f6:	eeb0 7a66 	vmov.f32	s14, s13
	if(Vuvw[1] < min)
 80010fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dc76      	bgt.n	80011f2 <OpenLoopTasks+0x242>
	min = Vuvw[0];
 8001104:	eeb0 6a40 	vmov.f32	s12, s0
	if(Vuvw[2] < min)
 8001108:	eef4 6ac6 	vcmpe.f32	s13, s12
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d501      	bpl.n	8001116 <OpenLoopTasks+0x166>
		min = Vuvw[2];
 8001112:	eeb0 6a66 	vmov.f32	s12, s13
	vo = (max + min) * 0.5f;
 8001116:	ee37 7a06 	vadd.f32	s14, s14, s12
 800111a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800111e:	ee27 7a08 	vmul.f32	s14, s14, s16
	Vuvw[0] = Vuvw[0] - vo;
 8001122:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001126:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <OpenLoopTasks+0x268>)
 8001128:	ed83 0a00 	vstr	s0, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 800112c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001130:	edc3 7a01 	vstr	s15, [r3, #4]
	Vuvw[2] = Vuvw[2] - vo;
 8001134:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001138:	ed83 7a02 	vstr	s14, [r3, #8]
	Duty[0] = (Vuvw[0] * twoDivVdc);
 800113c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8001140:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001144:	edd3 7a01 	vldr	s15, [r3, #4]
 8001148:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800114c:	edc4 7a01 	vstr	s15, [r4, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001150:	ed93 1a02 	vldr	s2, [r3, #8]
 8001154:	ee68 8a81 	vmul.f32	s17, s17, s2
 8001158:	edc4 8a02 	vstr	s17, [r4, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 800115c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001160:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001164:	f7ff f880 	bl	8000268 <gUpperLowerLimit>
 8001168:	ed84 0a00 	vstr	s0, [r4]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 800116c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001170:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001174:	ed94 0a01 	vldr	s0, [r4, #4]
 8001178:	f7ff f876 	bl	8000268 <gUpperLowerLimit>
 800117c:	ed84 0a01 	vstr	s0, [r4, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001180:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001184:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001188:	ed94 0a02 	vldr	s0, [r4, #8]
 800118c:	f7ff f86c 	bl	8000268 <gUpperLowerLimit>
 8001190:	ed84 0a02 	vstr	s0, [r4, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001194:	edd4 7a00 	vldr	s15, [r4]
 8001198:	ee67 7a88 	vmul.f32	s15, s15, s16
 800119c:	ee77 7a88 	vadd.f32	s15, s15, s16
 80011a0:	edc4 7a00 	vstr	s15, [r4]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 80011a4:	edd4 7a01 	vldr	s15, [r4, #4]
 80011a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80011ac:	ee77 7a88 	vadd.f32	s15, s15, s16
 80011b0:	edc4 7a01 	vstr	s15, [r4, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 80011b4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80011b8:	ee30 0a08 	vadd.f32	s0, s0, s16
 80011bc:	ed84 0a02 	vstr	s0, [r4, #8]
	writeDuty(Duty);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fb31 	bl	8000828 <writeDuty>
	sIdq_1000[0] = sIdq[0] * 1000.0f;
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <OpenLoopTasks+0x258>)
 80011c8:	ed92 7a00 	vldr	s14, [r2]
 80011cc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800121c <OpenLoopTasks+0x26c>
 80011d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <OpenLoopTasks+0x270>)
 80011d6:	ed83 7a00 	vstr	s14, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 80011da:	edd2 7a01 	vldr	s15, [r2, #4]
 80011de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011e2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80011e6:	ecbd 8b08 	vpop	{d8-d11}
 80011ea:	bd10      	pop	{r4, pc}
		max = Vuvw[1];
 80011ec:	eeb0 7a67 	vmov.f32	s14, s15
 80011f0:	e779      	b.n	80010e6 <OpenLoopTasks+0x136>
		min = Vuvw[1];
 80011f2:	eeb0 6a67 	vmov.f32	s12, s15
 80011f6:	e787      	b.n	8001108 <OpenLoopTasks+0x158>
 80011f8:	3f5105ec 	.word	0x3f5105ec
 80011fc:	20000130 	.word	0x20000130
 8001200:	3f5db3d7 	.word	0x3f5db3d7
 8001204:	3f13cd3a 	.word	0x3f13cd3a
 8001208:	2000013c 	.word	0x2000013c
 800120c:	20000170 	.word	0x20000170
 8001210:	00000000 	.word	0x00000000
 8001214:	20000164 	.word	0x20000164
 8001218:	20000180 	.word	0x20000180
 800121c:	447a0000 	.word	0x447a0000
 8001220:	20000144 	.word	0x20000144

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	2400      	movs	r4, #0
 800122a:	9405      	str	r4, [sp, #20]
 800122c:	9406      	str	r4, [sp, #24]
 800122e:	9407      	str	r4, [sp, #28]
 8001230:	9408      	str	r4, [sp, #32]
 8001232:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_GPIO_Init+0xb8>)
 8001236:	695a      	ldr	r2, [r3, #20]
 8001238:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001244:	9201      	str	r2, [sp, #4]
 8001246:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001256:	9202      	str	r2, [sp, #8]
 8001258:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001268:	9203      	str	r2, [sp, #12]
 800126a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127a:	9304      	str	r3, [sp, #16]
 800127c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800127e:	4f18      	ldr	r7, [pc, #96]	; (80012e0 <MX_GPIO_Init+0xbc>)
 8001280:	4622      	mov	r2, r4
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	4638      	mov	r0, r7
 8001288:	f001 fddd 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800128c:	4d15      	ldr	r5, [pc, #84]	; (80012e4 <MX_GPIO_Init+0xc0>)
 800128e:	4622      	mov	r2, r4
 8001290:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001294:	4628      	mov	r0, r5
 8001296:	f001 fdd6 	bl	8002e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 800129e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012a4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	a905      	add	r1, sp, #20
 80012aa:	4628      	mov	r0, r5
 80012ac:	f001 fce6 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012b0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2601      	movs	r6, #1
 80012b4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ba:	a905      	add	r1, sp, #20
 80012bc:	4638      	mov	r0, r7
 80012be:	f001 fcdd 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 80012c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	a905      	add	r1, sp, #20
 80012d0:	4628      	mov	r0, r5
 80012d2:	f001 fcd3 	bl	8002c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d6:	b00b      	add	sp, #44	; 0x2c
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800

080012e8 <MX_DMA_Init>:
{
 80012e8:	b500      	push	{lr}
 80012ea:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_DMA_Init+0x30>)
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	2100      	movs	r1, #0
 8001304:	200b      	movs	r0, #11
 8001306:	f001 fb7b 	bl	8002a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800130a:	200b      	movs	r0, #11
 800130c:	f001 fbb0 	bl	8002a70 <HAL_NVIC_EnableIRQ>
}
 8001310:	b003      	add	sp, #12
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131e:	e7fe      	b.n	800131e <Error_Handler+0x2>

08001320 <MX_USART2_UART_Init>:
{
 8001320:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x30>)
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART2_UART_Init+0x34>)
 8001326:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8001328:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800132c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	2300      	movs	r3, #0
 8001330:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001332:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001334:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001336:	220c      	movs	r2, #12
 8001338:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	f003 fbde 	bl	8004b02 <HAL_UART_Init>
 8001346:	b900      	cbnz	r0, 800134a <MX_USART2_UART_Init+0x2a>
}
 8001348:	bd08      	pop	{r3, pc}
    Error_Handler();
 800134a:	f7ff ffe7 	bl	800131c <Error_Handler>
 800134e:	bf00      	nop
 8001350:	200002b8 	.word	0x200002b8
 8001354:	40004400 	.word	0x40004400

08001358 <MX_ADC1_Init>:
{
 8001358:	b510      	push	{r4, lr}
 800135a:	b090      	sub	sp, #64	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 800135c:	2400      	movs	r4, #0
 800135e:	940a      	str	r4, [sp, #40]	; 0x28
 8001360:	940b      	str	r4, [sp, #44]	; 0x2c
 8001362:	940c      	str	r4, [sp, #48]	; 0x30
 8001364:	940d      	str	r4, [sp, #52]	; 0x34
 8001366:	940e      	str	r4, [sp, #56]	; 0x38
 8001368:	940f      	str	r4, [sp, #60]	; 0x3c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800136a:	2228      	movs	r2, #40	; 0x28
 800136c:	4621      	mov	r1, r4
 800136e:	4668      	mov	r0, sp
 8001370:	f003 fc22 	bl	8004bb8 <memset>
  hadc1.Instance = ADC1;
 8001374:	4835      	ldr	r0, [pc, #212]	; (800144c <MX_ADC1_Init+0xf4>)
 8001376:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800137a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800137c:	6044      	str	r4, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800137e:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001380:	2301      	movs	r3, #1
 8001382:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001384:	7643      	strb	r3, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001386:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001390:	2202      	movs	r2, #2
 8001392:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001394:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001398:	2304      	movs	r3, #4
 800139a:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800139c:	7604      	strb	r4, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800139e:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a0:	f000 fcbe 	bl	8001d20 <HAL_ADC_Init>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d144      	bne.n	8001432 <MX_ADC1_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013b0:	2300      	movs	r3, #0
 80013b2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013b4:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013b6:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 80013b8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ba:	a90a      	add	r1, sp, #40	; 0x28
 80013bc:	4823      	ldr	r0, [pc, #140]	; (800144c <MX_ADC1_Init+0xf4>)
 80013be:	f000 ff6f 	bl	80022a0 <HAL_ADC_ConfigChannel>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d137      	bne.n	8001436 <MX_ADC1_Init+0xde>
  sConfig.Channel = ADC_CHANNEL_12;
 80013c6:	230c      	movs	r3, #12
 80013c8:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	a90a      	add	r1, sp, #40	; 0x28
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MX_ADC1_Init+0xf4>)
 80013d2:	f000 ff65 	bl	80022a0 <HAL_ADC_ConfigChannel>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d12f      	bne.n	800143a <MX_ADC1_Init+0xe2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80013da:	2301      	movs	r3, #1
 80013dc:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013de:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80013e0:	2300      	movs	r3, #0
 80013e2:	9303      	str	r3, [sp, #12]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80013e4:	2203      	movs	r2, #3
 80013e6:	9206      	str	r2, [sp, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013e8:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80013ee:	9308      	str	r3, [sp, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80013f0:	f88d 301d 	strb.w	r3, [sp, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80013f4:	f88d 301c 	strb.w	r3, [sp, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80013f8:	f88d 301e 	strb.w	r3, [sp, #30]
  sConfigInjected.InjectedOffset = 0;
 80013fc:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80013fe:	9304      	str	r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001400:	4669      	mov	r1, sp
 8001402:	4812      	ldr	r0, [pc, #72]	; (800144c <MX_ADC1_Init+0xf4>)
 8001404:	f001 f8f8 	bl	80025f8 <HAL_ADCEx_InjectedConfigChannel>
 8001408:	b9c8      	cbnz	r0, 800143e <MX_ADC1_Init+0xe6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800140a:	2307      	movs	r3, #7
 800140c:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800140e:	2302      	movs	r3, #2
 8001410:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001412:	4669      	mov	r1, sp
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_ADC1_Init+0xf4>)
 8001416:	f001 f8ef 	bl	80025f8 <HAL_ADCEx_InjectedConfigChannel>
 800141a:	b990      	cbnz	r0, 8001442 <MX_ADC1_Init+0xea>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800141c:	2306      	movs	r3, #6
 800141e:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001420:	2303      	movs	r3, #3
 8001422:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001424:	4669      	mov	r1, sp
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_ADC1_Init+0xf4>)
 8001428:	f001 f8e6 	bl	80025f8 <HAL_ADCEx_InjectedConfigChannel>
 800142c:	b958      	cbnz	r0, 8001446 <MX_ADC1_Init+0xee>
}
 800142e:	b010      	add	sp, #64	; 0x40
 8001430:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001432:	f7ff ff73 	bl	800131c <Error_Handler>
    Error_Handler();
 8001436:	f7ff ff71 	bl	800131c <Error_Handler>
    Error_Handler();
 800143a:	f7ff ff6f 	bl	800131c <Error_Handler>
    Error_Handler();
 800143e:	f7ff ff6d 	bl	800131c <Error_Handler>
    Error_Handler();
 8001442:	f7ff ff6b 	bl	800131c <Error_Handler>
    Error_Handler();
 8001446:	f7ff ff69 	bl	800131c <Error_Handler>
 800144a:	bf00      	nop
 800144c:	2000018c 	.word	0x2000018c

08001450 <MX_TIM1_Init>:
{
 8001450:	b510      	push	{r4, lr}
 8001452:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	2400      	movs	r4, #0
 8001456:	9413      	str	r4, [sp, #76]	; 0x4c
 8001458:	9414      	str	r4, [sp, #80]	; 0x50
 800145a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	940c      	str	r4, [sp, #48]	; 0x30
 800145e:	940d      	str	r4, [sp, #52]	; 0x34
 8001460:	940e      	str	r4, [sp, #56]	; 0x38
 8001462:	940f      	str	r4, [sp, #60]	; 0x3c
 8001464:	9410      	str	r4, [sp, #64]	; 0x40
 8001466:	9411      	str	r4, [sp, #68]	; 0x44
 8001468:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146a:	222c      	movs	r2, #44	; 0x2c
 800146c:	4621      	mov	r1, r4
 800146e:	a801      	add	r0, sp, #4
 8001470:	f003 fba2 	bl	8004bb8 <memset>
  htim1.Instance = TIM1;
 8001474:	4835      	ldr	r0, [pc, #212]	; (800154c <MX_TIM1_Init+0xfc>)
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <MX_TIM1_Init+0x100>)
 8001478:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800147a:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800147c:	2320      	movs	r3, #32
 800147e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 2000 - 1;
 8001480:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001484:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001488:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800148c:	f002 fd10 	bl	8003eb0 <HAL_TIM_PWM_Init>
 8001490:	2800      	cmp	r0, #0
 8001492:	d14c      	bne.n	800152e <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001494:	2370      	movs	r3, #112	; 0x70
 8001496:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149e:	a913      	add	r1, sp, #76	; 0x4c
 80014a0:	482a      	ldr	r0, [pc, #168]	; (800154c <MX_TIM1_Init+0xfc>)
 80014a2:	f003 f8bf 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d143      	bne.n	8001532 <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	; 0x60
 80014ac:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014ae:	2200      	movs	r2, #0
 80014b0:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80014b4:	2308      	movs	r3, #8
 80014b6:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b8:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ba:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014bc:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014be:	a90c      	add	r1, sp, #48	; 0x30
 80014c0:	4822      	ldr	r0, [pc, #136]	; (800154c <MX_TIM1_Init+0xfc>)
 80014c2:	f002 fd95 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d135      	bne.n	8001536 <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ca:	2204      	movs	r2, #4
 80014cc:	a90c      	add	r1, sp, #48	; 0x30
 80014ce:	481f      	ldr	r0, [pc, #124]	; (800154c <MX_TIM1_Init+0xfc>)
 80014d0:	f002 fd8e 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d130      	bne.n	800153a <MX_TIM1_Init+0xea>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014dc:	2208      	movs	r2, #8
 80014de:	a90c      	add	r1, sp, #48	; 0x30
 80014e0:	481a      	ldr	r0, [pc, #104]	; (800154c <MX_TIM1_Init+0xfc>)
 80014e2:	f002 fd85 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	bb50      	cbnz	r0, 800153e <MX_TIM1_Init+0xee>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80014e8:	2370      	movs	r3, #112	; 0x70
 80014ea:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ec:	220c      	movs	r2, #12
 80014ee:	a90c      	add	r1, sp, #48	; 0x30
 80014f0:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_TIM1_Init+0xfc>)
 80014f2:	f002 fd7d 	bl	8003ff0 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	bb20      	cbnz	r0, 8001542 <MX_TIM1_Init+0xf2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014fc:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fe:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001500:	220a      	movs	r2, #10
 8001502:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001504:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800150c:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800150e:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001514:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001516:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001518:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800151a:	a901      	add	r1, sp, #4
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <MX_TIM1_Init+0xfc>)
 800151e:	f003 f8b9 	bl	8004694 <HAL_TIMEx_ConfigBreakDeadTime>
 8001522:	b980      	cbnz	r0, 8001546 <MX_TIM1_Init+0xf6>
  HAL_TIM_MspPostInit(&htim1);
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <MX_TIM1_Init+0xfc>)
 8001526:	f000 fa0d 	bl	8001944 <HAL_TIM_MspPostInit>
}
 800152a:	b016      	add	sp, #88	; 0x58
 800152c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800152e:	f7ff fef5 	bl	800131c <Error_Handler>
    Error_Handler();
 8001532:	f7ff fef3 	bl	800131c <Error_Handler>
    Error_Handler();
 8001536:	f7ff fef1 	bl	800131c <Error_Handler>
    Error_Handler();
 800153a:	f7ff feef 	bl	800131c <Error_Handler>
    Error_Handler();
 800153e:	f7ff feed 	bl	800131c <Error_Handler>
    Error_Handler();
 8001542:	f7ff feeb 	bl	800131c <Error_Handler>
    Error_Handler();
 8001546:	f7ff fee9 	bl	800131c <Error_Handler>
 800154a:	bf00      	nop
 800154c:	20000220 	.word	0x20000220
 8001550:	40012c00 	.word	0x40012c00

08001554 <MX_TIM2_Init>:
{
 8001554:	b500      	push	{lr}
 8001556:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	2300      	movs	r3, #0
 800155a:	9305      	str	r3, [sp, #20]
 800155c:	9306      	str	r3, [sp, #24]
 800155e:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	9304      	str	r3, [sp, #16]
  htim2.Instance = TIM2;
 8001568:	481d      	ldr	r0, [pc, #116]	; (80015e0 <MX_TIM2_Init+0x8c>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001570:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800157e:	f002 fcc7 	bl	8003f10 <HAL_TIM_IC_Init>
 8001582:	bb10      	cbnz	r0, 80015ca <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158a:	a905      	add	r1, sp, #20
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_TIM2_Init+0x8c>)
 800158e:	f003 f849 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	b9e0      	cbnz	r0, 80015ce <MX_TIM2_Init+0x7a>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001594:	2200      	movs	r2, #0
 8001596:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001598:	2301      	movs	r3, #1
 800159a:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800159c:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 0;
 800159e:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	a901      	add	r1, sp, #4
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <MX_TIM2_Init+0x8c>)
 80015a4:	f002 fdea 	bl	800417c <HAL_TIM_IC_ConfigChannel>
 80015a8:	b998      	cbnz	r0, 80015d2 <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015aa:	2204      	movs	r2, #4
 80015ac:	eb0d 0102 	add.w	r1, sp, r2
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <MX_TIM2_Init+0x8c>)
 80015b2:	f002 fde3 	bl	800417c <HAL_TIM_IC_ConfigChannel>
 80015b6:	b970      	cbnz	r0, 80015d6 <MX_TIM2_Init+0x82>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015b8:	2208      	movs	r2, #8
 80015ba:	a901      	add	r1, sp, #4
 80015bc:	4808      	ldr	r0, [pc, #32]	; (80015e0 <MX_TIM2_Init+0x8c>)
 80015be:	f002 fddd 	bl	800417c <HAL_TIM_IC_ConfigChannel>
 80015c2:	b950      	cbnz	r0, 80015da <MX_TIM2_Init+0x86>
}
 80015c4:	b009      	add	sp, #36	; 0x24
 80015c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015ca:	f7ff fea7 	bl	800131c <Error_Handler>
    Error_Handler();
 80015ce:	f7ff fea5 	bl	800131c <Error_Handler>
    Error_Handler();
 80015d2:	f7ff fea3 	bl	800131c <Error_Handler>
    Error_Handler();
 80015d6:	f7ff fea1 	bl	800131c <Error_Handler>
    Error_Handler();
 80015da:	f7ff fe9f 	bl	800131c <Error_Handler>
 80015de:	bf00      	nop
 80015e0:	2000026c 	.word	0x2000026c

080015e4 <SystemClock_Config>:
{
 80015e4:	b500      	push	{lr}
 80015e6:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e8:	2228      	movs	r2, #40	; 0x28
 80015ea:	2100      	movs	r1, #0
 80015ec:	a812      	add	r0, sp, #72	; 0x48
 80015ee:	f003 fae3 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f2:	2100      	movs	r1, #0
 80015f4:	910d      	str	r1, [sp, #52]	; 0x34
 80015f6:	910e      	str	r1, [sp, #56]	; 0x38
 80015f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80015fa:	9110      	str	r1, [sp, #64]	; 0x40
 80015fc:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fe:	2234      	movs	r2, #52	; 0x34
 8001600:	4668      	mov	r0, sp
 8001602:	f003 fad9 	bl	8004bb8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001606:	2302      	movs	r3, #2
 8001608:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2201      	movs	r2, #1
 800160c:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160e:	2210      	movs	r2, #16
 8001610:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001614:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001618:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	a812      	add	r0, sp, #72	; 0x48
 800161c:	f001 fc22 	bl	8002e64 <HAL_RCC_OscConfig>
 8001620:	b9e0      	cbnz	r0, 800165c <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	230f      	movs	r3, #15
 8001624:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001626:	2102      	movs	r1, #2
 8001628:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001632:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001634:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001636:	a80d      	add	r0, sp, #52	; 0x34
 8001638:	f001 ff66 	bl	8003508 <HAL_RCC_ClockConfig>
 800163c:	b980      	cbnz	r0, 8001660 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 800163e:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8001642:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001644:	2300      	movs	r3, #0
 8001646:	9308      	str	r3, [sp, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164e:	4668      	mov	r0, sp
 8001650:	f002 f860 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8001654:	b930      	cbnz	r0, 8001664 <SystemClock_Config+0x80>
}
 8001656:	b01d      	add	sp, #116	; 0x74
 8001658:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800165c:	f7ff fe5e 	bl	800131c <Error_Handler>
    Error_Handler();
 8001660:	f7ff fe5c 	bl	800131c <Error_Handler>
    Error_Handler();
 8001664:	f7ff fe5a 	bl	800131c <Error_Handler>

08001668 <main>:
{
 8001668:	b508      	push	{r3, lr}
  HAL_Init();
 800166a:	f000 fa75 	bl	8001b58 <HAL_Init>
  SystemClock_Config();
 800166e:	f7ff ffb9 	bl	80015e4 <SystemClock_Config>
  MX_GPIO_Init();
 8001672:	f7ff fdd7 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 8001676:	f7ff fe37 	bl	80012e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800167a:	f7ff fe51 	bl	8001320 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800167e:	f7ff fe6b 	bl	8001358 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001682:	f7ff fee5 	bl	8001450 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001686:	f7ff ff65 	bl	8001554 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800168a:	4c26      	ldr	r4, [pc, #152]	; (8001724 <main+0xbc>)
 800168c:	4620      	mov	r0, r4
 800168e:	f002 fac7 	bl	8003c20 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001692:	4e25      	ldr	r6, [pc, #148]	; (8001728 <main+0xc0>)
 8001694:	4630      	mov	r0, r6
 8001696:	f000 fca1 	bl	8001fdc <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800169a:	4d24      	ldr	r5, [pc, #144]	; (800172c <main+0xc4>)
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a2:	4628      	mov	r0, r5
 80016a4:	f001 fbcf 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ae:	4628      	mov	r0, r5
 80016b0:	f001 fbc9 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ba:	4628      	mov	r0, r5
 80016bc:	f001 fbc3 	bl	8002e46 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4620      	mov	r0, r4
 80016c4:	f002 fdcc 	bl	8004260 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	4620      	mov	r0, r4
 80016cc:	f002 ff3c 	bl	8004548 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016d0:	2104      	movs	r1, #4
 80016d2:	4620      	mov	r0, r4
 80016d4:	f002 fdc4 	bl	8004260 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016d8:	2104      	movs	r1, #4
 80016da:	4620      	mov	r0, r4
 80016dc:	f002 ff34 	bl	8004548 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016e0:	2108      	movs	r1, #8
 80016e2:	4620      	mov	r0, r4
 80016e4:	f002 fdbc 	bl	8004260 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80016e8:	2108      	movs	r1, #8
 80016ea:	4620      	mov	r0, r4
 80016ec:	f002 ff2c 	bl	8004548 <HAL_TIMEx_PWMN_Start>
  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <main+0xc8>)
 80016f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016f4:	3b0a      	subs	r3, #10
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 80016f8:	4c0e      	ldr	r4, [pc, #56]	; (8001734 <main+0xcc>)
 80016fa:	4620      	mov	r0, r4
 80016fc:	f002 fa90 	bl	8003c20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001700:	2100      	movs	r1, #0
 8001702:	4620      	mov	r0, r4
 8001704:	f002 fe48 	bl	8004398 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001708:	2104      	movs	r1, #4
 800170a:	4620      	mov	r0, r4
 800170c:	f002 fe44 	bl	8004398 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001710:	2108      	movs	r1, #8
 8001712:	4620      	mov	r0, r4
 8001714:	f002 fe40 	bl	8004398 <HAL_TIM_IC_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001718:	2202      	movs	r2, #2
 800171a:	4907      	ldr	r1, [pc, #28]	; (8001738 <main+0xd0>)
 800171c:	4630      	mov	r0, r6
 800171e:	f000 fbf1 	bl	8001f04 <HAL_ADC_Start_DMA>
  while (1)
 8001722:	e7fe      	b.n	8001722 <main+0xba>
 8001724:	20000220 	.word	0x20000220
 8001728:	2000018c 	.word	0x2000018c
 800172c:	48000800 	.word	0x48000800
 8001730:	40012c00 	.word	0x40012c00
 8001734:	2000026c 	.word	0x2000026c
 8001738:	2000008c 	.word	0x2000008c

0800173c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b500      	push	{lr}
 800173e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x44>)
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	619a      	str	r2, [r3, #24]
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	f002 0201 	and.w	r2, r2, #1
 8001750:	9200      	str	r2, [sp, #0]
 8001752:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175a:	61da      	str	r2, [r3, #28]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001766:	2007      	movs	r0, #7
 8001768:	f001 f938 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 7);
 800176c:	2207      	movs	r2, #7
 800176e:	2100      	movs	r1, #0
 8001770:	f06f 0003 	mvn.w	r0, #3
 8001774:	f001 f944 	bl	8002a00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001778:	b003      	add	sp, #12
 800177a:	f85d fb04 	ldr.w	pc, [sp], #4
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	2300      	movs	r3, #0
 800178a:	9305      	str	r3, [sp, #20]
 800178c:	9306      	str	r3, [sp, #24]
 800178e:	9307      	str	r3, [sp, #28]
 8001790:	9308      	str	r3, [sp, #32]
 8001792:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8001794:	6803      	ldr	r3, [r0, #0]
 8001796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800179a:	d001      	beq.n	80017a0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800179c:	b00a      	add	sp, #40	; 0x28
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a2:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80017a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80017b8:	9201      	str	r2, [sp, #4]
 80017ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80017ca:	9202      	str	r2, [sp, #8]
 80017cc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017dc:	9203      	str	r2, [sp, #12]
 80017de:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ee:	9304      	str	r3, [sp, #16]
 80017f0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017f2:	230f      	movs	r3, #15
 80017f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2603      	movs	r6, #3
 80017f8:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	a905      	add	r1, sp, #20
 80017fc:	481b      	ldr	r0, [pc, #108]	; (800186c <HAL_ADC_MspInit+0xe8>)
 80017fe:	f001 fa3d 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001802:	2313      	movs	r3, #19
 8001804:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2500      	movs	r5, #0
 800180a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	a905      	add	r1, sp, #20
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f001 fa33 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001816:	2302      	movs	r3, #2
 8001818:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	a905      	add	r1, sp, #20
 8001820:	4813      	ldr	r0, [pc, #76]	; (8001870 <HAL_ADC_MspInit+0xec>)
 8001822:	f001 fa2b 	bl	8002c7c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <HAL_ADC_MspInit+0xf0>)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_ADC_MspInit+0xf4>)
 800182a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182c:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800182e:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001838:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001840:	2320      	movs	r3, #32
 8001842:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001846:	f001 f95d 	bl	8002b04 <HAL_DMA_Init>
 800184a:	b958      	cbnz	r0, 8001864 <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_ADC_MspInit+0xf0>)
 800184e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001850:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 1);
 8001852:	2201      	movs	r2, #1
 8001854:	2100      	movs	r1, #0
 8001856:	2012      	movs	r0, #18
 8001858:	f001 f8d2 	bl	8002a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800185c:	2012      	movs	r0, #18
 800185e:	f001 f907 	bl	8002a70 <HAL_NVIC_EnableIRQ>
}
 8001862:	e79b      	b.n	800179c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001864:	f7ff fd5a 	bl	800131c <Error_Handler>
 8001868:	e7f0      	b.n	800184c <HAL_ADC_MspInit+0xc8>
 800186a:	bf00      	nop
 800186c:	48000800 	.word	0x48000800
 8001870:	48000400 	.word	0x48000400
 8001874:	200001dc 	.word	0x200001dc
 8001878:	40020008 	.word	0x40020008

0800187c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 800187c:	6802      	ldr	r2, [r0, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_TIM_PWM_MspInit+0x28>)
 8001880:	429a      	cmp	r2, r3
 8001882:	d000      	beq.n	8001886 <HAL_TIM_PWM_MspInit+0xa>
 8001884:	4770      	bx	lr
{
 8001886:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001888:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001892:	619a      	str	r2, [r3, #24]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800189e:	b002      	add	sp, #8
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40012c00 	.word	0x40012c00

080018a8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80018a8:	b530      	push	{r4, r5, lr}
 80018aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	2300      	movs	r3, #0
 80018ae:	9303      	str	r3, [sp, #12]
 80018b0:	9304      	str	r3, [sp, #16]
 80018b2:	9305      	str	r3, [sp, #20]
 80018b4:	9306      	str	r3, [sp, #24]
 80018b6:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM2)
 80018b8:	6803      	ldr	r3, [r0, #0]
 80018ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018be:	d001      	beq.n	80018c4 <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c0:	b009      	add	sp, #36	; 0x24
 80018c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	61da      	str	r2, [r3, #28]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	f002 0201 	and.w	r2, r2, #1
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80018fe:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001902:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2402      	movs	r4, #2
 8001906:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001908:	2501      	movs	r5, #1
 800190a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	a903      	add	r1, sp, #12
 800190e:	480c      	ldr	r0, [pc, #48]	; (8001940 <HAL_TIM_IC_MspInit+0x98>)
 8001910:	f001 f9b4 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H1_Pin;
 8001914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001918:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2400      	movs	r4, #0
 800191e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001922:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8001924:	a903      	add	r1, sp, #12
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f001 f9a7 	bl	8002c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192e:	4622      	mov	r2, r4
 8001930:	4621      	mov	r1, r4
 8001932:	201c      	movs	r0, #28
 8001934:	f001 f864 	bl	8002a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001938:	201c      	movs	r0, #28
 800193a:	f001 f899 	bl	8002a70 <HAL_NVIC_EnableIRQ>
}
 800193e:	e7bf      	b.n	80018c0 <HAL_TIM_IC_MspInit+0x18>
 8001940:	48000400 	.word	0x48000400

08001944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	2300      	movs	r3, #0
 800194a:	9303      	str	r3, [sp, #12]
 800194c:	9304      	str	r3, [sp, #16]
 800194e:	9305      	str	r3, [sp, #20]
 8001950:	9306      	str	r3, [sp, #24]
 8001952:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8001954:	6802      	ldr	r2, [r0, #0]
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_TIM_MspPostInit+0x90>)
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800195c:	b008      	add	sp, #32
 800195e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800197c:	615a      	str	r2, [r3, #20]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001988:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800198c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2502      	movs	r5, #2
 8001990:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001992:	2606      	movs	r6, #6
 8001994:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	a903      	add	r1, sp, #12
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f001 f96e 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019a0:	2301      	movs	r3, #1
 80019a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2400      	movs	r4, #0
 80019a8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019ac:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	a903      	add	r1, sp, #12
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_TIM_MspPostInit+0x94>)
 80019b2:	f001 f963 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80019c2:	230b      	movs	r3, #11
 80019c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	a903      	add	r1, sp, #12
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f001 f956 	bl	8002c7c <HAL_GPIO_Init>
}
 80019d0:	e7c4      	b.n	800195c <HAL_TIM_MspPostInit+0x18>
 80019d2:	bf00      	nop
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	48000400 	.word	0x48000400

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b500      	push	{lr}
 80019de:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	2300      	movs	r3, #0
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	9304      	str	r3, [sp, #16]
 80019e6:	9305      	str	r3, [sp, #20]
 80019e8:	9306      	str	r3, [sp, #24]
 80019ea:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80019ec:	6802      	ldr	r2, [r0, #0]
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_UART_MspInit+0x60>)
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d002      	beq.n	80019fa <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f4:	b009      	add	sp, #36	; 0x24
 80019f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fa:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a04:	61da      	str	r2, [r3, #28]
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a0c:	9201      	str	r2, [sp, #4]
 8001a0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	a903      	add	r1, sp, #12
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f001 f922 	bl	8002c7c <HAL_GPIO_Init>
}
 8001a38:	e7dc      	b.n	80019f4 <HAL_UART_MspInit+0x18>
 8001a3a:	bf00      	nop
 8001a3c:	40004400 	.word	0x40004400

08001a40 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler>

08001a42 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler>

08001a44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler>

08001a46 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler>

08001a48 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler>

08001a4a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	4770      	bx	lr

08001a4e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a52:	f000 f893 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a56:	bd08      	pop	{r3, pc}

08001a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <DMA1_Channel1_IRQHandler+0xc>)
 8001a5c:	f001 f8b4 	bl	8002bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a60:	bd08      	pop	{r3, pc}
 8001a62:	bf00      	nop
 8001a64:	200001dc 	.word	0x200001dc

08001a68 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001a68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <ADC1_IRQHandler+0x24>)
 8001a6c:	f000 fb12 	bl	8002094 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a70:	4c07      	ldr	r4, [pc, #28]	; (8001a90 <ADC1_IRQHandler+0x28>)
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	4620      	mov	r0, r4
 8001a78:	f001 f9ea 	bl	8002e50 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence();
 8001a7c:	f7fe fd12 	bl	80004a4 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a84:	4620      	mov	r0, r4
 8001a86:	f001 f9e3 	bl	8002e50 <HAL_GPIO_TogglePin>
  /* USER CODE END ADC1_IRQn 1 */
}
 8001a8a:	bd10      	pop	{r4, pc}
 8001a8c:	2000018c 	.word	0x2000018c
 8001a90:	48000400 	.word	0x48000400

08001a94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a96:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM2_IRQHandler+0xc>)
 8001a98:	f002 f8fd 	bl	8003c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a9c:	bd08      	pop	{r3, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000026c 	.word	0x2000026c

08001aa4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <SystemInit+0x10>)
 8001aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001aaa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff fff2 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f003 f843 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff fdbd 	bl	8001668 <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001afc:	08005fe4 	.word	0x08005fe4
  ldr r2, =_sbss
 8001b00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b04:	20000344 	.word	0x20000344

08001b08 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <CAN_RX1_IRQHandler>
	...

08001b0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_InitTick+0x40>)
 8001b12:	7818      	ldrb	r0, [r3, #0]
 8001b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b18:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <HAL_InitTick+0x44>)
 8001b1e:	6810      	ldr	r0, [r2, #0]
 8001b20:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b24:	f000 ffb2 	bl	8002a8c <HAL_SYSTICK_Config>
 8001b28:	b968      	cbnz	r0, 8001b46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	2c0f      	cmp	r4, #15
 8001b2c:	d901      	bls.n	8001b32 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e00a      	b.n	8001b48 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b32:	2200      	movs	r2, #0
 8001b34:	4621      	mov	r1, r4
 8001b36:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3a:	f000 ff61 	bl	8002a00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_InitTick+0x48>)
 8001b40:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8001b42:	2000      	movs	r0, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001b46:	2001      	movs	r0, #1
}
 8001b48:	bd10      	pop	{r4, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_Init>:
{
 8001b58:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_Init+0x20>)
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 ff39 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff ffce 	bl	8001b0c <HAL_InitTick>
  HAL_MspInit();
 8001b70:	f7ff fde4 	bl	800173c <HAL_MspInit>
}
 8001b74:	2000      	movs	r0, #0
 8001b76:	bd08      	pop	{r3, pc}
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_IncTick+0x10>)
 8001b7e:	6811      	ldr	r1, [r2, #0]
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_IncTick+0x14>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	440b      	add	r3, r1
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000340 	.word	0x20000340
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001b94:	4b01      	ldr	r3, [pc, #4]	; (8001b9c <HAL_GetTick+0x8>)
 8001b96:	6818      	ldr	r0, [r3, #0]
}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000340 	.word	0x20000340

08001ba0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ba6:	4770      	bx	lr

08001ba8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001baa:	6802      	ldr	r2, [r0, #0]
 8001bac:	6893      	ldr	r3, [r2, #8]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bb6:	2000      	movs	r0, #0
}
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
 8001bba:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	f013 0f01 	tst.w	r3, #1
 8001bc2:	d033      	beq.n	8001c2c <ADC_Disable+0x84>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bc4:	6893      	ldr	r3, [r2, #8]
 8001bc6:	f003 030d 	and.w	r3, r3, #13
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d009      	beq.n	8001be2 <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
 8001be0:	e7ea      	b.n	8001bb8 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 8001be2:	6893      	ldr	r3, [r2, #8]
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6093      	str	r3, [r2, #8]
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	2203      	movs	r2, #3
 8001bee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001bf0:	f7ff ffd0 	bl	8001b94 <HAL_GetTick>
 8001bf4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f013 0f01 	tst.w	r3, #1
 8001bfe:	d013      	beq.n	8001c28 <ADC_Disable+0x80>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c00:	f7ff ffc8 	bl	8001b94 <HAL_GetTick>
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f5      	bls.n	8001bf6 <ADC_Disable+0x4e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f013 0f01 	tst.w	r3, #1
 8001c12:	d0f0      	beq.n	8001bf6 <ADC_Disable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
 8001c26:	e7c7      	b.n	8001bb8 <ADC_Disable+0x10>
  return HAL_OK;
 8001c28:	2000      	movs	r0, #0
 8001c2a:	e7c5      	b.n	8001bb8 <ADC_Disable+0x10>
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e7c3      	b.n	8001bb8 <ADC_Disable+0x10>

08001c30 <ADC_Enable>:
{
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	6893      	ldr	r3, [r2, #8]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d00d      	beq.n	8001c5c <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c40:	6891      	ldr	r1, [r2, #8]
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <ADC_Enable+0x7c>)
 8001c44:	4219      	tst	r1, r3
 8001c46:	d00f      	beq.n	8001c68 <ADC_Enable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
}
 8001c5a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c5c:	6813      	ldr	r3, [r2, #0]
 8001c5e:	f013 0f01 	tst.w	r3, #1
 8001c62:	d0ed      	beq.n	8001c40 <ADC_Enable+0x10>
  return HAL_OK;
 8001c64:	2000      	movs	r0, #0
 8001c66:	e7f8      	b.n	8001c5a <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8001c68:	6893      	ldr	r3, [r2, #8]
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001c70:	f7ff ff90 	bl	8001b94 <HAL_GetTick>
 8001c74:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f013 0f01 	tst.w	r3, #1
 8001c7e:	d113      	bne.n	8001ca8 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c80:	f7ff ff88 	bl	8001b94 <HAL_GetTick>
 8001c84:	1b43      	subs	r3, r0, r5
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d9f5      	bls.n	8001c76 <ADC_Enable+0x46>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f013 0f01 	tst.w	r3, #1
 8001c92:	d1f0      	bne.n	8001c76 <ADC_Enable+0x46>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	e7d8      	b.n	8001c5a <ADC_Enable+0x2a>
  return HAL_OK;
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e7d6      	b.n	8001c5a <ADC_Enable+0x2a>
 8001cac:	8000003f 	.word	0x8000003f

08001cb0 <ADC_DMAError>:
{
 8001cb0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cb4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cba:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001cc4:	f7ff ff6f 	bl	8001ba6 <HAL_ADC_ErrorCallback>
}
 8001cc8:	bd08      	pop	{r3, pc}

08001cca <ADC_DMAHalfConvCplt>:
{
 8001cca:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ccc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001cce:	f7ff ff68 	bl	8001ba2 <HAL_ADC_ConvHalfCpltCallback>
}
 8001cd2:	bd08      	pop	{r3, pc}

08001cd4 <ADC_DMAConvCplt>:
{
 8001cd4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cda:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001cde:	d11a      	bne.n	8001d16 <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68d2      	ldr	r2, [r2, #12]
 8001cec:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001cf0:	d10d      	bne.n	8001d0e <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cf2:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cf4:	b95a      	cbnz	r2, 8001d0e <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d00:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001d04:	d103      	bne.n	8001d0e <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff46 	bl	8001ba0 <HAL_ADC_ConvCpltCallback>
}
 8001d14:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4798      	blx	r3
}
 8001d1c:	e7fa      	b.n	8001d14 <ADC_DMAConvCplt+0x40>
	...

08001d20 <HAL_ADC_Init>:
{
 8001d20:	b530      	push	{r4, r5, lr}
 8001d22:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	f000 80e1 	beq.w	8001ef0 <HAL_ADC_Init+0x1d0>
 8001d2e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d30:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d32:	f013 0f10 	tst.w	r3, #16
 8001d36:	d152      	bne.n	8001dde <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d3a:	b1ab      	cbz	r3, 8001d68 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001d46:	d003      	beq.n	8001d50 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d48:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d4a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001d4e:	d047      	beq.n	8001de0 <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 8001d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d52:	f023 0312 	bic.w	r3, r3, #18
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
 8001d66:	e03b      	b.n	8001de0 <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d6a:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d6c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 8001d6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001d72:	f7ff fd07 	bl	8001784 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d7e:	d001      	beq.n	8001d84 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d80:	2000      	movs	r0, #0
 8001d82:	e7dc      	b.n	8001d3e <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff ff0f 	bl	8001ba8 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d8c:	f013 0f10 	tst.w	r3, #16
 8001d90:	d1d5      	bne.n	8001d3e <HAL_ADC_Init+0x1e>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d1d3      	bne.n	8001d3e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d9c:	f023 0302 	bic.w	r3, r3, #2
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001da6:	6822      	ldr	r2, [r4, #0]
 8001da8:	6893      	ldr	r3, [r2, #8]
 8001daa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001dae:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	6893      	ldr	r3, [r2, #8]
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dba:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_ADC_Init+0x1d4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4e      	ldr	r2, [pc, #312]	; (8001ef8 <HAL_ADC_Init+0x1d8>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001dce:	e002      	b.n	8001dd6 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 8001dd0:	9b01      	ldr	r3, [sp, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f9      	bne.n	8001dd0 <HAL_ADC_Init+0xb0>
 8001ddc:	e7af      	b.n	8001d3e <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dde:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001de2:	f013 0f10 	tst.w	r3, #16
 8001de6:	d17a      	bne.n	8001ede <HAL_ADC_Init+0x1be>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d178      	bne.n	8001ede <HAL_ADC_Init+0x1be>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001dec:	6825      	ldr	r5, [r4, #0]
 8001dee:	68a9      	ldr	r1, [r5, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001df0:	f011 0104 	ands.w	r1, r1, #4
 8001df4:	d173      	bne.n	8001ede <HAL_ADC_Init+0x1be>
    ADC_STATE_CLR_SET(hadc->State,
 8001df6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001df8:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001dfc:	f042 0202 	orr.w	r2, r2, #2
 8001e00:	6422      	str	r2, [r4, #64]	; 0x40
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e02:	2300      	movs	r3, #0
 8001e04:	9302      	str	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e06:	68ab      	ldr	r3, [r5, #8]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d045      	beq.n	8001e9c <HAL_ADC_Init+0x17c>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e10:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <HAL_ADC_Init+0x1dc>)
 8001e12:	6893      	ldr	r3, [r2, #8]
 8001e14:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e18:	6865      	ldr	r5, [r4, #4]
 8001e1a:	432b      	orrs	r3, r5
 8001e1c:	6093      	str	r3, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e1e:	7e62      	ldrb	r2, [r4, #25]
 8001e20:	0353      	lsls	r3, r2, #13
 8001e22:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e24:	2d01      	cmp	r5, #1
 8001e26:	d001      	beq.n	8001e2c <HAL_ADC_Init+0x10c>
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	68e1      	ldr	r1, [r4, #12]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	68a1      	ldr	r1, [r4, #8]
 8001e34:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e36:	f894 1020 	ldrb.w	r1, [r4, #32]
 8001e3a:	2901      	cmp	r1, #1
 8001e3c:	d033      	beq.n	8001ea6 <HAL_ADC_Init+0x186>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e40:	2a01      	cmp	r2, #1
 8001e42:	d002      	beq.n	8001e4a <HAL_ADC_Init+0x12a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e46:	430a      	orrs	r2, r1
 8001e48:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	6891      	ldr	r1, [r2, #8]
 8001e4e:	f011 0f0c 	tst.w	r1, #12
 8001e52:	d10c      	bne.n	8001e6e <HAL_ADC_Init+0x14e>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e54:	68d1      	ldr	r1, [r2, #12]
 8001e56:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001e5a:	f021 0102 	bic.w	r1, r1, #2
 8001e5e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e60:	7e21      	ldrb	r1, [r4, #24]
 8001e62:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001e6c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001e6e:	6821      	ldr	r1, [r4, #0]
 8001e70:	68cd      	ldr	r5, [r1, #12]
 8001e72:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_ADC_Init+0x1e0>)
 8001e74:	402a      	ands	r2, r5
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d025      	beq.n	8001ecc <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e80:	6822      	ldr	r2, [r4, #0]
 8001e82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e84:	f023 030f 	bic.w	r3, r3, #15
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e90:	f023 0303 	bic.w	r3, r3, #3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6423      	str	r3, [r4, #64]	; 0x40
 8001e9a:	e027      	b.n	8001eec <HAL_ADC_Init+0x1cc>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	f013 0f01 	tst.w	r3, #1
 8001ea2:	d1bc      	bne.n	8001e1e <HAL_ADC_Init+0xfe>
 8001ea4:	e7b4      	b.n	8001e10 <HAL_ADC_Init+0xf0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea6:	b932      	cbnz	r2, 8001eb6 <HAL_ADC_Init+0x196>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ea8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	e7c3      	b.n	8001e3e <HAL_ADC_Init+0x11e>
        ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eb8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	6462      	str	r2, [r4, #68]	; 0x44
 8001eca:	e7b8      	b.n	8001e3e <HAL_ADC_Init+0x11e>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ecc:	6821      	ldr	r1, [r4, #0]
 8001ece:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001ed0:	f023 030f 	bic.w	r3, r3, #15
 8001ed4:	69e2      	ldr	r2, [r4, #28]
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	630b      	str	r3, [r1, #48]	; 0x30
 8001edc:	e7d5      	b.n	8001e8a <HAL_ADC_Init+0x16a>
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee0:	f023 0312 	bic.w	r3, r3, #18
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8001eea:	2001      	movs	r0, #1
}
 8001eec:	b017      	add	sp, #92	; 0x5c
 8001eee:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	e7fb      	b.n	8001eec <HAL_ADC_Init+0x1cc>
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	50000300 	.word	0x50000300
 8001f00:	fff0c007 	.word	0xfff0c007

08001f04 <HAL_ADC_Start_DMA>:
{
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f06:	460d      	mov	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f08:	6801      	ldr	r1, [r0, #0]
 8001f0a:	6889      	ldr	r1, [r1, #8]
 8001f0c:	f011 0f04 	tst.w	r1, #4
 8001f10:	d159      	bne.n	8001fc6 <HAL_ADC_Start_DMA+0xc2>
 8001f12:	4604      	mov	r4, r0
 8001f14:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8001f16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d056      	beq.n	8001fcc <HAL_ADC_Start_DMA+0xc8>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = ADC_Enable(hadc);
 8001f24:	f7ff fe84 	bl	8001c30 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001f28:	4607      	mov	r7, r0
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d147      	bne.n	8001fbe <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001f30:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001f34:	f021 0101 	bic.w	r1, r1, #1
 8001f38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f3c:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f44:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f4e:	d005      	beq.n	8001f5c <HAL_ADC_Start_DMA+0x58>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f5a:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f5e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001f62:	d029      	beq.n	8001fb8 <HAL_ADC_Start_DMA+0xb4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f66:	f023 0306 	bic.w	r3, r3, #6
 8001f6a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <HAL_ADC_Start_DMA+0xcc>)
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_ADC_Start_DMA+0xd0>)
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f80:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_ADC_Start_DMA+0xd4>)
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	221c      	movs	r2, #28
 8001f88:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	6853      	ldr	r3, [r2, #4]
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	68d3      	ldr	r3, [r2, #12]
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f9e:	6821      	ldr	r1, [r4, #0]
 8001fa0:	4633      	mov	r3, r6
 8001fa2:	462a      	mov	r2, r5
 8001fa4:	3140      	adds	r1, #64	; 0x40
 8001fa6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fa8:	f000 fdd4 	bl	8002b54 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001fac:	6822      	ldr	r2, [r4, #0]
 8001fae:	6893      	ldr	r3, [r2, #8]
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	e007      	b.n	8001fc8 <HAL_ADC_Start_DMA+0xc4>
          ADC_CLEAR_ERRORCODE(hadc);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6463      	str	r3, [r4, #68]	; 0x44
 8001fbc:	e7d6      	b.n	8001f6c <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001fc4:	e000      	b.n	8001fc8 <HAL_ADC_Start_DMA+0xc4>
    tmp_hal_status = HAL_BUSY;
 8001fc6:	2702      	movs	r7, #2
}
 8001fc8:	4638      	mov	r0, r7
 8001fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001fcc:	2702      	movs	r7, #2
 8001fce:	e7fb      	b.n	8001fc8 <HAL_ADC_Start_DMA+0xc4>
 8001fd0:	08001cd5 	.word	0x08001cd5
 8001fd4:	08001ccb 	.word	0x08001ccb
 8001fd8:	08001cb1 	.word	0x08001cb1

08001fdc <HAL_ADCEx_InjectedStart_IT>:
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001fdc:	6803      	ldr	r3, [r0, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f013 0f08 	tst.w	r3, #8
 8001fe4:	d14e      	bne.n	8002084 <HAL_ADCEx_InjectedStart_IT+0xa8>
{
 8001fe6:	b510      	push	{r4, lr}
 8001fe8:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8001fea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d04a      	beq.n	8002088 <HAL_ADCEx_InjectedStart_IT+0xac>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8001ff8:	f7ff fe1a 	bl	8001c30 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d13d      	bne.n	800207c <HAL_ADCEx_InjectedStart_IT+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 8002000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800200e:	6423      	str	r3, [r4, #64]	; 0x40
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002012:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002016:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800201a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800201e:	d101      	bne.n	8002024 <HAL_ADCEx_InjectedStart_IT+0x48>
        ADC_CLEAR_ERRORCODE(hadc);
 8002020:	2300      	movs	r3, #0
 8002022:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8002024:	2300      	movs	r3, #0
 8002026:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	2260      	movs	r2, #96	; 0x60
 800202e:	601a      	str	r2, [r3, #0]
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8002038:	d003      	beq.n	8002042 <HAL_ADCEx_InjectedStart_IT+0x66>
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002040:	605a      	str	r2, [r3, #4]
      switch(hadc->Init.EOCSelection)
 8002042:	6963      	ldr	r3, [r4, #20]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d00e      	beq.n	8002066 <HAL_ADCEx_InjectedStart_IT+0x8a>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	6853      	ldr	r3, [r2, #4]
 800204c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002050:	6053      	str	r3, [r2, #4]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800205a:	d112      	bne.n	8002082 <HAL_ADCEx_InjectedStart_IT+0xa6>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	e00d      	b.n	8002082 <HAL_ADCEx_InjectedStart_IT+0xa6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	6853      	ldr	r3, [r2, #4]
 800206a:	f023 0320 	bic.w	r3, r3, #32
 800206e:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	6853      	ldr	r3, [r2, #4]
 8002074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002078:	6053      	str	r3, [r2, #4]
          break;
 800207a:	e7ea      	b.n	8002052 <HAL_ADCEx_InjectedStart_IT+0x76>
      __HAL_UNLOCK(hadc);
 800207c:	2300      	movs	r3, #0
 800207e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002082:	bd10      	pop	{r4, pc}
    tmp_hal_status = HAL_BUSY;
 8002084:	2002      	movs	r0, #2
}
 8002086:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002088:	2002      	movs	r0, #2
 800208a:	e7fa      	b.n	8002082 <HAL_ADCEx_InjectedStart_IT+0xa6>

0800208c <HAL_ADCEx_InjectedConvCpltCallback>:
}
 800208c:	4770      	bx	lr

0800208e <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 800208e:	4770      	bx	lr

08002090 <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 8002090:	4770      	bx	lr

08002092 <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 8002092:	4770      	bx	lr

08002094 <HAL_ADC_IRQHandler>:
{
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800209c:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800209e:	f015 0f04 	tst.w	r5, #4
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_IRQHandler+0x16>
 80020a4:	f016 0f04 	tst.w	r6, #4
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x22>
 80020aa:	f015 0f08 	tst.w	r5, #8
 80020ae:	d038      	beq.n	8002122 <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020b0:	f016 0f08 	tst.w	r6, #8
 80020b4:	d035      	beq.n	8002122 <HAL_ADC_IRQHandler+0x8e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020b8:	f012 0f10 	tst.w	r2, #16
 80020bc:	d103      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80020c6:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80020ce:	d122      	bne.n	8002116 <HAL_ADC_IRQHandler+0x82>
 80020d0:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80020d4:	d11f      	bne.n	8002116 <HAL_ADC_IRQHandler+0x82>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80020d6:	f015 0f08 	tst.w	r5, #8
 80020da:	d01c      	beq.n	8002116 <HAL_ADC_IRQHandler+0x82>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	f012 0f04 	tst.w	r2, #4
 80020e2:	d110      	bne.n	8002106 <HAL_ADC_IRQHandler+0x72>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	f022 020c 	bic.w	r2, r2, #12
 80020ea:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f2:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80020fa:	d10c      	bne.n	8002116 <HAL_ADC_IRQHandler+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6423      	str	r3, [r4, #64]	; 0x40
 8002104:	e007      	b.n	8002116 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff fd42 	bl	8001ba0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002122:	f015 0f20 	tst.w	r5, #32
 8002126:	d002      	beq.n	800212e <HAL_ADC_IRQHandler+0x9a>
 8002128:	f016 0f20 	tst.w	r6, #32
 800212c:	d105      	bne.n	800213a <HAL_ADC_IRQHandler+0xa6>
 800212e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002132:	d040      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x122>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002134:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002138:	d03d      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x122>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800213a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800213c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002140:	6423      	str	r3, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002148:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800214c:	d12d      	bne.n	80021aa <HAL_ADC_IRQHandler+0x116>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800214e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002152:	d006      	beq.n	8002162 <HAL_ADC_IRQHandler+0xce>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002154:	68da      	ldr	r2, [r3, #12]
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002156:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800215a:	d126      	bne.n	80021aa <HAL_ADC_IRQHandler+0x116>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800215c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8002160:	d123      	bne.n	80021aa <HAL_ADC_IRQHandler+0x116>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002162:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002166:	d020      	beq.n	80021aa <HAL_ADC_IRQHandler+0x116>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002168:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800216a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800216e:	d11c      	bne.n	80021aa <HAL_ADC_IRQHandler+0x116>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	f012 0f08 	tst.w	r2, #8
 8002176:	d110      	bne.n	800219a <HAL_ADC_IRQHandler+0x106>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800217e:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002186:	6423      	str	r3, [r4, #64]	; 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800218a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800218e:	d10c      	bne.n	80021aa <HAL_ADC_IRQHandler+0x116>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6423      	str	r3, [r4, #64]	; 0x40
 8002198:	e007      	b.n	80021aa <HAL_ADC_IRQHandler+0x116>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	6423      	str	r3, [r4, #64]	; 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ff6e 	bl	800208c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	2260      	movs	r2, #96	; 0x60
 80021b4:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021b6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80021ba:	d002      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x12e>
 80021bc:	f016 0f80 	tst.w	r6, #128	; 0x80
 80021c0:	d133      	bne.n	800222a <HAL_ADC_IRQHandler+0x196>
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021c2:	f415 7f80 	tst.w	r5, #256	; 0x100
 80021c6:	d002      	beq.n	80021ce <HAL_ADC_IRQHandler+0x13a>
 80021c8:	f416 7f80 	tst.w	r6, #256	; 0x100
 80021cc:	d138      	bne.n	8002240 <HAL_ADC_IRQHandler+0x1ac>
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021ce:	f415 7f00 	tst.w	r5, #512	; 0x200
 80021d2:	d002      	beq.n	80021da <HAL_ADC_IRQHandler+0x146>
 80021d4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80021d8:	d13e      	bne.n	8002258 <HAL_ADC_IRQHandler+0x1c4>
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021da:	f015 0f10 	tst.w	r5, #16
 80021de:	d01d      	beq.n	800221c <HAL_ADC_IRQHandler+0x188>
 80021e0:	f016 0f10 	tst.w	r6, #16
 80021e4:	d01a      	beq.n	800221c <HAL_ADC_IRQHandler+0x188>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d009      	beq.n	8002200 <HAL_ADC_IRQHandler+0x16c>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_ADC_IRQHandler+0x208>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f013 0f1f 	tst.w	r3, #31
 80021f4:	d13c      	bne.n	8002270 <HAL_ADC_IRQHandler+0x1dc>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f013 0f01 	tst.w	r3, #1
 80021fe:	d00a      	beq.n	8002216 <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002208:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fcc8 	bl	8001ba6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	2210      	movs	r2, #16
 800221a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800221c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002220:	d002      	beq.n	8002228 <HAL_ADC_IRQHandler+0x194>
 8002222:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002226:	d129      	bne.n	800227c <HAL_ADC_IRQHandler+0x1e8>
}
 8002228:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800222a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fcb6 	bl	8001ba4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e7c0      	b.n	80021c2 <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002246:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff ff21 	bl	8002090 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e7ba      	b.n	80021ce <HAL_ADC_IRQHandler+0x13a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800225a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225e:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ff16 	bl	8002092 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e7b4      	b.n	80021da <HAL_ADC_IRQHandler+0x146>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_ADC_IRQHandler+0x208>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8002278:	d0cd      	beq.n	8002216 <HAL_ADC_IRQHandler+0x182>
 800227a:	e7c1      	b.n	8002200 <HAL_ADC_IRQHandler+0x16c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800227c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800227e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002282:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002284:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002292:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff fefa 	bl	800208e <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800229a:	e7c5      	b.n	8002228 <HAL_ADC_IRQHandler+0x194>
 800229c:	50000300 	.word	0x50000300

080022a0 <HAL_ADC_ConfigChannel>:
{
 80022a0:	b430      	push	{r4, r5}
 80022a2:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 80022a4:	2200      	movs	r2, #0
 80022a6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80022a8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80022ac:	2a01      	cmp	r2, #1
 80022ae:	f000 819b 	beq.w	80025e8 <HAL_ADC_ConfigChannel+0x348>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2201      	movs	r2, #1
 80022b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022ba:	6800      	ldr	r0, [r0, #0]
 80022bc:	6882      	ldr	r2, [r0, #8]
 80022be:	f012 0f04 	tst.w	r2, #4
 80022c2:	f040 8186 	bne.w	80025d2 <HAL_ADC_ConfigChannel+0x332>
    if (sConfig->Rank < 5U)
 80022c6:	684a      	ldr	r2, [r1, #4]
 80022c8:	2a04      	cmp	r2, #4
 80022ca:	d837      	bhi.n	800233c <HAL_ADC_ConfigChannel+0x9c>
      MODIFY_REG(hadc->Instance->SQR1,
 80022cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80022ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80022d2:	0052      	lsls	r2, r2, #1
 80022d4:	f04f 0c1f 	mov.w	ip, #31
 80022d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80022dc:	ea24 0c0c 	bic.w	ip, r4, ip
 80022e0:	680c      	ldr	r4, [r1, #0]
 80022e2:	fa04 f202 	lsl.w	r2, r4, r2
 80022e6:	ea4c 0202 	orr.w	r2, ip, r2
 80022ea:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	6882      	ldr	r2, [r0, #8]
 80022f0:	f012 0f0c 	tst.w	r2, #12
 80022f4:	d172      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x13c>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80022f6:	680a      	ldr	r2, [r1, #0]
 80022f8:	2a09      	cmp	r2, #9
 80022fa:	d956      	bls.n	80023aa <HAL_ADC_ConfigChannel+0x10a>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022fc:	6984      	ldr	r4, [r0, #24]
 80022fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002302:	3a1e      	subs	r2, #30
 8002304:	f04f 0c07 	mov.w	ip, #7
 8002308:	fa0c fc02 	lsl.w	ip, ip, r2
 800230c:	ea24 040c 	bic.w	r4, r4, ip
 8002310:	688d      	ldr	r5, [r1, #8]
 8002312:	fa05 f202 	lsl.w	r2, r5, r2
 8002316:	4322      	orrs	r2, r4
 8002318:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800231a:	6948      	ldr	r0, [r1, #20]
 800231c:	681c      	ldr	r4, [r3, #0]
 800231e:	68e2      	ldr	r2, [r4, #12]
 8002320:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002324:	0052      	lsls	r2, r2, #1
 8002326:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 800232a:	6908      	ldr	r0, [r1, #16]
 800232c:	3801      	subs	r0, #1
 800232e:	2803      	cmp	r0, #3
 8002330:	f200 8093 	bhi.w	800245a <HAL_ADC_ConfigChannel+0x1ba>
 8002334:	e8df f000 	tbb	[pc, r0]
 8002338:	867b7048 	.word	0x867b7048
    else if (sConfig->Rank < 10U)
 800233c:	2a09      	cmp	r2, #9
 800233e:	d810      	bhi.n	8002362 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR2,
 8002340:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002342:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002346:	0052      	lsls	r2, r2, #1
 8002348:	3a1e      	subs	r2, #30
 800234a:	f04f 0c1f 	mov.w	ip, #31
 800234e:	fa0c fc02 	lsl.w	ip, ip, r2
 8002352:	ea24 040c 	bic.w	r4, r4, ip
 8002356:	680d      	ldr	r5, [r1, #0]
 8002358:	fa05 f202 	lsl.w	r2, r5, r2
 800235c:	4322      	orrs	r2, r4
 800235e:	6342      	str	r2, [r0, #52]	; 0x34
 8002360:	e7c4      	b.n	80022ec <HAL_ADC_ConfigChannel+0x4c>
    else if (sConfig->Rank < 15U)
 8002362:	2a0e      	cmp	r2, #14
 8002364:	d810      	bhi.n	8002388 <HAL_ADC_ConfigChannel+0xe8>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002366:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002368:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800236c:	0052      	lsls	r2, r2, #1
 800236e:	3a3c      	subs	r2, #60	; 0x3c
 8002370:	f04f 0c1f 	mov.w	ip, #31
 8002374:	fa0c fc02 	lsl.w	ip, ip, r2
 8002378:	ea24 040c 	bic.w	r4, r4, ip
 800237c:	680d      	ldr	r5, [r1, #0]
 800237e:	fa05 f202 	lsl.w	r2, r5, r2
 8002382:	4322      	orrs	r2, r4
 8002384:	6382      	str	r2, [r0, #56]	; 0x38
 8002386:	e7b1      	b.n	80022ec <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002388:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800238a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800238e:	0052      	lsls	r2, r2, #1
 8002390:	3a5a      	subs	r2, #90	; 0x5a
 8002392:	f04f 0c1f 	mov.w	ip, #31
 8002396:	fa0c fc02 	lsl.w	ip, ip, r2
 800239a:	ea24 040c 	bic.w	r4, r4, ip
 800239e:	680d      	ldr	r5, [r1, #0]
 80023a0:	fa05 f202 	lsl.w	r2, r5, r2
 80023a4:	4322      	orrs	r2, r4
 80023a6:	63c2      	str	r2, [r0, #60]	; 0x3c
 80023a8:	e7a0      	b.n	80022ec <HAL_ADC_ConfigChannel+0x4c>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023aa:	6944      	ldr	r4, [r0, #20]
 80023ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023b0:	f04f 0c07 	mov.w	ip, #7
 80023b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80023b8:	ea24 040c 	bic.w	r4, r4, ip
 80023bc:	688d      	ldr	r5, [r1, #8]
 80023be:	fa05 f202 	lsl.w	r2, r5, r2
 80023c2:	4322      	orrs	r2, r4
 80023c4:	6142      	str	r2, [r0, #20]
 80023c6:	e7a8      	b.n	800231a <HAL_ADC_ConfigChannel+0x7a>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023c8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80023ca:	4888      	ldr	r0, [pc, #544]	; (80025ec <HAL_ADC_ConfigChannel+0x34c>)
 80023cc:	4028      	ands	r0, r5
 80023ce:	680d      	ldr	r5, [r1, #0]
 80023d0:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80023d4:	4310      	orrs	r0, r2
 80023d6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80023da:	6620      	str	r0, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	6882      	ldr	r2, [r0, #8]
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	2a01      	cmp	r2, #1
 80023e6:	d068      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023e8:	68ca      	ldr	r2, [r1, #12]
 80023ea:	2a01      	cmp	r2, #1
 80023ec:	d06b      	beq.n	80024c6 <HAL_ADC_ConfigChannel+0x226>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023ee:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 80023f2:	2401      	movs	r4, #1
 80023f4:	680d      	ldr	r5, [r1, #0]
 80023f6:	40ac      	lsls	r4, r5
 80023f8:	ea22 0204 	bic.w	r2, r2, r4
 80023fc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002400:	680a      	ldr	r2, [r1, #0]
 8002402:	2a10      	cmp	r2, #16
 8002404:	f000 8088 	beq.w	8002518 <HAL_ADC_ConfigChannel+0x278>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002408:	2a11      	cmp	r2, #17
 800240a:	f000 809b 	beq.w	8002544 <HAL_ADC_ConfigChannel+0x2a4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800240e:	2a12      	cmp	r2, #18
 8002410:	f000 809e 	beq.w	8002550 <HAL_ADC_ConfigChannel+0x2b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	2000      	movs	r0, #0
 8002416:	e0e1      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002418:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800241a:	4874      	ldr	r0, [pc, #464]	; (80025ec <HAL_ADC_ConfigChannel+0x34c>)
 800241c:	4028      	ands	r0, r5
 800241e:	680d      	ldr	r5, [r1, #0]
 8002420:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8002424:	4310      	orrs	r0, r2
 8002426:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800242a:	6660      	str	r0, [r4, #100]	; 0x64
      break;
 800242c:	e7d6      	b.n	80023dc <HAL_ADC_ConfigChannel+0x13c>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800242e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002430:	486e      	ldr	r0, [pc, #440]	; (80025ec <HAL_ADC_ConfigChannel+0x34c>)
 8002432:	4028      	ands	r0, r5
 8002434:	680d      	ldr	r5, [r1, #0]
 8002436:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800243a:	4310      	orrs	r0, r2
 800243c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002440:	66a0      	str	r0, [r4, #104]	; 0x68
      break;
 8002442:	e7cb      	b.n	80023dc <HAL_ADC_ConfigChannel+0x13c>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002444:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002446:	4869      	ldr	r0, [pc, #420]	; (80025ec <HAL_ADC_ConfigChannel+0x34c>)
 8002448:	4028      	ands	r0, r5
 800244a:	680d      	ldr	r5, [r1, #0]
 800244c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8002450:	4302      	orrs	r2, r0
 8002452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002456:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8002458:	e7c0      	b.n	80023dc <HAL_ADC_ConfigChannel+0x13c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800245c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002460:	6808      	ldr	r0, [r1, #0]
 8002462:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8002466:	d103      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1d0>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002468:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800246a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800246e:	6622      	str	r2, [r4, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002474:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002478:	680c      	ldr	r4, [r1, #0]
 800247a:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 800247e:	d103      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1e8>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002480:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002482:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002486:	6650      	str	r0, [r2, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800248c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002490:	680c      	ldr	r4, [r1, #0]
 8002492:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8002496:	d103      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x200>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002498:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800249a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800249e:	6690      	str	r0, [r2, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80024a4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80024a8:	680c      	ldr	r4, [r1, #0]
 80024aa:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 80024ae:	d195      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x13c>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80024b0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80024b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80024b6:	66d0      	str	r0, [r2, #108]	; 0x6c
 80024b8:	e790      	b.n	80023dc <HAL_ADC_ConfigChannel+0x13c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ba:	6802      	ldr	r2, [r0, #0]
 80024bc:	f012 0f01 	tst.w	r2, #1
 80024c0:	d092      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x148>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c2:	2000      	movs	r0, #0
 80024c4:	e08a      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024c6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 80024ca:	2401      	movs	r4, #1
 80024cc:	680d      	ldr	r5, [r1, #0]
 80024ce:	40ac      	lsls	r4, r5
 80024d0:	4322      	orrs	r2, r4
 80024d2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80024d6:	680a      	ldr	r2, [r1, #0]
 80024d8:	2a09      	cmp	r2, #9
 80024da:	d90e      	bls.n	80024fa <HAL_ADC_ConfigChannel+0x25a>
        MODIFY_REG(hadc->Instance->SMPR2,
 80024dc:	681d      	ldr	r5, [r3, #0]
 80024de:	69a8      	ldr	r0, [r5, #24]
 80024e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024e4:	3a1b      	subs	r2, #27
 80024e6:	2407      	movs	r4, #7
 80024e8:	4094      	lsls	r4, r2
 80024ea:	ea20 0004 	bic.w	r0, r0, r4
 80024ee:	688c      	ldr	r4, [r1, #8]
 80024f0:	fa04 f202 	lsl.w	r2, r4, r2
 80024f4:	4302      	orrs	r2, r0
 80024f6:	61aa      	str	r2, [r5, #24]
 80024f8:	e782      	b.n	8002400 <HAL_ADC_ConfigChannel+0x160>
        MODIFY_REG(hadc->Instance->SMPR1,
 80024fa:	681d      	ldr	r5, [r3, #0]
 80024fc:	6968      	ldr	r0, [r5, #20]
 80024fe:	3201      	adds	r2, #1
 8002500:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002504:	2407      	movs	r4, #7
 8002506:	4094      	lsls	r4, r2
 8002508:	ea20 0004 	bic.w	r0, r0, r4
 800250c:	688c      	ldr	r4, [r1, #8]
 800250e:	fa04 f202 	lsl.w	r2, r4, r2
 8002512:	4302      	orrs	r2, r0
 8002514:	616a      	str	r2, [r5, #20]
 8002516:	e773      	b.n	8002400 <HAL_ADC_ConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_ADC_ConfigChannel+0x350>)
 800251a:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800251c:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002520:	f47f af72 	bne.w	8002408 <HAL_ADC_ConfigChannel+0x168>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002524:	2100      	movs	r1, #0
 8002526:	9102      	str	r1, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	6881      	ldr	r1, [r0, #8]
 800252c:	f001 0103 	and.w	r1, r1, #3
 8002530:	2901      	cmp	r1, #1
 8002532:	d014      	beq.n	800255e <HAL_ADC_ConfigChannel+0x2be>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002534:	2a10      	cmp	r2, #16
 8002536:	d01c      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x2d2>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002538:	2a11      	cmp	r2, #17
 800253a:	d039      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x310>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800253c:	2a12      	cmp	r2, #18
 800253e:	d041      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x324>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002540:	2000      	movs	r0, #0
 8002542:	e04b      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002544:	492a      	ldr	r1, [pc, #168]	; (80025f0 <HAL_ADC_ConfigChannel+0x350>)
 8002546:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002548:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800254c:	d0ea      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x284>
 800254e:	e75e      	b.n	800240e <HAL_ADC_ConfigChannel+0x16e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002550:	4927      	ldr	r1, [pc, #156]	; (80025f0 <HAL_ADC_ConfigChannel+0x350>)
 8002552:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002554:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002558:	d0e4      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x284>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255a:	2000      	movs	r0, #0
 800255c:	e03e      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800255e:	6801      	ldr	r1, [r0, #0]
 8002560:	f011 0f01 	tst.w	r1, #1
 8002564:	d0e6      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x294>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800256e:	2001      	movs	r0, #1
 8002570:	e034      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002572:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002576:	d1df      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x298>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002578:	491d      	ldr	r1, [pc, #116]	; (80025f0 <HAL_ADC_ConfigChannel+0x350>)
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002580:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_ADC_ConfigChannel+0x354>)
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 800258a:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 800258e:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8002592:	fba1 1202 	umull	r1, r2, r1, r2
 8002596:	0c92      	lsrs	r2, r2, #18
 8002598:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800259c:	0052      	lsls	r2, r2, #1
 800259e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80025a0:	9a01      	ldr	r2, [sp, #4]
 80025a2:	b11a      	cbz	r2, 80025ac <HAL_ADC_ConfigChannel+0x30c>
            wait_loop_index--;
 80025a4:	9a01      	ldr	r2, [sp, #4]
 80025a6:	3a01      	subs	r2, #1
 80025a8:	9201      	str	r2, [sp, #4]
 80025aa:	e7f9      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x300>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	e015      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025b0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80025b4:	d1c2      	bne.n	800253c <HAL_ADC_ConfigChannel+0x29c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025b6:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_ADC_ConfigChannel+0x350>)
 80025b8:	688a      	ldr	r2, [r1, #8]
 80025ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025be:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025c2:	e00b      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025c4:	490a      	ldr	r1, [pc, #40]	; (80025f0 <HAL_ADC_ConfigChannel+0x350>)
 80025c6:	688a      	ldr	r2, [r1, #8]
 80025c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025cc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2000      	movs	r0, #0
 80025d0:	e004      	b.n	80025dc <HAL_ADC_ConfigChannel+0x33c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80025da:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80025e2:	b016      	add	sp, #88	; 0x58
 80025e4:	bc30      	pop	{r4, r5}
 80025e6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80025e8:	2002      	movs	r0, #2
 80025ea:	e7fa      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x342>
 80025ec:	83fff000 	.word	0x83fff000
 80025f0:	50000300 	.word	0x50000300
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_ADCEx_InjectedConfigChannel>:
{
 80025f8:	b470      	push	{r4, r5, r6}
 80025fa:	b097      	sub	sp, #92	; 0x5c
 80025fc:	4603      	mov	r3, r0
  __IO uint32_t wait_loop_index = 0U;
 80025fe:	2200      	movs	r2, #0
 8002600:	9201      	str	r2, [sp, #4]
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002602:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 8002604:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002608:	2a01      	cmp	r2, #1
 800260a:	f000 81de 	beq.w	80029ca <HAL_ADCEx_InjectedConfigChannel+0x3d2>
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002614:	2800      	cmp	r0, #0
 8002616:	d033      	beq.n	8002680 <HAL_ADCEx_InjectedConfigChannel+0x88>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8002618:	698a      	ldr	r2, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800261a:	2a01      	cmp	r2, #1
 800261c:	d030      	beq.n	8002680 <HAL_ADCEx_InjectedConfigChannel+0x88>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800261e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002620:	b960      	cbnz	r0, 800263c <HAL_ADCEx_InjectedConfigChannel+0x44>
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002622:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002624:	2200      	movs	r2, #0
 8002626:	649a      	str	r2, [r3, #72]	; 0x48
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002628:	6a0a      	ldr	r2, [r1, #32]
 800262a:	2a01      	cmp	r2, #1
 800262c:	f000 8091 	beq.w	8002752 <HAL_ADCEx_InjectedConfigChannel+0x15a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002630:	6988      	ldr	r0, [r1, #24]
 8002632:	3801      	subs	r0, #1
 8002634:	4302      	orrs	r2, r0
 8002636:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002638:	4302      	orrs	r2, r0
 800263a:	649a      	str	r2, [r3, #72]	; 0x48
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800263c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800263e:	684a      	ldr	r2, [r1, #4]
 8002640:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002644:	0052      	lsls	r2, r2, #1
 8002646:	3202      	adds	r2, #2
 8002648:	241f      	movs	r4, #31
 800264a:	4094      	lsls	r4, r2
 800264c:	ea20 0004 	bic.w	r0, r0, r4
 8002650:	680c      	ldr	r4, [r1, #0]
 8002652:	fa04 f202 	lsl.w	r2, r4, r2
 8002656:	4302      	orrs	r2, r0
 8002658:	649a      	str	r2, [r3, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount --;
 800265a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800265c:	3801      	subs	r0, #1
 800265e:	64d8      	str	r0, [r3, #76]	; 0x4c
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002660:	2800      	cmp	r0, #0
 8002662:	d17a      	bne.n	800275a <HAL_ADCEx_InjectedConfigChannel+0x162>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002664:	681c      	ldr	r4, [r3, #0]
 8002666:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002668:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 800266c:	f420 00ef 	bic.w	r0, r0, #7831552	; 0x778000
 8002670:	f420 40bf 	bic.w	r0, r0, #24448	; 0x5f80
 8002674:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8002678:	4302      	orrs	r2, r0
 800267a:	64e2      	str	r2, [r4, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2000      	movs	r0, #0
 800267e:	e007      	b.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002680:	684a      	ldr	r2, [r1, #4]
 8002682:	2a01      	cmp	r2, #1
 8002684:	d04b      	beq.n	800271e <HAL_ADCEx_InjectedConfigChannel+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 800268e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	6894      	ldr	r4, [r2, #8]
 8002694:	f014 0f08 	tst.w	r4, #8
 8002698:	d10f      	bne.n	80026ba <HAL_ADCEx_InjectedConfigChannel+0xc2>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800269a:	7f4c      	ldrb	r4, [r1, #29]
 800269c:	2c00      	cmp	r4, #0
 800269e:	d15e      	bne.n	800275e <HAL_ADCEx_InjectedConfigChannel+0x166>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80026a0:	68d4      	ldr	r4, [r2, #12]
 80026a2:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80026a6:	7f8d      	ldrb	r5, [r1, #30]
 80026a8:	f891 c01c 	ldrb.w	ip, [r1, #28]
 80026ac:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 80026b0:	ea4c 5c45 	orr.w	ip, ip, r5, lsl #21
 80026b4:	ea44 040c 	orr.w	r4, r4, ip
 80026b8:	60d4      	str	r4, [r2, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	6894      	ldr	r4, [r2, #8]
 80026be:	f014 0f0c 	tst.w	r4, #12
 80026c2:	f040 8082 	bne.w	80027ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80026c6:	6a0c      	ldr	r4, [r1, #32]
 80026c8:	2c01      	cmp	r4, #1
 80026ca:	d058      	beq.n	800277e <HAL_ADCEx_InjectedConfigChannel+0x186>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80026cc:	68d4      	ldr	r4, [r2, #12]
 80026ce:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80026d2:	60d4      	str	r4, [r2, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80026d4:	7f4a      	ldrb	r2, [r1, #29]
 80026d6:	2a01      	cmp	r2, #1
 80026d8:	d059      	beq.n	800278e <HAL_ADCEx_InjectedConfigChannel+0x196>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80026da:	680a      	ldr	r2, [r1, #0]
 80026dc:	2a09      	cmp	r2, #9
 80026de:	d95c      	bls.n	800279a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80026e0:	681e      	ldr	r6, [r3, #0]
 80026e2:	69b4      	ldr	r4, [r6, #24]
 80026e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026e8:	3a1e      	subs	r2, #30
 80026ea:	2507      	movs	r5, #7
 80026ec:	4095      	lsls	r5, r2
 80026ee:	ea24 0405 	bic.w	r4, r4, r5
 80026f2:	688d      	ldr	r5, [r1, #8]
 80026f4:	fa05 f202 	lsl.w	r2, r5, r2
 80026f8:	4322      	orrs	r2, r4
 80026fa:	61b2      	str	r2, [r6, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80026fc:	694c      	ldr	r4, [r1, #20]
 80026fe:	681d      	ldr	r5, [r3, #0]
 8002700:	68ea      	ldr	r2, [r5, #12]
 8002702:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002706:	0052      	lsls	r2, r2, #1
 8002708:	fa04 f202 	lsl.w	r2, r4, r2
    switch (sConfigInjected->InjectedOffsetNumber)
 800270c:	690c      	ldr	r4, [r1, #16]
 800270e:	3c01      	subs	r4, #1
 8002710:	2c03      	cmp	r4, #3
 8002712:	f200 809f 	bhi.w	8002854 <HAL_ADCEx_InjectedConfigChannel+0x25c>
 8002716:	e8df f004 	tbb	[pc, r4]
 800271a:	7c4e      	.short	0x7c4e
 800271c:	9287      	.short	0x9287
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800271e:	6a0a      	ldr	r2, [r1, #32]
 8002720:	2a01      	cmp	r2, #1
 8002722:	d013      	beq.n	800274c <HAL_ADCEx_InjectedConfigChannel+0x154>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002724:	6808      	ldr	r0, [r1, #0]
 8002726:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800272a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800272c:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR           ,
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002732:	f020 40fb 	bic.w	r0, r0, #2105540608	; 0x7d800000
 8002736:	f420 00ef 	bic.w	r0, r0, #7831552	; 0x778000
 800273a:	f420 40bf 	bic.w	r0, r0, #24448	; 0x5f80
 800273e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8002742:	4310      	orrs	r0, r2
 8002744:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002746:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2000      	movs	r0, #0
 800274a:	e7a1      	b.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0x98>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800274c:	680a      	ldr	r2, [r1, #0]
 800274e:	0212      	lsls	r2, r2, #8
 8002750:	e7ed      	b.n	800272e <HAL_ADCEx_InjectedConfigChannel+0x136>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002752:	698a      	ldr	r2, [r1, #24]
 8002754:	3a01      	subs	r2, #1
 8002756:	649a      	str	r2, [r3, #72]	; 0x48
 8002758:	e770      	b.n	800263c <HAL_ADCEx_InjectedConfigChannel+0x44>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275a:	2000      	movs	r0, #0
 800275c:	e798      	b.n	8002690 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800275e:	68d4      	ldr	r4, [r2, #12]
 8002760:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8002764:	7f8d      	ldrb	r5, [r1, #30]
 8002766:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 800276a:	60d4      	str	r4, [r2, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800276c:	7f0a      	ldrb	r2, [r1, #28]
 800276e:	2a01      	cmp	r2, #1
 8002770:	d1a3      	bne.n	80026ba <HAL_ADCEx_InjectedConfigChannel+0xc2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002772:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002774:	f040 0020 	orr.w	r0, r0, #32
 8002778:	6418      	str	r0, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800277a:	4610      	mov	r0, r2
 800277c:	e79d      	b.n	80026ba <HAL_ADCEx_InjectedConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800277e:	68d4      	ldr	r4, [r2, #12]
 8002780:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8002784:	7f4d      	ldrb	r5, [r1, #29]
 8002786:	ea44 6445 	orr.w	r4, r4, r5, lsl #25
 800278a:	60d4      	str	r4, [r2, #12]
 800278c:	e7a5      	b.n	80026da <HAL_ADCEx_InjectedConfigChannel+0xe2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002790:	f040 0020 	orr.w	r0, r0, #32
 8002794:	6418      	str	r0, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002796:	4610      	mov	r0, r2
 8002798:	e79f      	b.n	80026da <HAL_ADCEx_InjectedConfigChannel+0xe2>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800279a:	681e      	ldr	r6, [r3, #0]
 800279c:	6974      	ldr	r4, [r6, #20]
 800279e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027a2:	2507      	movs	r5, #7
 80027a4:	4095      	lsls	r5, r2
 80027a6:	ea24 0405 	bic.w	r4, r4, r5
 80027aa:	688d      	ldr	r5, [r1, #8]
 80027ac:	fa05 f202 	lsl.w	r2, r5, r2
 80027b0:	4322      	orrs	r2, r4
 80027b2:	6172      	str	r2, [r6, #20]
 80027b4:	e7a2      	b.n	80026fc <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80027b6:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 80027b8:	4c85      	ldr	r4, [pc, #532]	; (80029d0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 80027ba:	4034      	ands	r4, r6
 80027bc:	680e      	ldr	r6, [r1, #0]
 80027be:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80027c2:	4314      	orrs	r4, r2
 80027c4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80027c8:	662c      	str	r4, [r5, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ca:	681c      	ldr	r4, [r3, #0]
 80027cc:	68a2      	ldr	r2, [r4, #8]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d06e      	beq.n	80028b4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027d6:	68ca      	ldr	r2, [r1, #12]
 80027d8:	2a01      	cmp	r2, #1
 80027da:	d070      	beq.n	80028be <HAL_ADCEx_InjectedConfigChannel+0x2c6>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80027dc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80027e0:	f04f 0c01 	mov.w	ip, #1
 80027e4:	680d      	ldr	r5, [r1, #0]
 80027e6:	fa0c fc05 	lsl.w	ip, ip, r5
 80027ea:	ea22 020c 	bic.w	r2, r2, ip
 80027ee:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80027f2:	680a      	ldr	r2, [r1, #0]
 80027f4:	2a10      	cmp	r2, #16
 80027f6:	f000 808e 	beq.w	8002916 <HAL_ADCEx_InjectedConfigChannel+0x31e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80027fa:	2a11      	cmp	r2, #17
 80027fc:	f000 80a6 	beq.w	800294c <HAL_ADCEx_InjectedConfigChannel+0x354>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002800:	2a12      	cmp	r2, #18
 8002802:	f000 80a9 	beq.w	8002958 <HAL_ADCEx_InjectedConfigChannel+0x360>
  __HAL_UNLOCK(hadc);
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800280c:	b017      	add	sp, #92	; 0x5c
 800280e:	bc70      	pop	{r4, r5, r6}
 8002810:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002812:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 8002814:	4c6e      	ldr	r4, [pc, #440]	; (80029d0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8002816:	4034      	ands	r4, r6
 8002818:	680e      	ldr	r6, [r1, #0]
 800281a:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800281e:	4314      	orrs	r4, r2
 8002820:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002824:	666c      	str	r4, [r5, #100]	; 0x64
      break;
 8002826:	e7d0      	b.n	80027ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002828:	6eae      	ldr	r6, [r5, #104]	; 0x68
 800282a:	4c69      	ldr	r4, [pc, #420]	; (80029d0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 800282c:	4034      	ands	r4, r6
 800282e:	680e      	ldr	r6, [r1, #0]
 8002830:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002834:	4314      	orrs	r4, r2
 8002836:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800283a:	66ac      	str	r4, [r5, #104]	; 0x68
      break;
 800283c:	e7c5      	b.n	80027ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 800283e:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8002840:	4c63      	ldr	r4, [pc, #396]	; (80029d0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8002842:	4034      	ands	r4, r6
 8002844:	680e      	ldr	r6, [r1, #0]
 8002846:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800284a:	4322      	orrs	r2, r4
 800284c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002850:	66ea      	str	r2, [r5, #108]	; 0x6c
      break;
 8002852:	e7ba      	b.n	80027ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002854:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002856:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800285a:	680c      	ldr	r4, [r1, #0]
 800285c:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8002860:	d103      	bne.n	800286a <HAL_ADCEx_InjectedConfigChannel+0x272>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002862:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002864:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002868:	662a      	str	r2, [r5, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800286e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002872:	680d      	ldr	r5, [r1, #0]
 8002874:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8002878:	d103      	bne.n	8002882 <HAL_ADCEx_InjectedConfigChannel+0x28a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800287a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800287c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8002880:	6654      	str	r4, [r2, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8002886:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800288a:	680d      	ldr	r5, [r1, #0]
 800288c:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8002890:	d103      	bne.n	800289a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002892:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8002894:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8002898:	6694      	str	r4, [r2, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 800289e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80028a2:	680d      	ldr	r5, [r1, #0]
 80028a4:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 80028a8:	d18f      	bne.n	80027ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80028aa:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 80028ac:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80028b0:	66d4      	str	r4, [r2, #108]	; 0x6c
 80028b2:	e78a      	b.n	80027ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	f012 0f01 	tst.w	r2, #1
 80028ba:	d1a4      	bne.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
 80028bc:	e78b      	b.n	80027d6 <HAL_ADCEx_InjectedConfigChannel+0x1de>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80028be:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80028c2:	680d      	ldr	r5, [r1, #0]
 80028c4:	f04f 0c01 	mov.w	ip, #1
 80028c8:	fa0c fc05 	lsl.w	ip, ip, r5
 80028cc:	ea42 020c 	orr.w	r2, r2, ip
 80028d0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80028d4:	680a      	ldr	r2, [r1, #0]
 80028d6:	2a09      	cmp	r2, #9
 80028d8:	d90e      	bls.n	80028f8 <HAL_ADCEx_InjectedConfigChannel+0x300>
        MODIFY_REG(hadc->Instance->SMPR2,
 80028da:	681e      	ldr	r6, [r3, #0]
 80028dc:	69b4      	ldr	r4, [r6, #24]
 80028de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028e2:	3a1b      	subs	r2, #27
 80028e4:	2507      	movs	r5, #7
 80028e6:	4095      	lsls	r5, r2
 80028e8:	ea24 0405 	bic.w	r4, r4, r5
 80028ec:	688d      	ldr	r5, [r1, #8]
 80028ee:	fa05 f202 	lsl.w	r2, r5, r2
 80028f2:	4322      	orrs	r2, r4
 80028f4:	61b2      	str	r2, [r6, #24]
 80028f6:	e77c      	b.n	80027f2 <HAL_ADCEx_InjectedConfigChannel+0x1fa>
        MODIFY_REG(hadc->Instance->SMPR1,
 80028f8:	681e      	ldr	r6, [r3, #0]
 80028fa:	6974      	ldr	r4, [r6, #20]
 80028fc:	3201      	adds	r2, #1
 80028fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002902:	2507      	movs	r5, #7
 8002904:	4095      	lsls	r5, r2
 8002906:	ea24 0405 	bic.w	r4, r4, r5
 800290a:	688d      	ldr	r5, [r1, #8]
 800290c:	fa05 f202 	lsl.w	r2, r5, r2
 8002910:	4322      	orrs	r2, r4
 8002912:	6172      	str	r2, [r6, #20]
 8002914:	e76d      	b.n	80027f2 <HAL_ADCEx_InjectedConfigChannel+0x1fa>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002916:	492f      	ldr	r1, [pc, #188]	; (80029d4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002918:	6889      	ldr	r1, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800291a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800291e:	f47f af6c 	bne.w	80027fa <HAL_ADCEx_InjectedConfigChannel+0x202>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002922:	2100      	movs	r1, #0
 8002924:	9102      	str	r1, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002926:	681c      	ldr	r4, [r3, #0]
 8002928:	68a1      	ldr	r1, [r4, #8]
 800292a:	f001 0103 	and.w	r1, r1, #3
 800292e:	2901      	cmp	r1, #1
 8002930:	d019      	beq.n	8002966 <HAL_ADCEx_InjectedConfigChannel+0x36e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002932:	2a10      	cmp	r2, #16
 8002934:	d021      	beq.n	800297a <HAL_ADCEx_InjectedConfigChannel+0x382>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002936:	2a11      	cmp	r2, #17
 8002938:	d03e      	beq.n	80029b8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800293a:	2a12      	cmp	r2, #18
 800293c:	f47f af63 	bne.w	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002940:	4924      	ldr	r1, [pc, #144]	; (80029d4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002942:	688a      	ldr	r2, [r1, #8]
 8002944:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002948:	608a      	str	r2, [r1, #8]
 800294a:	e75c      	b.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800294c:	4921      	ldr	r1, [pc, #132]	; (80029d4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 800294e:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002950:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002954:	d0e5      	beq.n	8002922 <HAL_ADCEx_InjectedConfigChannel+0x32a>
 8002956:	e753      	b.n	8002800 <HAL_ADCEx_InjectedConfigChannel+0x208>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002958:	491e      	ldr	r1, [pc, #120]	; (80029d4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 800295a:	6889      	ldr	r1, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800295c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002960:	f47f af51 	bne.w	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
 8002964:	e7dd      	b.n	8002922 <HAL_ADCEx_InjectedConfigChannel+0x32a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002966:	6821      	ldr	r1, [r4, #0]
 8002968:	f011 0f01 	tst.w	r1, #1
 800296c:	d0e1      	beq.n	8002932 <HAL_ADCEx_InjectedConfigChannel+0x33a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002970:	f042 0220 	orr.w	r2, r2, #32
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	e745      	b.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800297a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800297e:	d1da      	bne.n	8002936 <HAL_ADCEx_InjectedConfigChannel+0x33e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002980:	4914      	ldr	r1, [pc, #80]	; (80029d4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002982:	688a      	ldr	r2, [r1, #8]
 8002984:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002988:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8002992:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8002996:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 800299a:	fba1 1202 	umull	r1, r2, r1, r2
 800299e:	0c92      	lsrs	r2, r2, #18
 80029a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029a4:	0052      	lsls	r2, r2, #1
 80029a6:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80029a8:	e002      	b.n	80029b0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
            wait_loop_index--;
 80029aa:	9a01      	ldr	r2, [sp, #4]
 80029ac:	3a01      	subs	r2, #1
 80029ae:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80029b0:	9a01      	ldr	r2, [sp, #4]
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	d1f9      	bne.n	80029aa <HAL_ADCEx_InjectedConfigChannel+0x3b2>
 80029b6:	e726      	b.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029b8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80029bc:	d1bd      	bne.n	800293a <HAL_ADCEx_InjectedConfigChannel+0x342>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029be:	4905      	ldr	r1, [pc, #20]	; (80029d4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 80029c0:	688a      	ldr	r2, [r1, #8]
 80029c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029c6:	608a      	str	r2, [r1, #8]
 80029c8:	e71d      	b.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x20e>
  __HAL_LOCK(hadc);
 80029ca:	2002      	movs	r0, #2
 80029cc:	e71e      	b.n	800280c <HAL_ADCEx_InjectedConfigChannel+0x214>
 80029ce:	bf00      	nop
 80029d0:	83fff000 	.word	0x83fff000
 80029d4:	50000300 	.word	0x50000300
 80029d8:	20000000 	.word	0x20000000

080029dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	0200      	lsls	r0, r0, #8
 80029ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80029f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029f8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_NVIC_SetPriority+0x68>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0a:	f1c3 0c07 	rsb	ip, r3, #7
 8002a0e:	f1bc 0f04 	cmp.w	ip, #4
 8002a12:	bf28      	it	cs
 8002a14:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a18:	f103 0e04 	add.w	lr, r3, #4
 8002a1c:	f1be 0f06 	cmp.w	lr, #6
 8002a20:	d918      	bls.n	8002a54 <HAL_NVIC_SetPriority+0x54>
 8002a22:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 3eff 	mov.w	lr, #4294967295
 8002a28:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002a2c:	ea21 010c 	bic.w	r1, r1, ip
 8002a30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a32:	fa0e f303 	lsl.w	r3, lr, r3
 8002a36:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	db0b      	blt.n	8002a58 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	0109      	lsls	r1, r1, #4
 8002a42:	b2c9      	uxtb	r1, r1
 8002a44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a4c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a50:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a54:	2300      	movs	r3, #0
 8002a56:	e7e5      	b.n	8002a24 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	f000 000f 	and.w	r0, r0, #15
 8002a5c:	0109      	lsls	r1, r1, #4
 8002a5e:	b2c9      	uxtb	r1, r1
 8002a60:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <HAL_NVIC_SetPriority+0x6c>)
 8002a62:	5419      	strb	r1, [r3, r0]
 8002a64:	e7f4      	b.n	8002a50 <HAL_NVIC_SetPriority+0x50>
 8002a66:	bf00      	nop
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	e000ed14 	.word	0xe000ed14

08002a70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a70:	2800      	cmp	r0, #0
 8002a72:	db07      	blt.n	8002a84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a74:	f000 021f 	and.w	r2, r0, #31
 8002a78:	0940      	lsrs	r0, r0, #5
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	4a02      	ldr	r2, [pc, #8]	; (8002a88 <HAL_NVIC_EnableIRQ+0x18>)
 8002a80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	3801      	subs	r0, #1
 8002a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a92:	d20b      	bcs.n	8002aac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <HAL_SYSTICK_Config+0x24>)
 8002a9c:	21f0      	movs	r1, #240	; 0xf0
 8002a9e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aaa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002aac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b430      	push	{r4, r5}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ab6:	2401      	movs	r4, #1
 8002ab8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002aba:	40ac      	lsls	r4, r5
 8002abc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002abe:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ac0:	6804      	ldr	r4, [r0, #0]
 8002ac2:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac4:	6843      	ldr	r3, [r0, #4]
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d005      	beq.n	8002ad6 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002aca:	6803      	ldr	r3, [r0, #0]
 8002acc:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002ace:	6803      	ldr	r3, [r0, #0]
 8002ad0:	60da      	str	r2, [r3, #12]
  }
}
 8002ad2:	bc30      	pop	{r4, r5}
 8002ad4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002ad6:	6803      	ldr	r3, [r0, #0]
 8002ad8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002ada:	6803      	ldr	r3, [r0, #0]
 8002adc:	60d9      	str	r1, [r3, #12]
 8002ade:	e7f8      	b.n	8002ad2 <DMA_SetConfig+0x1e>

08002ae0 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ae0:	6802      	ldr	r2, [r0, #0]
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <DMA_CalcBaseAndBitshift+0x18>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <DMA_CalcBaseAndBitshift+0x1c>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002af2:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <DMA_CalcBaseAndBitshift+0x20>)
 8002af4:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8002af6:	4770      	bx	lr
 8002af8:	bffdfff8 	.word	0xbffdfff8
 8002afc:	cccccccd 	.word	0xcccccccd
 8002b00:	40020000 	.word	0x40020000

08002b04 <HAL_DMA_Init>:
  if(NULL == hdma)
 8002b04:	b320      	cbz	r0, 8002b50 <HAL_DMA_Init+0x4c>
{ 
 8002b06:	b510      	push	{r4, lr}
 8002b08:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002b10:	6801      	ldr	r1, [r0, #0]
 8002b12:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b14:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002b18:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002b1c:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8002b20:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	68e0      	ldr	r0, [r4, #12]
 8002b24:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	6960      	ldr	r0, [r4, #20]
 8002b2c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	69e0      	ldr	r0, [r4, #28]
 8002b34:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002b36:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8002b38:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff ffd0 	bl	8002ae0 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b40:	2000      	movs	r0, #0
 8002b42:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002b4a:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8002b4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b50:	2001      	movs	r0, #1
}  
 8002b52:	4770      	bx	lr

08002b54 <HAL_DMA_Start_IT>:
{
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002b58:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002b5c:	2801      	cmp	r0, #1
 8002b5e:	d031      	beq.n	8002bc4 <HAL_DMA_Start_IT+0x70>
 8002b60:	2001      	movs	r0, #1
 8002b62:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b66:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8002b6a:	2801      	cmp	r0, #1
 8002b6c:	d004      	beq.n	8002b78 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002b74:	2002      	movs	r0, #2
} 
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7e:	2000      	movs	r0, #0
 8002b80:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b82:	6825      	ldr	r5, [r4, #0]
 8002b84:	6828      	ldr	r0, [r5, #0]
 8002b86:	f020 0001 	bic.w	r0, r0, #1
 8002b8a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff91 	bl	8002ab4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b94:	b15b      	cbz	r3, 8002bae <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	f043 030e 	orr.w	r3, r3, #14
 8002b9e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2000      	movs	r0, #0
 8002bac:	e7e3      	b.n	8002b76 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	6813      	ldr	r3, [r2, #0]
 8002bb2:	f043 030a 	orr.w	r3, r3, #10
 8002bb6:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	6813      	ldr	r3, [r2, #0]
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e7ed      	b.n	8002ba0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	e7d6      	b.n	8002b76 <HAL_DMA_Start_IT+0x22>

08002bc8 <HAL_DMA_IRQHandler>:
{
 8002bc8:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002bcc:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002bce:	6804      	ldr	r4, [r0, #0]
 8002bd0:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bd2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	408b      	lsls	r3, r1
 8002bd8:	4213      	tst	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x3c>
 8002bdc:	f015 0f04 	tst.w	r5, #4
 8002be0:	d010      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	f013 0f20 	tst.w	r3, #32
 8002be8:	d103      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bf2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002bf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	408b      	lsls	r3, r1
 8002bfa:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bfe:	b103      	cbz	r3, 8002c02 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8002c00:	4798      	blx	r3
}  
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c04:	2302      	movs	r3, #2
 8002c06:	408b      	lsls	r3, r1
 8002c08:	4213      	tst	r3, r2
 8002c0a:	d01a      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x7a>
 8002c0c:	f015 0f02 	tst.w	r5, #2
 8002c10:	d017      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	f013 0f20 	tst.w	r3, #32
 8002c18:	d106      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	f023 030a 	bic.w	r3, r3, #10
 8002c20:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002c2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	408b      	lsls	r3, r1
 8002c30:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002c32:	2300      	movs	r3, #0
 8002c34:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002c38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0e1      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002c3e:	4798      	blx	r3
 8002c40:	e7df      	b.n	8002c02 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c42:	2308      	movs	r3, #8
 8002c44:	fa03 f101 	lsl.w	r1, r3, r1
 8002c48:	4211      	tst	r1, r2
 8002c4a:	d0da      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x3a>
 8002c4c:	f015 0f08 	tst.w	r5, #8
 8002c50:	d0d7      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	f023 030e 	bic.w	r3, r3, #14
 8002c58:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c5a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c5c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002c5e:	2301      	movs	r3, #1
 8002c60:	fa03 f202 	lsl.w	r2, r3, r2
 8002c64:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c66:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002c68:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002c72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0c4      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8002c78:	4798      	blx	r3
}  
 8002c7a:	e7c2      	b.n	8002c02 <HAL_DMA_IRQHandler+0x3a>

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002c80:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c82:	e062      	b.n	8002d4a <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c84:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c86:	005e      	lsls	r6, r3, #1
 8002c88:	2403      	movs	r4, #3
 8002c8a:	40b4      	lsls	r4, r6
 8002c8c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c90:	68cc      	ldr	r4, [r1, #12]
 8002c92:	40b4      	lsls	r4, r6
 8002c94:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002c96:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9e:	684c      	ldr	r4, [r1, #4]
 8002ca0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002ca4:	409c      	lsls	r4, r3
 8002ca6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002caa:	6044      	str	r4, [r0, #4]
 8002cac:	e05e      	b.n	8002d6c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cae:	08dd      	lsrs	r5, r3, #3
 8002cb0:	3508      	adds	r5, #8
 8002cb2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cb6:	f003 0407 	and.w	r4, r3, #7
 8002cba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002cbe:	240f      	movs	r4, #15
 8002cc0:	fa04 f40c 	lsl.w	r4, r4, ip
 8002cc4:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc8:	690c      	ldr	r4, [r1, #16]
 8002cca:	fa04 f40c 	lsl.w	r4, r4, ip
 8002cce:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002cd2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002cd6:	e060      	b.n	8002d9a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd8:	2403      	movs	r4, #3
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_Init+0x62>
 8002cdc:	2400      	movs	r4, #0
 8002cde:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ce2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce4:	f10c 0c02 	add.w	ip, ip, #2
 8002ce8:	4d4f      	ldr	r5, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x1ac>)
 8002cea:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cee:	4c4f      	ldr	r4, [pc, #316]	; (8002e2c <HAL_GPIO_Init+0x1b0>)
 8002cf0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002cf2:	43d4      	mvns	r4, r2
 8002cf4:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf8:	684f      	ldr	r7, [r1, #4]
 8002cfa:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002cfe:	d001      	beq.n	8002d04 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002d00:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002d04:	4d49      	ldr	r5, [pc, #292]	; (8002e2c <HAL_GPIO_Init+0x1b0>)
 8002d06:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8002d08:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002d0a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d0e:	684f      	ldr	r7, [r1, #4]
 8002d10:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002d14:	d001      	beq.n	8002d1a <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002d16:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 8002d1a:	4d44      	ldr	r5, [pc, #272]	; (8002e2c <HAL_GPIO_Init+0x1b0>)
 8002d1c:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 8002d1e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002d20:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d24:	684f      	ldr	r7, [r1, #4]
 8002d26:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002d2a:	d001      	beq.n	8002d30 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002d2c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002d30:	4d3e      	ldr	r5, [pc, #248]	; (8002e2c <HAL_GPIO_Init+0x1b0>)
 8002d32:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d34:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002d36:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d38:	684e      	ldr	r6, [r1, #4]
 8002d3a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002d3e:	d001      	beq.n	8002d44 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002d40:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8002d44:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <HAL_GPIO_Init+0x1b0>)
 8002d46:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002d48:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	680a      	ldr	r2, [r1, #0]
 8002d4c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002d50:	d068      	beq.n	8002e24 <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d52:	f04f 0c01 	mov.w	ip, #1
 8002d56:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002d5a:	ea1c 0202 	ands.w	r2, ip, r2
 8002d5e:	d0f3      	beq.n	8002d48 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d60:	684c      	ldr	r4, [r1, #4]
 8002d62:	f004 0403 	and.w	r4, r4, #3
 8002d66:	3c01      	subs	r4, #1
 8002d68:	2c01      	cmp	r4, #1
 8002d6a:	d98b      	bls.n	8002c84 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	684c      	ldr	r4, [r1, #4]
 8002d6e:	f004 0403 	and.w	r4, r4, #3
 8002d72:	2c03      	cmp	r4, #3
 8002d74:	d00c      	beq.n	8002d90 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002d76:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d78:	005d      	lsls	r5, r3, #1
 8002d7a:	f04f 0c03 	mov.w	ip, #3
 8002d7e:	fa0c fc05 	lsl.w	ip, ip, r5
 8002d82:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d86:	688c      	ldr	r4, [r1, #8]
 8002d88:	40ac      	lsls	r4, r5
 8002d8a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002d8e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d90:	684c      	ldr	r4, [r1, #4]
 8002d92:	f004 0403 	and.w	r4, r4, #3
 8002d96:	2c02      	cmp	r4, #2
 8002d98:	d089      	beq.n	8002cae <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002d9a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d9c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002da0:	f04f 0c03 	mov.w	ip, #3
 8002da4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002da8:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dac:	684c      	ldr	r4, [r1, #4]
 8002dae:	f004 0403 	and.w	r4, r4, #3
 8002db2:	fa04 f40e 	lsl.w	r4, r4, lr
 8002db6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002dba:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dbc:	684c      	ldr	r4, [r1, #4]
 8002dbe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002dc2:	d0c1      	beq.n	8002d48 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	4c1a      	ldr	r4, [pc, #104]	; (8002e30 <HAL_GPIO_Init+0x1b4>)
 8002dc6:	69a5      	ldr	r5, [r4, #24]
 8002dc8:	f045 0501 	orr.w	r5, r5, #1
 8002dcc:	61a5      	str	r5, [r4, #24]
 8002dce:	69a4      	ldr	r4, [r4, #24]
 8002dd0:	f004 0401 	and.w	r4, r4, #1
 8002dd4:	9401      	str	r4, [sp, #4]
 8002dd6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002ddc:	f10c 0502 	add.w	r5, ip, #2
 8002de0:	4c11      	ldr	r4, [pc, #68]	; (8002e28 <HAL_GPIO_Init+0x1ac>)
 8002de2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002de6:	f003 0403 	and.w	r4, r3, #3
 8002dea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002dee:	240f      	movs	r4, #15
 8002df0:	fa04 f40e 	lsl.w	r4, r4, lr
 8002df4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002df8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002dfc:	f43f af6e 	beq.w	8002cdc <HAL_GPIO_Init+0x60>
 8002e00:	4c0c      	ldr	r4, [pc, #48]	; (8002e34 <HAL_GPIO_Init+0x1b8>)
 8002e02:	42a0      	cmp	r0, r4
 8002e04:	d00a      	beq.n	8002e1c <HAL_GPIO_Init+0x1a0>
 8002e06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e0a:	42a0      	cmp	r0, r4
 8002e0c:	d008      	beq.n	8002e20 <HAL_GPIO_Init+0x1a4>
 8002e0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e12:	42a0      	cmp	r0, r4
 8002e14:	f43f af60 	beq.w	8002cd8 <HAL_GPIO_Init+0x5c>
 8002e18:	2405      	movs	r4, #5
 8002e1a:	e760      	b.n	8002cde <HAL_GPIO_Init+0x62>
 8002e1c:	2401      	movs	r4, #1
 8002e1e:	e75e      	b.n	8002cde <HAL_GPIO_Init+0x62>
 8002e20:	2402      	movs	r4, #2
 8002e22:	e75c      	b.n	8002cde <HAL_GPIO_Init+0x62>
  }
}
 8002e24:	b003      	add	sp, #12
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40010400 	.word	0x40010400
 8002e30:	40021000 	.word	0x40021000
 8002e34:	48000400 	.word	0x48000400

08002e38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	6903      	ldr	r3, [r0, #16]
 8002e3a:	4219      	tst	r1, r3
 8002e3c:	d001      	beq.n	8002e42 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3e:	2001      	movs	r0, #1
 8002e40:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002e44:	4770      	bx	lr

08002e46 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e46:	b10a      	cbz	r2, 8002e4c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e48:	6181      	str	r1, [r0, #24]
 8002e4a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e4c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e50:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e52:	ea01 0203 	and.w	r2, r1, r3
 8002e56:	ea21 0103 	bic.w	r1, r1, r3
 8002e5a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002e5e:	6181      	str	r1, [r0, #24]
}
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	2800      	cmp	r0, #0
 8002e66:	f000 8301 	beq.w	800346c <HAL_RCC_OscConfig+0x608>
{
 8002e6a:	b570      	push	{r4, r5, r6, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e70:	6803      	ldr	r3, [r0, #0]
 8002e72:	f013 0f01 	tst.w	r3, #1
 8002e76:	d03b      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e78:	4bb5      	ldr	r3, [pc, #724]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d01e      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e84:	4bb2      	ldr	r3, [pc, #712]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	6863      	ldr	r3, [r4, #4]
 8002e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e96:	d068      	beq.n	8002f6a <HAL_RCC_OscConfig+0x106>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 8092 	bne.w	8002fc2 <HAL_RCC_OscConfig+0x15e>
 8002e9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e05d      	b.n	8002f74 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb8:	4ba5      	ldr	r3, [pc, #660]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ec0:	d0e6      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eca:	4ba1      	ldr	r3, [pc, #644]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2201      	movs	r2, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	420b      	tst	r3, r1
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x8c>
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 82c0 	beq.w	8003470 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	f013 0f02 	tst.w	r3, #2
 8002ef6:	f000 80c5 	beq.w	8003084 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002efa:	4b95      	ldr	r3, [pc, #596]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f013 0f0c 	tst.w	r3, #12
 8002f02:	f000 809c 	beq.w	800303e <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f06:	4b92      	ldr	r3, [pc, #584]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	f000 808f 	beq.w	8003032 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f14:	6923      	ldr	r3, [r4, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80f2 	beq.w	8003100 <HAL_RCC_OscConfig+0x29c>
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fe2f 	bl	8001b94 <HAL_GetTick>
 8002f36:	4605      	mov	r5, r0
 8002f38:	2302      	movs	r3, #2
 8002f3a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3e:	4b84      	ldr	r3, [pc, #528]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	2302      	movs	r3, #2
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2201      	movs	r2, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	420b      	tst	r3, r1
 8002f58:	f040 80c3 	bne.w	80030e2 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fe1a 	bl	8001b94 <HAL_GetTick>
 8002f60:	1b40      	subs	r0, r0, r5
 8002f62:	2802      	cmp	r0, #2
 8002f64:	d9e8      	bls.n	8002f38 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e28b      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	4a79      	ldr	r2, [pc, #484]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f74:	4a76      	ldr	r2, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	68a1      	ldr	r1, [r4, #8]
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d036      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002f88:	f7fe fe04 	bl	8001b94 <HAL_GetTick>
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f92:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2201      	movs	r2, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	420b      	tst	r3, r1
 8002fb2:	d19d      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fdee 	bl	8001b94 <HAL_GetTick>
 8002fb8:	1b40      	subs	r0, r0, r5
 8002fba:	2864      	cmp	r0, #100	; 0x64
 8002fbc:	d9e7      	bls.n	8002f8e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	e25f      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_OscConfig+0x178>
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e7cb      	b.n	8002f74 <HAL_RCC_OscConfig+0x110>
 8002fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fe0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e7be      	b.n	8002f74 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fdcd 	bl	8001b94 <HAL_GetTick>
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003000:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003004:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2201      	movs	r2, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	420b      	tst	r3, r1
 8003020:	f43f af66 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fdb6 	bl	8001b94 <HAL_GetTick>
 8003028:	1b40      	subs	r0, r0, r5
 800302a:	2864      	cmp	r0, #100	; 0x64
 800302c:	d9e6      	bls.n	8002ffc <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 800302e:	2003      	movs	r0, #3
 8003030:	e227      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800303a:	f47f af6b 	bne.w	8002f14 <HAL_RCC_OscConfig+0xb0>
 800303e:	2302      	movs	r3, #2
 8003040:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003044:	4b42      	ldr	r3, [pc, #264]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	2302      	movs	r3, #2
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2201      	movs	r2, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	420b      	tst	r3, r1
 800305e:	d003      	beq.n	8003068 <HAL_RCC_OscConfig+0x204>
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	4293      	cmp	r3, r2
 8003064:	f040 8206 	bne.w	8003474 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4839      	ldr	r0, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 800306a:	6803      	ldr	r3, [r0, #0]
 800306c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003070:	6961      	ldr	r1, [r4, #20]
 8003072:	22f8      	movs	r2, #248	; 0xf8
 8003074:	fa92 f2a2 	rbit	r2, r2
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4313      	orrs	r3, r2
 8003082:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	f013 0f08 	tst.w	r3, #8
 800308a:	f000 808d 	beq.w	80031a8 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308e:	69a3      	ldr	r3, [r4, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d061      	beq.n	8003158 <HAL_RCC_OscConfig+0x2f4>
 8003094:	2101      	movs	r1, #1
 8003096:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	fab2 f282 	clz	r2, r2
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x2f0>)
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fe fd75 	bl	8001b94 <HAL_GetTick>
 80030aa:	4605      	mov	r5, r0
 80030ac:	2302      	movs	r3, #2
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4a25      	ldr	r2, [pc, #148]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 80030bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2201      	movs	r2, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	420b      	tst	r3, r1
 80030d2:	d169      	bne.n	80031a8 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d4:	f7fe fd5e 	bl	8001b94 <HAL_GetTick>
 80030d8:	1b40      	subs	r0, r0, r5
 80030da:	2802      	cmp	r0, #2
 80030dc:	d9e6      	bls.n	80030ac <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 80030de:	2003      	movs	r0, #3
 80030e0:	e1cf      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	481b      	ldr	r0, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 80030e4:	6803      	ldr	r3, [r0, #0]
 80030e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030ea:	6961      	ldr	r1, [r4, #20]
 80030ec:	22f8      	movs	r2, #248	; 0xf8
 80030ee:	fa92 f2a2 	rbit	r2, r2
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4313      	orrs	r3, r2
 80030fc:	6003      	str	r3, [r0, #0]
 80030fe:	e7c1      	b.n	8003084 <HAL_RCC_OscConfig+0x220>
 8003100:	2301      	movs	r3, #1
 8003102:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003118:	f7fe fd3c 	bl	8001b94 <HAL_GetTick>
 800311c:	4605      	mov	r5, r0
 800311e:	2302      	movs	r3, #2
 8003120:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_OscConfig+0x2ec>)
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	2302      	movs	r3, #2
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	420b      	tst	r3, r1
 800313e:	d0a1      	beq.n	8003084 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe fd28 	bl	8001b94 <HAL_GetTick>
 8003144:	1b40      	subs	r0, r0, r5
 8003146:	2802      	cmp	r0, #2
 8003148:	d9e9      	bls.n	800311e <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e199      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	10908120 	.word	0x10908120
 8003158:	2201      	movs	r2, #1
 800315a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	4bb7      	ldr	r3, [pc, #732]	; (8003440 <HAL_RCC_OscConfig+0x5dc>)
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316c:	f7fe fd12 	bl	8001b94 <HAL_GetTick>
 8003170:	4605      	mov	r5, r0
 8003172:	2302      	movs	r3, #2
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	4ab0      	ldr	r2, [pc, #704]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003182:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2201      	movs	r2, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	420b      	tst	r3, r1
 8003198:	d006      	beq.n	80031a8 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe fcfb 	bl	8001b94 <HAL_GetTick>
 800319e:	1b40      	subs	r0, r0, r5
 80031a0:	2802      	cmp	r0, #2
 80031a2:	d9e6      	bls.n	8003172 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80031a4:	2003      	movs	r0, #3
 80031a6:	e16c      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f013 0f04 	tst.w	r3, #4
 80031ae:	f000 80a9 	beq.w	8003304 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4ba4      	ldr	r3, [pc, #656]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031ba:	d120      	bne.n	80031fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4ba1      	ldr	r3, [pc, #644]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031c4:	61da      	str	r2, [r3, #28]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031d0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b9d      	ldr	r3, [pc, #628]	; (8003448 <HAL_RCC_OscConfig+0x5e4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031da:	d012      	beq.n	8003202 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031dc:	68e3      	ldr	r3, [r4, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d023      	beq.n	800322a <HAL_RCC_OscConfig+0x3c6>
 80031e2:	bb73      	cbnz	r3, 8003242 <HAL_RCC_OscConfig+0x3de>
 80031e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031e8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	621a      	str	r2, [r3, #32]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	621a      	str	r2, [r3, #32]
 80031fc:	e01a      	b.n	8003234 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2500      	movs	r5, #0
 8003200:	e7e7      	b.n	80031d2 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4a91      	ldr	r2, [pc, #580]	; (8003448 <HAL_RCC_OscConfig+0x5e4>)
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800320c:	f7fe fcc2 	bl	8001b94 <HAL_GetTick>
 8003210:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_OscConfig+0x5e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f413 7f80 	tst.w	r3, #256	; 0x100
 800321a:	d1df      	bne.n	80031dc <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fcba 	bl	8001b94 <HAL_GetTick>
 8003220:	1b80      	subs	r0, r0, r6
 8003222:	2864      	cmp	r0, #100	; 0x64
 8003224:	d9f5      	bls.n	8003212 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8003226:	2003      	movs	r0, #3
 8003228:	e12b      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	4a86      	ldr	r2, [pc, #536]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800322c:	6a13      	ldr	r3, [r2, #32]
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003234:	68e3      	ldr	r3, [r4, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7fe fcab 	bl	8001b94 <HAL_GetTick>
 800323e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e02b      	b.n	800329a <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003242:	2b05      	cmp	r3, #5
 8003244:	d009      	beq.n	800325a <HAL_RCC_OscConfig+0x3f6>
 8003246:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	621a      	str	r2, [r3, #32]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	621a      	str	r2, [r3, #32]
 8003258:	e7ec      	b.n	8003234 <HAL_RCC_OscConfig+0x3d0>
 800325a:	4b7a      	ldr	r3, [pc, #488]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	f042 0204 	orr.w	r2, r2, #4
 8003262:	621a      	str	r2, [r3, #32]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	621a      	str	r2, [r3, #32]
 800326c:	e7e2      	b.n	8003234 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	4b75      	ldr	r3, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003270:	6a19      	ldr	r1, [r3, #32]
 8003272:	2302      	movs	r3, #2
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2201      	movs	r2, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	4219      	tst	r1, r3
 8003288:	d13b      	bne.n	8003302 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe fc83 	bl	8001b94 <HAL_GetTick>
 800328e:	1b80      	subs	r0, r0, r6
 8003290:	f241 3388 	movw	r3, #5000	; 0x1388
 8003294:	4298      	cmp	r0, r3
 8003296:	f200 80ef 	bhi.w	8003478 <HAL_RCC_OscConfig+0x614>
 800329a:	2302      	movs	r3, #2
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e2      	bne.n	800326e <HAL_RCC_OscConfig+0x40a>
 80032a8:	2302      	movs	r3, #2
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80032b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032b2:	e7de      	b.n	8003272 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fe fc6e 	bl	8001b94 <HAL_GetTick>
 80032b8:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	e015      	b.n	80032e8 <HAL_RCC_OscConfig+0x484>
 80032bc:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80032be:	6a19      	ldr	r1, [r3, #32]
 80032c0:	2302      	movs	r3, #2
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	4219      	tst	r1, r3
 80032d6:	d014      	beq.n	8003302 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe fc5c 	bl	8001b94 <HAL_GetTick>
 80032dc:	1b80      	subs	r0, r0, r6
 80032de:	f241 3388 	movw	r3, #5000	; 0x1388
 80032e2:	4298      	cmp	r0, r3
 80032e4:	f200 80ca 	bhi.w	800347c <HAL_RCC_OscConfig+0x618>
 80032e8:	2302      	movs	r3, #2
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e2      	bne.n	80032bc <HAL_RCC_OscConfig+0x458>
 80032f6:	2302      	movs	r3, #2
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80032fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003300:	e7de      	b.n	80032c0 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003302:	bbb5      	cbnz	r5, 8003372 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003304:	69e3      	ldr	r3, [r4, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80ba 	beq.w	8003480 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800330c:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800330e:	6852      	ldr	r2, [r2, #4]
 8003310:	f002 020c 	and.w	r2, r2, #12
 8003314:	2a08      	cmp	r2, #8
 8003316:	f000 8099 	beq.w	800344c <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331a:	2b02      	cmp	r3, #2
 800331c:	d02f      	beq.n	800337e <HAL_RCC_OscConfig+0x51a>
 800331e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003322:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fc2c 	bl	8001b94 <HAL_GetTick>
 800333c:	4604      	mov	r4, r0
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2201      	movs	r2, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	4219      	tst	r1, r3
 8003362:	d06b      	beq.n	800343c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fc16 	bl	8001b94 <HAL_GetTick>
 8003368:	1b00      	subs	r0, r0, r4
 800336a:	2802      	cmp	r0, #2
 800336c:	d9e7      	bls.n	800333e <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 800336e:	2003      	movs	r0, #3
 8003370:	e087      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 8003374:	69d3      	ldr	r3, [r2, #28]
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
 800337c:	e7c2      	b.n	8003304 <HAL_RCC_OscConfig+0x4a0>
 800337e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003382:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800338e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003398:	f7fe fbfc 	bl	8001b94 <HAL_GetTick>
 800339c:	4605      	mov	r5, r0
 800339e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	4219      	tst	r1, r3
 80033c2:	d006      	beq.n	80033d2 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fbe6 	bl	8001b94 <HAL_GetTick>
 80033c8:	1b40      	subs	r0, r0, r5
 80033ca:	2802      	cmp	r0, #2
 80033cc:	d9e7      	bls.n	800339e <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e057      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d2:	491c      	ldr	r1, [pc, #112]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 80033d4:	684b      	ldr	r3, [r1, #4]
 80033d6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80033da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033dc:	6a20      	ldr	r0, [r4, #32]
 80033de:	4302      	orrs	r2, r0
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033fe:	f7fe fbc9 	bl	8001b94 <HAL_GetTick>
 8003402:	4604      	mov	r4, r0
 8003404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003408:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x5e0>)
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2201      	movs	r2, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	4219      	tst	r1, r3
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342a:	f7fe fbb3 	bl	8001b94 <HAL_GetTick>
 800342e:	1b00      	subs	r0, r0, r4
 8003430:	2802      	cmp	r0, #2
 8003432:	d9e7      	bls.n	8003404 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8003434:	2003      	movs	r0, #3
 8003436:	e024      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003438:	2000      	movs	r0, #0
 800343a:	e022      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 800343c:	2000      	movs	r0, #0
 800343e:	e020      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 8003440:	10908120 	.word	0x10908120
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344c:	2b01      	cmp	r3, #1
 800344e:	d01a      	beq.n	8003486 <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x630>)
 8003452:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003454:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003458:	6a22      	ldr	r2, [r4, #32]
 800345a:	4291      	cmp	r1, r2
 800345c:	d115      	bne.n	800348a <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800345e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003462:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003464:	4293      	cmp	r3, r2
 8003466:	d112      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8003468:	2000      	movs	r0, #0
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 800346c:	2001      	movs	r0, #1
}
 800346e:	4770      	bx	lr
        return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e006      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
 8003476:	e004      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8003478:	2003      	movs	r0, #3
 800347a:	e002      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 800347c:	2003      	movs	r0, #3
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8003480:	2000      	movs	r0, #0
}
 8003482:	b002      	add	sp, #8
 8003484:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003486:	2001      	movs	r0, #1
 8003488:	e7fb      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	e7f9      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 800348e:	2001      	movs	r0, #1
 8003490:	e7f7      	b.n	8003482 <HAL_RCC_OscConfig+0x61e>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800349a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800349c:	f003 020c 	and.w	r2, r3, #12
 80034a0:	2a08      	cmp	r2, #8
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a4:	4814      	ldr	r0, [pc, #80]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034a6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034a8:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80034ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	fa21 f202 	lsr.w	r2, r1, r2
 80034bc:	490f      	ldr	r1, [pc, #60]	; (80034fc <HAL_RCC_GetSysClockFreq+0x64>)
 80034be:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034c0:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80034c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034c4:	f002 020f 	and.w	r2, r2, #15
 80034c8:	210f      	movs	r1, #15
 80034ca:	fa91 f1a1 	rbit	r1, r1
 80034ce:	fab1 f181 	clz	r1, r1
 80034d2:	40ca      	lsrs	r2, r1
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_GetSysClockFreq+0x68>)
 80034d6:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80034e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e4:	fb03 f000 	mul.w	r0, r3, r0
 80034e8:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_GetSysClockFreq+0x6c>)
 80034ec:	fb03 f000 	mul.w	r0, r3, r0
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	007a1200 	.word	0x007a1200
 80034fc:	08005bac 	.word	0x08005bac
 8003500:	08005bbc 	.word	0x08005bbc
 8003504:	003d0900 	.word	0x003d0900

08003508 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003508:	2800      	cmp	r0, #0
 800350a:	f000 80be 	beq.w	800368a <HAL_RCC_ClockConfig+0x182>
{
 800350e:	b570      	push	{r4, r5, r6, lr}
 8003510:	460d      	mov	r5, r1
 8003512:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	428b      	cmp	r3, r1
 800351e:	d20b      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003520:	4a5e      	ldr	r2, [pc, #376]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f023 0307 	bic.w	r3, r3, #7
 8003528:	430b      	orrs	r3, r1
 800352a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	428b      	cmp	r3, r1
 8003534:	f040 80ab 	bne.w	800368e <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f013 0f02 	tst.w	r3, #2
 800353e:	d006      	beq.n	800354e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003542:	6853      	ldr	r3, [r2, #4]
 8003544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003548:	68a1      	ldr	r1, [r4, #8]
 800354a:	430b      	orrs	r3, r1
 800354c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	f013 0f01 	tst.w	r3, #1
 8003554:	d05a      	beq.n	800360c <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d02d      	beq.n	80035b8 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355c:	2b02      	cmp	r3, #2
 800355e:	d040      	beq.n	80035e2 <HAL_RCC_ClockConfig+0xda>
 8003560:	2202      	movs	r2, #2
 8003562:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003568:	6810      	ldr	r0, [r2, #0]
 800356a:	2202      	movs	r2, #2
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4210      	tst	r0, r2
 8003580:	f000 8087 	beq.w	8003692 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003584:	4946      	ldr	r1, [pc, #280]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003586:	684a      	ldr	r2, [r1, #4]
 8003588:	f022 0203 	bic.w	r2, r2, #3
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003590:	f7fe fb00 	bl	8001b94 <HAL_GetTick>
 8003594:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035a4:	d032      	beq.n	800360c <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	f7fe faf5 	bl	8001b94 <HAL_GetTick>
 80035aa:	1b80      	subs	r0, r0, r6
 80035ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80035b0:	4298      	cmp	r0, r3
 80035b2:	d9f0      	bls.n	8003596 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80035b4:	2003      	movs	r0, #3
 80035b6:	e067      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
 80035b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035bc:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c0:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 80035c2:	6810      	ldr	r0, [r2, #0]
 80035c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035c8:	fa92 f2a2 	rbit	r2, r2
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	f002 021f 	and.w	r2, r2, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	4202      	tst	r2, r0
 80035dc:	d1d2      	bne.n	8003584 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 80035de:	2001      	movs	r0, #1
 80035e0:	e052      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 80035ec:	6810      	ldr	r0, [r2, #0]
 80035ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f2:	fa92 f2a2 	rbit	r2, r2
 80035f6:	fab2 f282 	clz	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4210      	tst	r0, r2
 8003606:	d1bd      	bne.n	8003584 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8003608:	2001      	movs	r0, #1
 800360a:	e03d      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	42ab      	cmp	r3, r5
 8003616:	d90a      	bls.n	800362e <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x194>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f023 0307 	bic.w	r3, r3, #7
 8003620:	432b      	orrs	r3, r5
 8003622:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	42ab      	cmp	r3, r5
 800362c:	d133      	bne.n	8003696 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f013 0f04 	tst.w	r3, #4
 8003634:	d006      	beq.n	8003644 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003638:	6853      	ldr	r3, [r2, #4]
 800363a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800363e:	68e1      	ldr	r1, [r4, #12]
 8003640:	430b      	orrs	r3, r1
 8003642:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f013 0f08 	tst.w	r3, #8
 800364a:	d007      	beq.n	800365c <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 800364e:	6853      	ldr	r3, [r2, #4]
 8003650:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003654:	6921      	ldr	r1, [r4, #16]
 8003656:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800365a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365c:	f7ff ff1c 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_ClockConfig+0x198>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	40d3      	lsrs	r3, r2
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_RCC_ClockConfig+0x19c>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	40d8      	lsrs	r0, r3
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1a0>)
 800367c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1a4>)
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	f7fe fa43 	bl	8001b0c <HAL_InitTick>
  return HAL_OK;
 8003686:	2000      	movs	r0, #0
}
 8003688:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
}
 800368c:	4770      	bx	lr
      return HAL_ERROR;
 800368e:	2001      	movs	r0, #1
 8003690:	e7fa      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8003692:	2001      	movs	r0, #1
 8003694:	e7f8      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8003696:	2001      	movs	r0, #1
 8003698:	e7f6      	b.n	8003688 <HAL_RCC_ClockConfig+0x180>
 800369a:	bf00      	nop
 800369c:	40022000 	.word	0x40022000
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08005b94 	.word	0x08005b94
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000008 	.word	0x20000008

080036b0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036be:	f7ff fff7 	bl	80036b0 <HAL_RCC_GetHCLKFreq>
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	fab2 f282 	clz	r2, r2
 80036d6:	40d3      	lsrs	r3, r2
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036da:	5cd3      	ldrb	r3, [r2, r3]
}    
 80036dc:	40d8      	lsrs	r0, r3
 80036de:	bd08      	pop	{r3, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08005ba4 	.word	0x08005ba4

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036ea:	f7ff ffe1 	bl	80036b0 <HAL_RCC_GetHCLKFreq>
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036fa:	fa92 f2a2 	rbit	r2, r2
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	40d3      	lsrs	r3, r2
 8003704:	4a02      	ldr	r2, [pc, #8]	; (8003710 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003708:	40d8      	lsrs	r0, r3
 800370a:	bd08      	pop	{r3, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	08005ba4 	.word	0x08005ba4

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003716:	b083      	sub	sp, #12
 8003718:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800371a:	6803      	ldr	r3, [r0, #0]
 800371c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003720:	d048      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b86      	ldr	r3, [pc, #536]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800372a:	f040 80be 	bne.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4b83      	ldr	r3, [pc, #524]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003736:	61da      	str	r2, [r3, #28]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003742:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	4b7e      	ldr	r3, [pc, #504]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f413 7f80 	tst.w	r3, #256	; 0x100
 800374c:	f000 80af 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003750:	4b7a      	ldr	r3, [pc, #488]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003754:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003758:	d022      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800375a:	6862      	ldr	r2, [r4, #4]
 800375c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003760:	429a      	cmp	r2, r3
 8003762:	d01d      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003764:	4875      	ldr	r0, [pc, #468]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003766:	6a01      	ldr	r1, [r0, #32]
 8003768:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800376c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003770:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	4f72      	ldr	r7, [pc, #456]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800377a:	443a      	add	r2, r7
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	f04f 0c01 	mov.w	ip, #1
 8003782:	f8c2 c000 	str.w	ip, [r2]
 8003786:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	443b      	add	r3, r7
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003796:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003798:	f011 0f01 	tst.w	r1, #1
 800379c:	f040 809c 	bne.w	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037a0:	4a66      	ldr	r2, [pc, #408]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037a2:	6a13      	ldr	r3, [r2, #32]
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	6861      	ldr	r1, [r4, #4]
 80037aa:	430b      	orrs	r3, r1
 80037ac:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	f040 80b9 	bne.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f013 0f01 	tst.w	r3, #1
 80037ba:	d006      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037bc:	4a5f      	ldr	r2, [pc, #380]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037c0:	f023 0303 	bic.w	r3, r3, #3
 80037c4:	68a1      	ldr	r1, [r4, #8]
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f013 0f20 	tst.w	r3, #32
 80037d0:	d006      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d2:	4a5a      	ldr	r2, [pc, #360]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	68e1      	ldr	r1, [r4, #12]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037e6:	d006      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037e8:	4a54      	ldr	r2, [pc, #336]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80037ea:	6853      	ldr	r3, [r2, #4]
 80037ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037fc:	d006      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fe:	4a4f      	ldr	r2, [pc, #316]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003800:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003802:	f023 0320 	bic.w	r3, r3, #32
 8003806:	6921      	ldr	r1, [r4, #16]
 8003808:	430b      	orrs	r3, r1
 800380a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003812:	d006      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003816:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381c:	6961      	ldr	r1, [r4, #20]
 800381e:	430b      	orrs	r3, r1
 8003820:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003828:	d006      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800382a:	4a44      	ldr	r2, [pc, #272]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800382c:	6853      	ldr	r3, [r2, #4]
 800382e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003832:	69e1      	ldr	r1, [r4, #28]
 8003834:	430b      	orrs	r3, r1
 8003836:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800383e:	d006      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003840:	4a3e      	ldr	r2, [pc, #248]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003842:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003844:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003848:	69a1      	ldr	r1, [r4, #24]
 800384a:	430b      	orrs	r3, r1
 800384c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003854:	d006      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003856:	4a39      	ldr	r2, [pc, #228]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003858:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800385a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385e:	6a21      	ldr	r1, [r4, #32]
 8003860:	430b      	orrs	r3, r1
 8003862:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800386a:	d006      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800386c:	4a33      	ldr	r2, [pc, #204]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800386e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003874:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003876:	430b      	orrs	r3, r1
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003880:	d006      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003882:	4a2e      	ldr	r2, [pc, #184]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003884:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800388c:	430b      	orrs	r3, r1
 800388e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003896:	d04d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800389a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800389c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038a2:	430b      	orrs	r3, r1
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038a6:	2000      	movs	r0, #0
 80038a8:	e045      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x222>
  FlagStatus       pwrclkchanged = RESET;
 80038aa:	2500      	movs	r5, #0
 80038ac:	e74a      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ae:	4a24      	ldr	r2, [pc, #144]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80038b8:	f7fe f96c 	bl	8001b94 <HAL_GetTick>
 80038bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038c6:	f47f af43 	bne.w	8003750 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ca:	f7fe f963 	bl	8001b94 <HAL_GetTick>
 80038ce:	1b80      	subs	r0, r0, r6
 80038d0:	2864      	cmp	r0, #100	; 0x64
 80038d2:	d9f4      	bls.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          return HAL_TIMEOUT;
 80038d4:	2003      	movs	r0, #3
 80038d6:	e02e      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x222>
        tickstart = HAL_GetTick();
 80038d8:	f7fe f95c 	bl	8001b94 <HAL_GetTick>
 80038dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038de:	e015      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80038e2:	6a19      	ldr	r1, [r3, #32]
 80038e4:	2302      	movs	r3, #2
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2201      	movs	r2, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	420b      	tst	r3, r1
 80038fa:	f47f af51 	bne.w	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe f949 	bl	8001b94 <HAL_GetTick>
 8003902:	1b80      	subs	r0, r0, r6
 8003904:	f241 3388 	movw	r3, #5000	; 0x1388
 8003908:	4298      	cmp	r0, r3
 800390a:	d811      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800390c:	2302      	movs	r3, #2
 800390e:	fa93 f2a3 	rbit	r2, r3
 8003912:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e2      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800391a:	2302      	movs	r3, #2
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003922:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003924:	e7de      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003926:	69d3      	ldr	r3, [r2, #28]
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	61d3      	str	r3, [r2, #28]
 800392e:	e741      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8003930:	2003      	movs	r0, #3
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 8003934:	2000      	movs	r0, #0
}
 8003936:	b003      	add	sp, #12
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
 8003944:	10908100 	.word	0x10908100

08003948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	6a03      	ldr	r3, [r0, #32]
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003954:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003958:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800395c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003960:	680c      	ldr	r4, [r1, #0]
 8003962:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003964:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003968:	688c      	ldr	r4, [r1, #8]
 800396a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800396c:	4c19      	ldr	r4, [pc, #100]	; (80039d4 <TIM_OC1_SetConfig+0x8c>)
 800396e:	42a0      	cmp	r0, r4
 8003970:	d00b      	beq.n	800398a <TIM_OC1_SetConfig+0x42>
 8003972:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8003976:	42a0      	cmp	r0, r4
 8003978:	d007      	beq.n	800398a <TIM_OC1_SetConfig+0x42>
 800397a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800397e:	42a0      	cmp	r0, r4
 8003980:	d003      	beq.n	800398a <TIM_OC1_SetConfig+0x42>
 8003982:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003986:	42a0      	cmp	r0, r4
 8003988:	d105      	bne.n	8003996 <TIM_OC1_SetConfig+0x4e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800398a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800398e:	68cc      	ldr	r4, [r1, #12]
 8003990:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003992:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003996:	4c0f      	ldr	r4, [pc, #60]	; (80039d4 <TIM_OC1_SetConfig+0x8c>)
 8003998:	42a0      	cmp	r0, r4
 800399a:	d00b      	beq.n	80039b4 <TIM_OC1_SetConfig+0x6c>
 800399c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80039a0:	42a0      	cmp	r0, r4
 80039a2:	d007      	beq.n	80039b4 <TIM_OC1_SetConfig+0x6c>
 80039a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d003      	beq.n	80039b4 <TIM_OC1_SetConfig+0x6c>
 80039ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d107      	bne.n	80039c4 <TIM_OC1_SetConfig+0x7c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b4:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039b8:	694c      	ldr	r4, [r1, #20]
 80039ba:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039be:	698d      	ldr	r5, [r1, #24]
 80039c0:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039c8:	684a      	ldr	r2, [r1, #4]
 80039ca:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039cc:	6203      	str	r3, [r0, #32]
}
 80039ce:	bc30      	pop	{r4, r5}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00

080039d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039da:	6a03      	ldr	r3, [r0, #32]
 80039dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039ec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	680d      	ldr	r5, [r1, #0]
 80039f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f8:	688d      	ldr	r5, [r1, #8]
 80039fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fe:	4d14      	ldr	r5, [pc, #80]	; (8003a50 <TIM_OC3_SetConfig+0x78>)
 8003a00:	42a8      	cmp	r0, r5
 8003a02:	d01d      	beq.n	8003a40 <TIM_OC3_SetConfig+0x68>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a04:	4d12      	ldr	r5, [pc, #72]	; (8003a50 <TIM_OC3_SetConfig+0x78>)
 8003a06:	42a8      	cmp	r0, r5
 8003a08:	d00b      	beq.n	8003a22 <TIM_OC3_SetConfig+0x4a>
 8003a0a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003a0e:	42a8      	cmp	r0, r5
 8003a10:	d007      	beq.n	8003a22 <TIM_OC3_SetConfig+0x4a>
 8003a12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a16:	42a8      	cmp	r0, r5
 8003a18:	d003      	beq.n	8003a22 <TIM_OC3_SetConfig+0x4a>
 8003a1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a1e:	42a8      	cmp	r0, r5
 8003a20:	d107      	bne.n	8003a32 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a22:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a26:	694d      	ldr	r5, [r1, #20]
 8003a28:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2c:	698d      	ldr	r5, [r1, #24]
 8003a2e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a32:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a34:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a36:	684a      	ldr	r2, [r1, #4]
 8003a38:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3a:	6203      	str	r3, [r0, #32]
}
 8003a3c:	bc30      	pop	{r4, r5}
 8003a3e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a44:	68cd      	ldr	r5, [r1, #12]
 8003a46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a4e:	e7d9      	b.n	8003a04 <TIM_OC3_SetConfig+0x2c>
 8003a50:	40012c00 	.word	0x40012c00

08003a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a56:	6a03      	ldr	r3, [r0, #32]
 8003a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a62:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a68:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	680d      	ldr	r5, [r1, #0]
 8003a6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a76:	688d      	ldr	r5, [r1, #8]
 8003a78:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7c:	4d0d      	ldr	r5, [pc, #52]	; (8003ab4 <TIM_OC4_SetConfig+0x60>)
 8003a7e:	42a8      	cmp	r0, r5
 8003a80:	d00b      	beq.n	8003a9a <TIM_OC4_SetConfig+0x46>
 8003a82:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003a86:	42a8      	cmp	r0, r5
 8003a88:	d007      	beq.n	8003a9a <TIM_OC4_SetConfig+0x46>
 8003a8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a8e:	42a8      	cmp	r0, r5
 8003a90:	d003      	beq.n	8003a9a <TIM_OC4_SetConfig+0x46>
 8003a92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a96:	42a8      	cmp	r0, r5
 8003a98:	d104      	bne.n	8003aa4 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a9a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a9e:	694d      	ldr	r5, [r1, #20]
 8003aa0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa8:	684b      	ldr	r3, [r1, #4]
 8003aaa:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	6202      	str	r2, [r0, #32]
}
 8003aae:	bc30      	pop	{r4, r5}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00

08003ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003aba:	6a03      	ldr	r3, [r0, #32]
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ac6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ac8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad0:	680d      	ldr	r5, [r1, #0]
 8003ad2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ad8:	688d      	ldr	r5, [r1, #8]
 8003ada:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <TIM_OC5_SetConfig+0x5c>)
 8003ae0:	42a8      	cmp	r0, r5
 8003ae2:	d00b      	beq.n	8003afc <TIM_OC5_SetConfig+0x44>
 8003ae4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003ae8:	42a8      	cmp	r0, r5
 8003aea:	d007      	beq.n	8003afc <TIM_OC5_SetConfig+0x44>
 8003aec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003af0:	42a8      	cmp	r0, r5
 8003af2:	d003      	beq.n	8003afc <TIM_OC5_SetConfig+0x44>
 8003af4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003af8:	42a8      	cmp	r0, r5
 8003afa:	d104      	bne.n	8003b06 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003afc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b00:	694d      	ldr	r5, [r1, #20]
 8003b02:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b06:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b08:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b0a:	684a      	ldr	r2, [r1, #4]
 8003b0c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0e:	6203      	str	r3, [r0, #32]
}
 8003b10:	bc30      	pop	{r4, r5}
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00

08003b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b1a:	6a03      	ldr	r3, [r0, #32]
 8003b1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b26:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	680d      	ldr	r5, [r1, #0]
 8003b32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b36:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b3a:	688d      	ldr	r5, [r1, #8]
 8003b3c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	4d0d      	ldr	r5, [pc, #52]	; (8003b78 <TIM_OC6_SetConfig+0x60>)
 8003b42:	42a8      	cmp	r0, r5
 8003b44:	d00b      	beq.n	8003b5e <TIM_OC6_SetConfig+0x46>
 8003b46:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003b4a:	42a8      	cmp	r0, r5
 8003b4c:	d007      	beq.n	8003b5e <TIM_OC6_SetConfig+0x46>
 8003b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b52:	42a8      	cmp	r0, r5
 8003b54:	d003      	beq.n	8003b5e <TIM_OC6_SetConfig+0x46>
 8003b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b5a:	42a8      	cmp	r0, r5
 8003b5c:	d104      	bne.n	8003b68 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b5e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b62:	694d      	ldr	r5, [r1, #20]
 8003b64:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b6a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b6c:	684b      	ldr	r3, [r1, #4]
 8003b6e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	6202      	str	r2, [r0, #32]
}
 8003b72:	bc30      	pop	{r4, r5}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00

08003b7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b7c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7e:	6a04      	ldr	r4, [r0, #32]
 8003b80:	f024 0410 	bic.w	r4, r4, #16
 8003b84:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b86:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b88:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b8a:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b8e:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b92:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b96:	031b      	lsls	r3, r3, #12
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b9e:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ba2:	0109      	lsls	r1, r1, #4
 8003ba4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8003ba8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003baa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bac:	6201      	str	r1, [r0, #32]
}
 8003bae:	bc30      	pop	{r4, r5}
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bb2:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bb4:	6a04      	ldr	r4, [r0, #32]
 8003bb6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003bba:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bbc:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003bbe:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003bc0:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003bc4:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bc8:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003bd4:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003bd8:	0209      	lsls	r1, r1, #8
 8003bda:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003bde:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003be0:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003be2:	6201      	str	r1, [r0, #32]
}
 8003be4:	bc30      	pop	{r4, r5}
 8003be6:	4770      	bx	lr

08003be8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be8:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bea:	6a04      	ldr	r4, [r0, #32]
 8003bec:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003bf0:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bf2:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003bf4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bf6:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bfa:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bfe:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c02:	031b      	lsls	r3, r3, #12
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c0a:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c0e:	0309      	lsls	r1, r1, #12
 8003c10:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003c14:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c16:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003c18:	6201      	str	r1, [r0, #32]
}
 8003c1a:	bc30      	pop	{r4, r5}
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c20:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d126      	bne.n	8003c78 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c30:	6802      	ldr	r2, [r0, #0]
 8003c32:	68d3      	ldr	r3, [r2, #12]
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	6803      	ldr	r3, [r0, #0]
 8003c3c:	4a11      	ldr	r2, [pc, #68]	; (8003c84 <HAL_TIM_Base_Start_IT+0x64>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00c      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x3c>
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c46:	d009      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x3c>
 8003c48:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d005      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c58:	2000      	movs	r0, #0
 8003c5a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_TIM_Base_Start_IT+0x68>)
 8003c60:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	2a06      	cmp	r2, #6
 8003c64:	d00a      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x5c>
 8003c66:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003c6a:	d009      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c74:	2000      	movs	r0, #0
 8003c76:	4770      	bx	lr
    return HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
 8003c7a:	4770      	bx	lr
  return HAL_OK;
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	4770      	bx	lr
 8003c80:	2000      	movs	r0, #0
}
 8003c82:	4770      	bx	lr
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	00010007 	.word	0x00010007

08003c8c <HAL_TIM_PeriodElapsedCallback>:
}
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_IC_CaptureCallback>:
}
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIM_TriggerCallback>:
}
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_IRQHandler>:
{
 8003c96:	b510      	push	{r4, lr}
 8003c98:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	f012 0f02 	tst.w	r2, #2
 8003ca2:	d011      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	f012 0f02 	tst.w	r2, #2
 8003caa:	d00d      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cac:	f06f 0202 	mvn.w	r2, #2
 8003cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb6:	6803      	ldr	r3, [r0, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f013 0f03 	tst.w	r3, #3
 8003cbe:	d079      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc0:	f7ff ffe6 	bl	8003c90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	f012 0f04 	tst.w	r2, #4
 8003cd0:	d012      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	f012 0f04 	tst.w	r2, #4
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cda:	f06f 0204 	mvn.w	r2, #4
 8003cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003cec:	d068      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff ffce 	bl	8003c90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	f012 0f08 	tst.w	r2, #8
 8003d00:	d012      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	f012 0f08 	tst.w	r2, #8
 8003d08:	d00e      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d0a:	f06f 0208 	mvn.w	r2, #8
 8003d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d10:	2304      	movs	r3, #4
 8003d12:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f013 0f03 	tst.w	r3, #3
 8003d1c:	d057      	beq.n	8003dce <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7ff ffb6 	bl	8003c90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d24:	2300      	movs	r3, #0
 8003d26:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	f012 0f10 	tst.w	r2, #16
 8003d30:	d012      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	f012 0f10 	tst.w	r2, #16
 8003d38:	d00e      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d3a:	f06f 0210 	mvn.w	r2, #16
 8003d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d40:	2308      	movs	r3, #8
 8003d42:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003d4c:	d046      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff ff9e 	bl	8003c90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d54:	2300      	movs	r3, #0
 8003d56:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	f012 0f01 	tst.w	r2, #1
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	f012 0f01 	tst.w	r2, #1
 8003d68:	d13f      	bne.n	8003dea <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d72:	d003      	beq.n	8003d7c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d7a:	d13d      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d8c:	d13b      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d96:	d003      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d9e:	d139      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	f012 0f20 	tst.w	r2, #32
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	f012 0f20 	tst.w	r2, #32
 8003db0:	d137      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x18c>
}
 8003db2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db4:	f7ff ff6b 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	4620      	mov	r0, r4
 8003dba:	f7ff ff6a 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003dbe:	e781      	b.n	8003cc4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7ff ff64 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff ff63 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003dcc:	e792      	b.n	8003cf4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7ff ff5d 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f7ff ff5c 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003dda:	e7a3      	b.n	8003d24 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ff56 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7ff ff55 	bl	8003c92 <HAL_TIM_PWM_PulseFinishedCallback>
 8003de8:	e7b4      	b.n	8003d54 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dea:	f06f 0201 	mvn.w	r2, #1
 8003dee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7ff ff4b 	bl	8003c8c <HAL_TIM_PeriodElapsedCallback>
 8003df6:	e7b8      	b.n	8003d6a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dfc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f000 fc8d 	bl	800471e <HAL_TIMEx_BreakCallback>
 8003e04:	e7ba      	b.n	8003d7c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 fc87 	bl	8004720 <HAL_TIMEx_Break2Callback>
 8003e12:	e7bc      	b.n	8003d8e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e18:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f7ff ff3a 	bl	8003c94 <HAL_TIM_TriggerCallback>
 8003e20:	e7be      	b.n	8003da0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e22:	f06f 0220 	mvn.w	r2, #32
 8003e26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 fc77 	bl	800471c <HAL_TIMEx_CommutCallback>
}
 8003e2e:	e7c0      	b.n	8003db2 <HAL_TIM_IRQHandler+0x11c>

08003e30 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003e30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <TIM_Base_SetConfig+0x7c>)
 8003e34:	4290      	cmp	r0, r2
 8003e36:	d002      	beq.n	8003e3e <TIM_Base_SetConfig+0xe>
 8003e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e3c:	d103      	bne.n	8003e46 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e42:	684a      	ldr	r2, [r1, #4]
 8003e44:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_Base_SetConfig+0x7c>)
 8003e48:	4290      	cmp	r0, r2
 8003e4a:	d00e      	beq.n	8003e6a <TIM_Base_SetConfig+0x3a>
 8003e4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x3a>
 8003e52:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003e56:	4290      	cmp	r0, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x3a>
 8003e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e5e:	4290      	cmp	r0, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x3a>
 8003e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e66:	4290      	cmp	r0, r2
 8003e68:	d103      	bne.n	8003e72 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e6e:	68ca      	ldr	r2, [r1, #12]
 8003e70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e76:	694a      	ldr	r2, [r1, #20]
 8003e78:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003e7a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7c:	688b      	ldr	r3, [r1, #8]
 8003e7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e80:	680b      	ldr	r3, [r1, #0]
 8003e82:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <TIM_Base_SetConfig+0x7c>)
 8003e86:	4298      	cmp	r0, r3
 8003e88:	d00b      	beq.n	8003ea2 <TIM_Base_SetConfig+0x72>
 8003e8a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003e8e:	4298      	cmp	r0, r3
 8003e90:	d007      	beq.n	8003ea2 <TIM_Base_SetConfig+0x72>
 8003e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e96:	4298      	cmp	r0, r3
 8003e98:	d003      	beq.n	8003ea2 <TIM_Base_SetConfig+0x72>
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	d101      	bne.n	8003ea6 <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea2:	690b      	ldr	r3, [r1, #16]
 8003ea4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	6143      	str	r3, [r0, #20]
}
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00

08003eb0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003eb0:	b360      	cbz	r0, 8003f0c <HAL_TIM_PWM_Init+0x5c>
{
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eba:	b313      	cbz	r3, 8003f02 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ec8:	f7ff ffb2 	bl	8003e30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003ed6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003eda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ef2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003ef6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003efa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003efe:	2000      	movs	r0, #0
}
 8003f00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003f02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003f06:	f7fd fcb9 	bl	800187c <HAL_TIM_PWM_MspInit>
 8003f0a:	e7d7      	b.n	8003ebc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003f0c:	2001      	movs	r0, #1
}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003f10:	b360      	cbz	r0, 8003f6c <HAL_TIM_IC_Init+0x5c>
{
 8003f12:	b510      	push	{r4, lr}
 8003f14:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f1a:	b313      	cbz	r3, 8003f62 <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f22:	4621      	mov	r1, r4
 8003f24:	f851 0b04 	ldr.w	r0, [r1], #4
 8003f28:	f7ff ff82 	bl	8003e30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003f36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003f56:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003f5e:	2000      	movs	r0, #0
}
 8003f60:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003f62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003f66:	f7fd fc9f 	bl	80018a8 <HAL_TIM_IC_MspInit>
 8003f6a:	e7d7      	b.n	8003f1c <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003f6c:	2001      	movs	r0, #1
}
 8003f6e:	4770      	bx	lr

08003f70 <TIM_OC2_SetConfig>:
{
 8003f70:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f72:	6a03      	ldr	r3, [r0, #32]
 8003f74:	f023 0310 	bic.w	r3, r3, #16
 8003f78:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f7a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f7c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f84:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f88:	680d      	ldr	r5, [r1, #0]
 8003f8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003f8e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f92:	688d      	ldr	r5, [r1, #8]
 8003f94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f98:	4d14      	ldr	r5, [pc, #80]	; (8003fec <TIM_OC2_SetConfig+0x7c>)
 8003f9a:	42a8      	cmp	r0, r5
 8003f9c:	d01d      	beq.n	8003fda <TIM_OC2_SetConfig+0x6a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	4d13      	ldr	r5, [pc, #76]	; (8003fec <TIM_OC2_SetConfig+0x7c>)
 8003fa0:	42a8      	cmp	r0, r5
 8003fa2:	d00b      	beq.n	8003fbc <TIM_OC2_SetConfig+0x4c>
 8003fa4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003fa8:	42a8      	cmp	r0, r5
 8003faa:	d007      	beq.n	8003fbc <TIM_OC2_SetConfig+0x4c>
 8003fac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fb0:	42a8      	cmp	r0, r5
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC2_SetConfig+0x4c>
 8003fb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fb8:	42a8      	cmp	r0, r5
 8003fba:	d107      	bne.n	8003fcc <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fbc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc0:	694d      	ldr	r5, [r1, #20]
 8003fc2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc6:	698d      	ldr	r5, [r1, #24]
 8003fc8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003fcc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003fce:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd0:	684a      	ldr	r2, [r1, #4]
 8003fd2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003fd4:	6203      	str	r3, [r0, #32]
}
 8003fd6:	bc30      	pop	{r4, r5}
 8003fd8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fde:	68cd      	ldr	r5, [r1, #12]
 8003fe0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe8:	e7d9      	b.n	8003f9e <TIM_OC2_SetConfig+0x2e>
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00

08003ff0 <HAL_TIM_PWM_ConfigChannel>:
{
 8003ff0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003ff2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f000 8095 	beq.w	8004126 <HAL_TIM_PWM_ConfigChannel+0x136>
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	460d      	mov	r5, r1
 8004000:	2301      	movs	r3, #1
 8004002:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004006:	2a14      	cmp	r2, #20
 8004008:	f200 8088 	bhi.w	800411c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800400c:	e8df f002 	tbb	[pc, r2]
 8004010:	8686860b 	.word	0x8686860b
 8004014:	8686861f 	.word	0x8686861f
 8004018:	86868634 	.word	0x86868634
 800401c:	86868648 	.word	0x86868648
 8004020:	8686865d 	.word	0x8686865d
 8004024:	71          	.byte	0x71
 8004025:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004026:	6800      	ldr	r0, [r0, #0]
 8004028:	f7ff fc8e 	bl	8003948 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	6993      	ldr	r3, [r2, #24]
 8004030:	f043 0308 	orr.w	r3, r3, #8
 8004034:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	6993      	ldr	r3, [r2, #24]
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004040:	6822      	ldr	r2, [r4, #0]
 8004042:	6993      	ldr	r3, [r2, #24]
 8004044:	6929      	ldr	r1, [r5, #16]
 8004046:	430b      	orrs	r3, r1
 8004048:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2000      	movs	r0, #0
      break;
 800404c:	e067      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800404e:	6800      	ldr	r0, [r0, #0]
 8004050:	f7ff ff8e 	bl	8003f70 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	6993      	ldr	r3, [r2, #24]
 8004058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800405c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	6993      	ldr	r3, [r2, #24]
 8004062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004066:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	6993      	ldr	r3, [r2, #24]
 800406c:	6929      	ldr	r1, [r5, #16]
 800406e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004072:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2000      	movs	r0, #0
      break;
 8004076:	e052      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004078:	6800      	ldr	r0, [r0, #0]
 800407a:	f7ff fcad 	bl	80039d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	69d3      	ldr	r3, [r2, #28]
 8004082:	f043 0308 	orr.w	r3, r3, #8
 8004086:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	69d3      	ldr	r3, [r2, #28]
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	69d3      	ldr	r3, [r2, #28]
 8004096:	6929      	ldr	r1, [r5, #16]
 8004098:	430b      	orrs	r3, r1
 800409a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2000      	movs	r0, #0
      break;
 800409e:	e03e      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a0:	6800      	ldr	r0, [r0, #0]
 80040a2:	f7ff fcd7 	bl	8003a54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	69d3      	ldr	r3, [r2, #28]
 80040aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	69d3      	ldr	r3, [r2, #28]
 80040b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	69d3      	ldr	r3, [r2, #28]
 80040be:	6929      	ldr	r1, [r5, #16]
 80040c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80040c4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2000      	movs	r0, #0
      break;
 80040c8:	e029      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	f7ff fcf4 	bl	8003ab8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040e8:	6929      	ldr	r1, [r5, #16]
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2000      	movs	r0, #0
      break;
 80040f0:	e015      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040f2:	6800      	ldr	r0, [r0, #0]
 80040f4:	f7ff fd10 	bl	8003b18 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040f8:	6822      	ldr	r2, [r4, #0]
 80040fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004100:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800410a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004110:	6929      	ldr	r1, [r5, #16]
 8004112:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004116:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004118:	2000      	movs	r0, #0
      break;
 800411a:	e000      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800411c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800411e:	2300      	movs	r3, #0
 8004120:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004124:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004126:	2002      	movs	r0, #2
 8004128:	e7fc      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

0800412c <TIM_TI1_SetConfig>:
{
 800412c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412e:	6a04      	ldr	r4, [r0, #32]
 8004130:	f024 0401 	bic.w	r4, r4, #1
 8004134:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004138:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800413a:	4e0f      	ldr	r6, [pc, #60]	; (8004178 <TIM_TI1_SetConfig+0x4c>)
 800413c:	42b0      	cmp	r0, r6
 800413e:	d009      	beq.n	8004154 <TIM_TI1_SetConfig+0x28>
 8004140:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004144:	d006      	beq.n	8004154 <TIM_TI1_SetConfig+0x28>
 8004146:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 800414a:	42b0      	cmp	r0, r6
 800414c:	d002      	beq.n	8004154 <TIM_TI1_SetConfig+0x28>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800414e:	f044 0201 	orr.w	r2, r4, #1
 8004152:	e002      	b.n	800415a <TIM_TI1_SetConfig+0x2e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004154:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004158:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004164:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004168:	f001 010a 	and.w	r1, r1, #10
 800416c:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800416e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004170:	6201      	str	r1, [r0, #32]
}
 8004172:	bc70      	pop	{r4, r5, r6}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00

0800417c <HAL_TIM_IC_ConfigChannel>:
{
 800417c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800417e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d05a      	beq.n	800423c <HAL_TIM_IC_ConfigChannel+0xc0>
 8004186:	4604      	mov	r4, r0
 8004188:	460d      	mov	r5, r1
 800418a:	2301      	movs	r3, #1
 800418c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8004190:	b152      	cbz	r2, 80041a8 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8004192:	2a04      	cmp	r2, #4
 8004194:	d01a      	beq.n	80041cc <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8004196:	2a08      	cmp	r2, #8
 8004198:	d02b      	beq.n	80041f2 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 800419a:	2a0c      	cmp	r2, #12
 800419c:	d03b      	beq.n	8004216 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800419e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80041a0:	2300      	movs	r3, #0
 80041a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80041a8:	68cb      	ldr	r3, [r1, #12]
 80041aa:	684a      	ldr	r2, [r1, #4]
 80041ac:	6809      	ldr	r1, [r1, #0]
 80041ae:	6800      	ldr	r0, [r0, #0]
 80041b0:	f7ff ffbc 	bl	800412c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6993      	ldr	r3, [r2, #24]
 80041b8:	f023 030c 	bic.w	r3, r3, #12
 80041bc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	6993      	ldr	r3, [r2, #24]
 80041c2:	68a9      	ldr	r1, [r5, #8]
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2000      	movs	r0, #0
 80041ca:	e7e9      	b.n	80041a0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80041cc:	68cb      	ldr	r3, [r1, #12]
 80041ce:	684a      	ldr	r2, [r1, #4]
 80041d0:	6809      	ldr	r1, [r1, #0]
 80041d2:	6800      	ldr	r0, [r0, #0]
 80041d4:	f7ff fcd2 	bl	8003b7c <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	6993      	ldr	r3, [r2, #24]
 80041dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041e0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	6993      	ldr	r3, [r2, #24]
 80041e6:	68a9      	ldr	r1, [r5, #8]
 80041e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041ec:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2000      	movs	r0, #0
 80041f0:	e7d6      	b.n	80041a0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80041f2:	68cb      	ldr	r3, [r1, #12]
 80041f4:	684a      	ldr	r2, [r1, #4]
 80041f6:	6809      	ldr	r1, [r1, #0]
 80041f8:	6800      	ldr	r0, [r0, #0]
 80041fa:	f7ff fcda 	bl	8003bb2 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	69d3      	ldr	r3, [r2, #28]
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	69d3      	ldr	r3, [r2, #28]
 800420c:	68a9      	ldr	r1, [r5, #8]
 800420e:	430b      	orrs	r3, r1
 8004210:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2000      	movs	r0, #0
 8004214:	e7c4      	b.n	80041a0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004216:	68cb      	ldr	r3, [r1, #12]
 8004218:	684a      	ldr	r2, [r1, #4]
 800421a:	6809      	ldr	r1, [r1, #0]
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f7ff fce3 	bl	8003be8 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	69d3      	ldr	r3, [r2, #28]
 8004226:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800422a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	69d3      	ldr	r3, [r2, #28]
 8004230:	68a9      	ldr	r1, [r5, #8]
 8004232:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004236:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004238:	2000      	movs	r0, #0
 800423a:	e7b1      	b.n	80041a0 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 800423c:	2002      	movs	r0, #2
 800423e:	e7b2      	b.n	80041a6 <HAL_TIM_IC_ConfigChannel+0x2a>

08004240 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004240:	f001 011f 	and.w	r1, r1, #31
 8004244:	2301      	movs	r3, #1
 8004246:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800424a:	6a03      	ldr	r3, [r0, #32]
 800424c:	ea23 030c 	bic.w	r3, r3, ip
 8004250:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004252:	6a03      	ldr	r3, [r0, #32]
 8004254:	fa02 f101 	lsl.w	r1, r2, r1
 8004258:	430b      	orrs	r3, r1
 800425a:	6203      	str	r3, [r0, #32]
}
 800425c:	4770      	bx	lr
	...

08004260 <HAL_TIM_PWM_Start>:
{
 8004260:	b510      	push	{r4, lr}
 8004262:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004264:	4608      	mov	r0, r1
 8004266:	2900      	cmp	r1, #0
 8004268:	d137      	bne.n	80042da <HAL_TIM_PWM_Start+0x7a>
 800426a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	bf18      	it	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8084 	bne.w	8004384 <HAL_TIM_PWM_Start+0x124>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427c:	2800      	cmp	r0, #0
 800427e:	d157      	bne.n	8004330 <HAL_TIM_PWM_Start+0xd0>
 8004280:	2302      	movs	r3, #2
 8004282:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004286:	2201      	movs	r2, #1
 8004288:	4601      	mov	r1, r0
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	f7ff ffd8 	bl	8004240 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	4a3f      	ldr	r2, [pc, #252]	; (8004390 <HAL_TIM_PWM_Start+0x130>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <HAL_TIM_PWM_Start+0x50>
 8004298:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_PWM_Start+0x50>
 80042a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <HAL_TIM_PWM_Start+0x50>
 80042a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d103      	bne.n	80042b8 <HAL_TIM_PWM_Start+0x58>
    __HAL_TIM_MOE_ENABLE(htim);
 80042b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	4a35      	ldr	r2, [pc, #212]	; (8004390 <HAL_TIM_PWM_Start+0x130>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d053      	beq.n	8004368 <HAL_TIM_PWM_Start+0x108>
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c4:	d050      	beq.n	8004368 <HAL_TIM_PWM_Start+0x108>
 80042c6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04c      	beq.n	8004368 <HAL_TIM_PWM_Start+0x108>
    __HAL_TIM_ENABLE(htim);
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042d6:	2000      	movs	r0, #0
 80042d8:	e055      	b.n	8004386 <HAL_TIM_PWM_Start+0x126>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042da:	2904      	cmp	r1, #4
 80042dc:	d00c      	beq.n	80042f8 <HAL_TIM_PWM_Start+0x98>
 80042de:	2908      	cmp	r1, #8
 80042e0:	d011      	beq.n	8004306 <HAL_TIM_PWM_Start+0xa6>
 80042e2:	290c      	cmp	r1, #12
 80042e4:	d016      	beq.n	8004314 <HAL_TIM_PWM_Start+0xb4>
 80042e6:	2910      	cmp	r1, #16
 80042e8:	d01b      	beq.n	8004322 <HAL_TIM_PWM_Start+0xc2>
 80042ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	bf18      	it	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	e7be      	b.n	8004276 <HAL_TIM_PWM_Start+0x16>
 80042f8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	bf18      	it	ne
 8004302:	2301      	movne	r3, #1
 8004304:	e7b7      	b.n	8004276 <HAL_TIM_PWM_Start+0x16>
 8004306:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	bf18      	it	ne
 8004310:	2301      	movne	r3, #1
 8004312:	e7b0      	b.n	8004276 <HAL_TIM_PWM_Start+0x16>
 8004314:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	bf18      	it	ne
 800431e:	2301      	movne	r3, #1
 8004320:	e7a9      	b.n	8004276 <HAL_TIM_PWM_Start+0x16>
 8004322:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004326:	b2db      	uxtb	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	bf18      	it	ne
 800432c:	2301      	movne	r3, #1
 800432e:	e7a2      	b.n	8004276 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004330:	2804      	cmp	r0, #4
 8004332:	d009      	beq.n	8004348 <HAL_TIM_PWM_Start+0xe8>
 8004334:	2808      	cmp	r0, #8
 8004336:	d00b      	beq.n	8004350 <HAL_TIM_PWM_Start+0xf0>
 8004338:	280c      	cmp	r0, #12
 800433a:	d00d      	beq.n	8004358 <HAL_TIM_PWM_Start+0xf8>
 800433c:	2810      	cmp	r0, #16
 800433e:	d00f      	beq.n	8004360 <HAL_TIM_PWM_Start+0x100>
 8004340:	2302      	movs	r3, #2
 8004342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004346:	e79e      	b.n	8004286 <HAL_TIM_PWM_Start+0x26>
 8004348:	2302      	movs	r3, #2
 800434a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800434e:	e79a      	b.n	8004286 <HAL_TIM_PWM_Start+0x26>
 8004350:	2302      	movs	r3, #2
 8004352:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004356:	e796      	b.n	8004286 <HAL_TIM_PWM_Start+0x26>
 8004358:	2302      	movs	r3, #2
 800435a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800435e:	e792      	b.n	8004286 <HAL_TIM_PWM_Start+0x26>
 8004360:	2302      	movs	r3, #2
 8004362:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004366:	e78e      	b.n	8004286 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <HAL_TIM_PWM_Start+0x134>)
 800436c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	2a06      	cmp	r2, #6
 8004370:	d00a      	beq.n	8004388 <HAL_TIM_PWM_Start+0x128>
 8004372:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004376:	d009      	beq.n	800438c <HAL_TIM_PWM_Start+0x12c>
      __HAL_TIM_ENABLE(htim);
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004380:	2000      	movs	r0, #0
 8004382:	e000      	b.n	8004386 <HAL_TIM_PWM_Start+0x126>
    return HAL_ERROR;
 8004384:	2001      	movs	r0, #1
}
 8004386:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004388:	2000      	movs	r0, #0
 800438a:	e7fc      	b.n	8004386 <HAL_TIM_PWM_Start+0x126>
 800438c:	2000      	movs	r0, #0
 800438e:	e7fa      	b.n	8004386 <HAL_TIM_PWM_Start+0x126>
 8004390:	40012c00 	.word	0x40012c00
 8004394:	00010007 	.word	0x00010007

08004398 <HAL_TIM_IC_Start_IT>:
{
 8004398:	b510      	push	{r4, lr}
 800439a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800439c:	460b      	mov	r3, r1
 800439e:	bb19      	cbnz	r1, 80043e8 <HAL_TIM_IC_Start_IT+0x50>
 80043a0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80043a4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d13a      	bne.n	8004420 <HAL_TIM_IC_Start_IT+0x88>
 80043aa:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80043ae:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b0:	2801      	cmp	r0, #1
 80043b2:	f040 80ac 	bne.w	800450e <HAL_TIM_IC_Start_IT+0x176>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043b6:	2a01      	cmp	r2, #1
 80043b8:	f040 80aa 	bne.w	8004510 <HAL_TIM_IC_Start_IT+0x178>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d13f      	bne.n	8004440 <HAL_TIM_IC_Start_IT+0xa8>
 80043c0:	2102      	movs	r1, #2
 80043c2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d156      	bne.n	8004478 <HAL_TIM_IC_Start_IT+0xe0>
 80043ca:	2102      	movs	r1, #2
 80043cc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	f200 809e 	bhi.w	8004512 <HAL_TIM_IC_Start_IT+0x17a>
 80043d6:	e8df f003 	tbb	[pc, r3]
 80043da:	9c5f      	.short	0x9c5f
 80043dc:	9c7a9c9c 	.word	0x9c7a9c9c
 80043e0:	9c809c9c 	.word	0x9c809c9c
 80043e4:	9c9c      	.short	0x9c9c
 80043e6:	86          	.byte	0x86
 80043e7:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043e8:	2904      	cmp	r1, #4
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_IC_Start_IT+0x68>
 80043ec:	2908      	cmp	r1, #8
 80043ee:	d00b      	beq.n	8004408 <HAL_TIM_IC_Start_IT+0x70>
 80043f0:	290c      	cmp	r1, #12
 80043f2:	d00d      	beq.n	8004410 <HAL_TIM_IC_Start_IT+0x78>
 80043f4:	2910      	cmp	r1, #16
 80043f6:	d00f      	beq.n	8004418 <HAL_TIM_IC_Start_IT+0x80>
 80043f8:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 80043fc:	b2c0      	uxtb	r0, r0
 80043fe:	e7d2      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0xe>
 8004400:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004404:	b2c0      	uxtb	r0, r0
 8004406:	e7ce      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0xe>
 8004408:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800440c:	b2c0      	uxtb	r0, r0
 800440e:	e7ca      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0xe>
 8004410:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004414:	b2c0      	uxtb	r0, r0
 8004416:	e7c6      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0xe>
 8004418:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800441c:	b2c0      	uxtb	r0, r0
 800441e:	e7c2      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004420:	2b04      	cmp	r3, #4
 8004422:	d005      	beq.n	8004430 <HAL_TIM_IC_Start_IT+0x98>
 8004424:	2b08      	cmp	r3, #8
 8004426:	d007      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0xa0>
 8004428:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	e7bf      	b.n	80043b0 <HAL_TIM_IC_Start_IT+0x18>
 8004430:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	e7bb      	b.n	80043b0 <HAL_TIM_IC_Start_IT+0x18>
 8004438:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	e7b7      	b.n	80043b0 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004440:	2b04      	cmp	r3, #4
 8004442:	d009      	beq.n	8004458 <HAL_TIM_IC_Start_IT+0xc0>
 8004444:	2b08      	cmp	r3, #8
 8004446:	d00b      	beq.n	8004460 <HAL_TIM_IC_Start_IT+0xc8>
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d00d      	beq.n	8004468 <HAL_TIM_IC_Start_IT+0xd0>
 800444c:	2b10      	cmp	r3, #16
 800444e:	d00f      	beq.n	8004470 <HAL_TIM_IC_Start_IT+0xd8>
 8004450:	2102      	movs	r1, #2
 8004452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004456:	e7b6      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x2e>
 8004458:	2102      	movs	r1, #2
 800445a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 800445e:	e7b2      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x2e>
 8004460:	2102      	movs	r1, #2
 8004462:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8004466:	e7ae      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x2e>
 8004468:	2102      	movs	r1, #2
 800446a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800446e:	e7aa      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x2e>
 8004470:	2102      	movs	r1, #2
 8004472:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004476:	e7a6      	b.n	80043c6 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004478:	2b04      	cmp	r3, #4
 800447a:	d005      	beq.n	8004488 <HAL_TIM_IC_Start_IT+0xf0>
 800447c:	2b08      	cmp	r3, #8
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IC_Start_IT+0xf8>
 8004480:	2102      	movs	r1, #2
 8004482:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 8004486:	e7a3      	b.n	80043d0 <HAL_TIM_IC_Start_IT+0x38>
 8004488:	2102      	movs	r1, #2
 800448a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800448e:	e79f      	b.n	80043d0 <HAL_TIM_IC_Start_IT+0x38>
 8004490:	2102      	movs	r1, #2
 8004492:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 8004496:	e79b      	b.n	80043d0 <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	68ca      	ldr	r2, [r1, #12]
 800449c:	f042 0202 	orr.w	r2, r2, #2
 80044a0:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a2:	2201      	movs	r2, #1
 80044a4:	4619      	mov	r1, r3
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f7ff feca 	bl	8004240 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <HAL_TIM_IC_Start_IT+0x188>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01e      	beq.n	80044f2 <HAL_TIM_IC_Start_IT+0x15a>
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d01b      	beq.n	80044f2 <HAL_TIM_IC_Start_IT+0x15a>
 80044ba:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80044be:	4293      	cmp	r3, r2
 80044c0:	d017      	beq.n	80044f2 <HAL_TIM_IC_Start_IT+0x15a>
      __HAL_TIM_ENABLE(htim);
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	2000      	movs	r0, #0
 80044cc:	e020      	b.n	8004510 <HAL_TIM_IC_Start_IT+0x178>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044ce:	6821      	ldr	r1, [r4, #0]
 80044d0:	68ca      	ldr	r2, [r1, #12]
 80044d2:	f042 0204 	orr.w	r2, r2, #4
 80044d6:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80044d8:	e7e3      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044da:	6821      	ldr	r1, [r4, #0]
 80044dc:	68ca      	ldr	r2, [r1, #12]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80044e4:	e7dd      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044e6:	6821      	ldr	r1, [r4, #0]
 80044e8:	68ca      	ldr	r2, [r1, #12]
 80044ea:	f042 0210 	orr.w	r2, r2, #16
 80044ee:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80044f0:	e7d7      	b.n	80044a2 <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f2:	6899      	ldr	r1, [r3, #8]
 80044f4:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <HAL_TIM_IC_Start_IT+0x18c>)
 80044f6:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	2a06      	cmp	r2, #6
 80044fa:	d00c      	beq.n	8004516 <HAL_TIM_IC_Start_IT+0x17e>
 80044fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004500:	d00b      	beq.n	800451a <HAL_TIM_IC_Start_IT+0x182>
        __HAL_TIM_ENABLE(htim);
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	2000      	movs	r0, #0
 800450c:	e000      	b.n	8004510 <HAL_TIM_IC_Start_IT+0x178>
    return HAL_ERROR;
 800450e:	2001      	movs	r0, #1
}
 8004510:	bd10      	pop	{r4, pc}
  switch (Channel)
 8004512:	4610      	mov	r0, r2
 8004514:	e7fc      	b.n	8004510 <HAL_TIM_IC_Start_IT+0x178>
 8004516:	2000      	movs	r0, #0
 8004518:	e7fa      	b.n	8004510 <HAL_TIM_IC_Start_IT+0x178>
 800451a:	2000      	movs	r0, #0
 800451c:	e7f8      	b.n	8004510 <HAL_TIM_IC_Start_IT+0x178>
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00
 8004524:	00010007 	.word	0x00010007

08004528 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004528:	f001 011f 	and.w	r1, r1, #31
 800452c:	2304      	movs	r3, #4
 800452e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004532:	6a03      	ldr	r3, [r0, #32]
 8004534:	ea23 030c 	bic.w	r3, r3, ip
 8004538:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800453a:	6a03      	ldr	r3, [r0, #32]
 800453c:	fa02 f101 	lsl.w	r1, r2, r1
 8004540:	430b      	orrs	r3, r1
 8004542:	6203      	str	r3, [r0, #32]
}
 8004544:	4770      	bx	lr
	...

08004548 <HAL_TIMEx_PWMN_Start>:
{
 8004548:	b510      	push	{r4, lr}
 800454a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800454c:	4608      	mov	r0, r1
 800454e:	bb39      	cbnz	r1, 80045a0 <HAL_TIMEx_PWMN_Start+0x58>
 8004550:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d156      	bne.n	800460e <HAL_TIMEx_PWMN_Start+0xc6>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004560:	2800      	cmp	r0, #0
 8004562:	d136      	bne.n	80045d2 <HAL_TIMEx_PWMN_Start+0x8a>
 8004564:	2302      	movs	r3, #2
 8004566:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800456a:	2204      	movs	r2, #4
 800456c:	4601      	mov	r1, r0
 800456e:	6820      	ldr	r0, [r4, #0]
 8004570:	f7ff ffda 	bl	8004528 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <HAL_TIMEx_PWMN_Start+0xd4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d035      	beq.n	80045f2 <HAL_TIMEx_PWMN_Start+0xaa>
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d032      	beq.n	80045f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800458c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004590:	4293      	cmp	r3, r2
 8004592:	d02e      	beq.n	80045f2 <HAL_TIMEx_PWMN_Start+0xaa>
    __HAL_TIM_ENABLE(htim);
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800459c:	2000      	movs	r0, #0
 800459e:	e037      	b.n	8004610 <HAL_TIMEx_PWMN_Start+0xc8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045a0:	2904      	cmp	r1, #4
 80045a2:	d008      	beq.n	80045b6 <HAL_TIMEx_PWMN_Start+0x6e>
 80045a4:	2908      	cmp	r1, #8
 80045a6:	d00d      	beq.n	80045c4 <HAL_TIMEx_PWMN_Start+0x7c>
 80045a8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	e7d2      	b.n	800455c <HAL_TIMEx_PWMN_Start+0x14>
 80045b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	bf18      	it	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	e7cb      	b.n	800455c <HAL_TIMEx_PWMN_Start+0x14>
 80045c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	bf18      	it	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	e7c4      	b.n	800455c <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d2:	2804      	cmp	r0, #4
 80045d4:	d005      	beq.n	80045e2 <HAL_TIMEx_PWMN_Start+0x9a>
 80045d6:	2808      	cmp	r0, #8
 80045d8:	d007      	beq.n	80045ea <HAL_TIMEx_PWMN_Start+0xa2>
 80045da:	2302      	movs	r3, #2
 80045dc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80045e0:	e7c3      	b.n	800456a <HAL_TIMEx_PWMN_Start+0x22>
 80045e2:	2302      	movs	r3, #2
 80045e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045e8:	e7bf      	b.n	800456a <HAL_TIMEx_PWMN_Start+0x22>
 80045ea:	2302      	movs	r3, #2
 80045ec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80045f0:	e7bb      	b.n	800456a <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_TIMEx_PWMN_Start+0xd8>)
 80045f6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	2a06      	cmp	r2, #6
 80045fa:	d00a      	beq.n	8004612 <HAL_TIMEx_PWMN_Start+0xca>
 80045fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004600:	d009      	beq.n	8004616 <HAL_TIMEx_PWMN_Start+0xce>
      __HAL_TIM_ENABLE(htim);
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800460a:	2000      	movs	r0, #0
 800460c:	e000      	b.n	8004610 <HAL_TIMEx_PWMN_Start+0xc8>
    return HAL_ERROR;
 800460e:	2001      	movs	r0, #1
}
 8004610:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004612:	2000      	movs	r0, #0
 8004614:	e7fc      	b.n	8004610 <HAL_TIMEx_PWMN_Start+0xc8>
 8004616:	2000      	movs	r0, #0
 8004618:	e7fa      	b.n	8004610 <HAL_TIMEx_PWMN_Start+0xc8>
 800461a:	bf00      	nop
 800461c:	40012c00 	.word	0x40012c00
 8004620:	00010007 	.word	0x00010007

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004624:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d02f      	beq.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 800462c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800462e:	2301      	movs	r3, #1
 8004630:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800463a:	6802      	ldr	r2, [r0, #0]
 800463c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800463e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004640:	4d13      	ldr	r5, [pc, #76]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004642:	42aa      	cmp	r2, r5
 8004644:	d01d      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464a:	680d      	ldr	r5, [r1, #0]
 800464c:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800464e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	6803      	ldr	r3, [r0, #0]
 8004652:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d006      	beq.n	8004666 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d003      	beq.n	8004666 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800465e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004662:	4293      	cmp	r3, r2
 8004664:	d104      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004666:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800466a:	688a      	ldr	r2, [r1, #8]
 800466c:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 800466e:	609c      	str	r4, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004670:	2301      	movs	r3, #1
 8004672:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004676:	2300      	movs	r3, #0
 8004678:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800467c:	4618      	mov	r0, r3
}
 800467e:	bc30      	pop	{r4, r5}
 8004680:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004686:	684d      	ldr	r5, [r1, #4]
 8004688:	432b      	orrs	r3, r5
 800468a:	e7dc      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800468c:	2002      	movs	r0, #2
}
 800468e:	4770      	bx	lr
 8004690:	40012c00 	.word	0x40012c00

08004694 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8004694:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d03b      	beq.n	8004714 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 800469c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800469e:	2301      	movs	r3, #1
 80046a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046a4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	688a      	ldr	r2, [r1, #8]
 80046ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046b2:	684a      	ldr	r2, [r1, #4]
 80046b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ba:	680a      	ldr	r2, [r1, #0]
 80046bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c2:	690a      	ldr	r2, [r1, #16]
 80046c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ca:	694a      	ldr	r2, [r1, #20]
 80046cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80046d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046d6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80046da:	698a      	ldr	r2, [r1, #24]
 80046dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046e0:	6802      	ldr	r2, [r0, #0]
 80046e2:	4c0d      	ldr	r4, [pc, #52]	; (8004718 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 80046e4:	42a2      	cmp	r2, r4
 80046e6:	d007      	beq.n	80046f8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
  htim->Instance->BDTR = tmpbdtr;
 80046e8:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80046ea:	2300      	movs	r3, #0
 80046ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80046f0:	4618      	mov	r0, r3
}
 80046f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046fc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80046fe:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	69cc      	ldr	r4, [r1, #28]
 8004708:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800470a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800470e:	6a09      	ldr	r1, [r1, #32]
 8004710:	430b      	orrs	r3, r1
 8004712:	e7e9      	b.n	80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8004714:	2002      	movs	r0, #2
}
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00

0800471c <HAL_TIMEx_CommutCallback>:
}
 800471c:	4770      	bx	lr

0800471e <HAL_TIMEx_BreakCallback>:
}
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_Break2Callback>:
}
 8004720:	4770      	bx	lr

08004722 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004722:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	e852 3f00 	ldrex	r3, [r2]
 8004728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	e842 3100 	strex	r1, r3, [r2]
 8004730:	2900      	cmp	r1, #0
 8004732:	d1f6      	bne.n	8004722 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	f102 0308 	add.w	r3, r2, #8
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	3208      	adds	r2, #8
 8004744:	e842 3100 	strex	r1, r3, [r2]
 8004748:	2900      	cmp	r1, #0
 800474a:	d1f3      	bne.n	8004734 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800474e:	2b01      	cmp	r3, #1
 8004750:	d006      	beq.n	8004760 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004752:	2320      	movs	r3, #32
 8004754:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004758:	2300      	movs	r3, #0
 800475a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800475c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800475e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004760:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	e852 3f00 	ldrex	r3, [r2]
 8004766:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	e842 3100 	strex	r1, r3, [r2]
 800476e:	2900      	cmp	r1, #0
 8004770:	d1f6      	bne.n	8004760 <UART_EndRxTransfer+0x3e>
 8004772:	e7ee      	b.n	8004752 <UART_EndRxTransfer+0x30>

08004774 <UART_SetConfig>:
{
 8004774:	b510      	push	{r4, lr}
 8004776:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004778:	6883      	ldr	r3, [r0, #8]
 800477a:	6902      	ldr	r2, [r0, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	6942      	ldr	r2, [r0, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	69c2      	ldr	r2, [r0, #28]
 8004784:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004786:	6801      	ldr	r1, [r0, #0]
 8004788:	6808      	ldr	r0, [r1, #0]
 800478a:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <UART_SetConfig+0x150>)
 800478c:	4002      	ands	r2, r0
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004792:	6822      	ldr	r2, [r4, #0]
 8004794:	6853      	ldr	r3, [r2, #4]
 8004796:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800479a:	68e1      	ldr	r1, [r4, #12]
 800479c:	430b      	orrs	r3, r1
 800479e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a0:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80047a2:	6a23      	ldr	r3, [r4, #32]
 80047a4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047a6:	6821      	ldr	r1, [r4, #0]
 80047a8:	688b      	ldr	r3, [r1, #8]
 80047aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	4a44      	ldr	r2, [pc, #272]	; (80048c8 <UART_SetConfig+0x154>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d014      	beq.n	80047e4 <UART_SetConfig+0x70>
 80047ba:	4a44      	ldr	r2, [pc, #272]	; (80048cc <UART_SetConfig+0x158>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <UART_SetConfig+0x9c>
 80047c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d01f      	beq.n	8004808 <UART_SetConfig+0x94>
 80047c8:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	69e0      	ldr	r0, [r4, #28]
 80047cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047d0:	d020      	beq.n	8004814 <UART_SetConfig+0xa0>
    switch (clocksource)
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d870      	bhi.n	80048b8 <UART_SetConfig+0x144>
 80047d6:	e8df f003 	tbb	[pc, r3]
 80047da:	604a      	.short	0x604a
 80047dc:	6f636f48 	.word	0x6f636f48
 80047e0:	6f6f      	.short	0x6f6f
 80047e2:	66          	.byte	0x66
 80047e3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e4:	4b3a      	ldr	r3, [pc, #232]	; (80048d0 <UART_SetConfig+0x15c>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d809      	bhi.n	8004804 <UART_SetConfig+0x90>
 80047f0:	e8df f003 	tbb	[pc, r3]
 80047f4:	0c060402 	.word	0x0c060402
 80047f8:	2300      	movs	r3, #0
 80047fa:	e7e6      	b.n	80047ca <UART_SetConfig+0x56>
 80047fc:	2304      	movs	r3, #4
 80047fe:	e7e4      	b.n	80047ca <UART_SetConfig+0x56>
 8004800:	2308      	movs	r3, #8
 8004802:	e7e2      	b.n	80047ca <UART_SetConfig+0x56>
 8004804:	2310      	movs	r3, #16
 8004806:	e7e0      	b.n	80047ca <UART_SetConfig+0x56>
 8004808:	2300      	movs	r3, #0
 800480a:	e7de      	b.n	80047ca <UART_SetConfig+0x56>
 800480c:	2302      	movs	r3, #2
 800480e:	e7dc      	b.n	80047ca <UART_SetConfig+0x56>
 8004810:	2300      	movs	r3, #0
 8004812:	e7da      	b.n	80047ca <UART_SetConfig+0x56>
    switch (clocksource)
 8004814:	2b08      	cmp	r3, #8
 8004816:	d849      	bhi.n	80048ac <UART_SetConfig+0x138>
 8004818:	e8df f003 	tbb	[pc, r3]
 800481c:	48251f05 	.word	0x48251f05
 8004820:	48484822 	.word	0x48484822
 8004824:	09          	.byte	0x09
 8004825:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8004826:	f7fe ff49 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800482a:	2800      	cmp	r0, #0
 800482c:	d040      	beq.n	80048b0 <UART_SetConfig+0x13c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482e:	6862      	ldr	r2, [r4, #4]
 8004830:	0853      	lsrs	r3, r2, #1
 8004832:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004836:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483a:	f1a0 0210 	sub.w	r2, r0, #16
 800483e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004842:	429a      	cmp	r2, r3
 8004844:	d836      	bhi.n	80048b4 <UART_SetConfig+0x140>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004846:	b283      	uxth	r3, r0
 8004848:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800484c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004850:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	60d8      	str	r0, [r3, #12]
 8004856:	2000      	movs	r0, #0
 8004858:	e01b      	b.n	8004892 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800485a:	f7fe ff45 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
        break;
 800485e:	e7e4      	b.n	800482a <UART_SetConfig+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 8004860:	f7fe fe1a 	bl	8003498 <HAL_RCC_GetSysClockFreq>
        break;
 8004864:	e7e1      	b.n	800482a <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 8004866:	481b      	ldr	r0, [pc, #108]	; (80048d4 <UART_SetConfig+0x160>)
 8004868:	e7e1      	b.n	800482e <UART_SetConfig+0xba>
    switch (clocksource)
 800486a:	481a      	ldr	r0, [pc, #104]	; (80048d4 <UART_SetConfig+0x160>)
 800486c:	e002      	b.n	8004874 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7fe ff25 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004872:	b318      	cbz	r0, 80048bc <UART_SetConfig+0x148>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004874:	6863      	ldr	r3, [r4, #4]
 8004876:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800487a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487e:	f1a0 0210 	sub.w	r2, r0, #16
 8004882:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004886:	429a      	cmp	r2, r3
 8004888:	d81a      	bhi.n	80048c0 <UART_SetConfig+0x14c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	b280      	uxth	r0, r0
 800488e:	60d8      	str	r0, [r3, #12]
 8004890:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004896:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004898:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800489a:	f7fe ff25 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
        break;
 800489e:	e7e8      	b.n	8004872 <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetSysClockFreq();
 80048a0:	f7fe fdfa 	bl	8003498 <HAL_RCC_GetSysClockFreq>
        break;
 80048a4:	e7e5      	b.n	8004872 <UART_SetConfig+0xfe>
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048aa:	e7e3      	b.n	8004874 <UART_SetConfig+0x100>
    switch (clocksource)
 80048ac:	2001      	movs	r0, #1
 80048ae:	e7f0      	b.n	8004892 <UART_SetConfig+0x11e>
 80048b0:	2000      	movs	r0, #0
 80048b2:	e7ee      	b.n	8004892 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 80048b4:	2001      	movs	r0, #1
 80048b6:	e7ec      	b.n	8004892 <UART_SetConfig+0x11e>
    switch (clocksource)
 80048b8:	2001      	movs	r0, #1
 80048ba:	e7ea      	b.n	8004892 <UART_SetConfig+0x11e>
 80048bc:	2000      	movs	r0, #0
 80048be:	e7e8      	b.n	8004892 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 80048c0:	2001      	movs	r0, #1
 80048c2:	e7e6      	b.n	8004892 <UART_SetConfig+0x11e>
 80048c4:	efff69f3 	.word	0xefff69f3
 80048c8:	40013800 	.word	0x40013800
 80048cc:	40004400 	.word	0x40004400
 80048d0:	40021000 	.word	0x40021000
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048da:	f013 0f01 	tst.w	r3, #1
 80048de:	d006      	beq.n	80048ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048e0:	6802      	ldr	r2, [r0, #0]
 80048e2:	6853      	ldr	r3, [r2, #4]
 80048e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048e8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048f0:	f013 0f02 	tst.w	r3, #2
 80048f4:	d006      	beq.n	8004904 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f6:	6802      	ldr	r2, [r0, #0]
 80048f8:	6853      	ldr	r3, [r2, #4]
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004900:	430b      	orrs	r3, r1
 8004902:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004906:	f013 0f04 	tst.w	r3, #4
 800490a:	d006      	beq.n	800491a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	6853      	ldr	r3, [r2, #4]
 8004910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004914:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004916:	430b      	orrs	r3, r1
 8004918:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800491c:	f013 0f08 	tst.w	r3, #8
 8004920:	d006      	beq.n	8004930 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004922:	6802      	ldr	r2, [r0, #0]
 8004924:	6853      	ldr	r3, [r2, #4]
 8004926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800492a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800492c:	430b      	orrs	r3, r1
 800492e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004932:	f013 0f10 	tst.w	r3, #16
 8004936:	d006      	beq.n	8004946 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004938:	6802      	ldr	r2, [r0, #0]
 800493a:	6893      	ldr	r3, [r2, #8]
 800493c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004940:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004942:	430b      	orrs	r3, r1
 8004944:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004946:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004948:	f013 0f20 	tst.w	r3, #32
 800494c:	d006      	beq.n	800495c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800494e:	6802      	ldr	r2, [r0, #0]
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004956:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004958:	430b      	orrs	r3, r1
 800495a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800495c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800495e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004962:	d00a      	beq.n	800497a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004964:	6802      	ldr	r2, [r0, #0]
 8004966:	6853      	ldr	r3, [r2, #4]
 8004968:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800496c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800496e:	430b      	orrs	r3, r1
 8004970:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004972:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004978:	d00b      	beq.n	8004992 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800497c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004980:	d006      	beq.n	8004990 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004982:	6802      	ldr	r2, [r0, #0]
 8004984:	6853      	ldr	r3, [r2, #4]
 8004986:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800498a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800498c:	430b      	orrs	r3, r1
 800498e:	6053      	str	r3, [r2, #4]
}
 8004990:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004992:	6802      	ldr	r2, [r0, #0]
 8004994:	6853      	ldr	r3, [r2, #4]
 8004996:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800499a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800499c:	430b      	orrs	r3, r1
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e7eb      	b.n	800497a <UART_AdvFeatureConfig+0xa2>

080049a2 <UART_WaitOnFlagUntilTimeout>:
{
 80049a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a6:	4605      	mov	r5, r0
 80049a8:	460f      	mov	r7, r1
 80049aa:	4616      	mov	r6, r2
 80049ac:	4699      	mov	r9, r3
 80049ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b2:	682c      	ldr	r4, [r5, #0]
 80049b4:	69e4      	ldr	r4, [r4, #28]
 80049b6:	ea37 0304 	bics.w	r3, r7, r4
 80049ba:	bf0c      	ite	eq
 80049bc:	f04f 0c01 	moveq.w	ip, #1
 80049c0:	f04f 0c00 	movne.w	ip, #0
 80049c4:	45b4      	cmp	ip, r6
 80049c6:	d132      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80049cc:	d0f1      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fd f8e1 	bl	8001b94 <HAL_GetTick>
 80049d2:	eba0 0009 	sub.w	r0, r0, r9
 80049d6:	4540      	cmp	r0, r8
 80049d8:	d82c      	bhi.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x92>
 80049da:	f1b8 0f00 	cmp.w	r8, #0
 80049de:	d02b      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	f012 0f04 	tst.w	r2, #4
 80049e8:	d0e3      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	f012 0f08 	tst.w	r2, #8
 80049f0:	d111      	bne.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80049f8:	d0db      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049fe:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff fe8e 	bl	8004722 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a06:	2320      	movs	r3, #32
 8004a08:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 8004a12:	2003      	movs	r0, #3
 8004a14:	e00c      	b.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x8e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a16:	2408      	movs	r4, #8
 8004a18:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7ff fe81 	bl	8004722 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a20:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
           __HAL_UNLOCK(huart);
 8004a24:	2300      	movs	r3, #0
 8004a26:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
           return HAL_ERROR;
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	e000      	b.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8004a2e:	2000      	movs	r0, #0
}
 8004a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004a34:	2003      	movs	r0, #3
 8004a36:	e7fb      	b.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x8e>
 8004a38:	2003      	movs	r0, #3
 8004a3a:	e7f9      	b.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x8e>

08004a3c <UART_CheckIdleState>:
{
 8004a3c:	b530      	push	{r4, r5, lr}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004a48:	f7fd f8a4 	bl	8001b94 <HAL_GetTick>
 8004a4c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	f012 0f08 	tst.w	r2, #8
 8004a56:	d10f      	bne.n	8004a78 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f013 0f04 	tst.w	r3, #4
 8004a60:	d126      	bne.n	8004ab0 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8004a62:	2320      	movs	r3, #32
 8004a64:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a6e:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004a70:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8004a74:	b003      	add	sp, #12
 8004a76:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2200      	movs	r2, #0
 8004a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a86:	4620      	mov	r0, r4
 8004a88:	f7ff ff8b 	bl	80049a2 <UART_WaitOnFlagUntilTimeout>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d0e3      	beq.n	8004a58 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	e852 3f00 	ldrex	r3, [r2]
 8004a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	e842 3100 	strex	r1, r3, [r2]
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	d1f6      	bne.n	8004a90 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
 8004aae:	e7e1      	b.n	8004a74 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	462b      	mov	r3, r5
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff ff6f 	bl	80049a2 <UART_WaitOnFlagUntilTimeout>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d0cc      	beq.n	8004a62 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	e852 3f00 	ldrex	r3, [r2]
 8004ace:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	e842 3100 	strex	r1, r3, [r2]
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d1f6      	bne.n	8004ac8 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	f102 0308 	add.w	r3, r2, #8
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	3208      	adds	r2, #8
 8004aea:	e842 3100 	strex	r1, r3, [r2]
 8004aee:	2900      	cmp	r1, #0
 8004af0:	d1f3      	bne.n	8004ada <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8004af2:	2320      	movs	r3, #32
 8004af4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 8004af8:	2300      	movs	r3, #0
 8004afa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8004afe:	2003      	movs	r0, #3
 8004b00:	e7b8      	b.n	8004a74 <UART_CheckIdleState+0x38>

08004b02 <HAL_UART_Init>:
  if (huart == NULL)
 8004b02:	b368      	cbz	r0, 8004b60 <HAL_UART_Init+0x5e>
{
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b08:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004b0a:	b303      	cbz	r3, 8004b4e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	2324      	movs	r3, #36	; 0x24
 8004b0e:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff fe2a 	bl	8004774 <UART_SetConfig>
 8004b20:	2801      	cmp	r0, #1
 8004b22:	d013      	beq.n	8004b4c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b26:	b9bb      	cbnz	r3, 8004b58 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	6853      	ldr	r3, [r2, #4]
 8004b2c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b30:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	6893      	ldr	r3, [r2, #8]
 8004b36:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004b3a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7ff ff78 	bl	8004a3c <UART_CheckIdleState>
}
 8004b4c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b4e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004b52:	f7fc ff43 	bl	80019dc <HAL_UART_MspInit>
 8004b56:	e7d9      	b.n	8004b0c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff febd 	bl	80048d8 <UART_AdvFeatureConfig>
 8004b5e:	e7e3      	b.n	8004b28 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004b60:	2001      	movs	r0, #1
}
 8004b62:	4770      	bx	lr

08004b64 <__errno>:
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <__errno+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	2000000c 	.word	0x2000000c

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4d0d      	ldr	r5, [pc, #52]	; (8004ba8 <__libc_init_array+0x38>)
 8004b74:	4c0d      	ldr	r4, [pc, #52]	; (8004bac <__libc_init_array+0x3c>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	4d0b      	ldr	r5, [pc, #44]	; (8004bb0 <__libc_init_array+0x40>)
 8004b82:	4c0c      	ldr	r4, [pc, #48]	; (8004bb4 <__libc_init_array+0x44>)
 8004b84:	f000 fffa 	bl	8005b7c <_init>
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	08005fdc 	.word	0x08005fdc
 8004bac:	08005fdc 	.word	0x08005fdc
 8004bb0:	08005fdc 	.word	0x08005fdc
 8004bb4:	08005fe0 	.word	0x08005fe0

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <cosf>:
 8004bc8:	ee10 3a10 	vmov	r3, s0
 8004bcc:	b507      	push	{r0, r1, r2, lr}
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <cosf+0x80>)
 8004bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	dc06      	bgt.n	8004be6 <cosf+0x1e>
 8004bd8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004c4c <cosf+0x84>
 8004bdc:	b003      	add	sp, #12
 8004bde:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be2:	f000 bb1d 	b.w	8005220 <__kernel_cosf>
 8004be6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004bea:	db04      	blt.n	8004bf6 <cosf+0x2e>
 8004bec:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004bf0:	b003      	add	sp, #12
 8004bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bf6:	4668      	mov	r0, sp
 8004bf8:	f000 f9d2 	bl	8004fa0 <__ieee754_rem_pio2f>
 8004bfc:	f000 0003 	and.w	r0, r0, #3
 8004c00:	2801      	cmp	r0, #1
 8004c02:	d009      	beq.n	8004c18 <cosf+0x50>
 8004c04:	2802      	cmp	r0, #2
 8004c06:	d010      	beq.n	8004c2a <cosf+0x62>
 8004c08:	b9b0      	cbnz	r0, 8004c38 <cosf+0x70>
 8004c0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c0e:	ed9d 0a00 	vldr	s0, [sp]
 8004c12:	f000 fb05 	bl	8005220 <__kernel_cosf>
 8004c16:	e7eb      	b.n	8004bf0 <cosf+0x28>
 8004c18:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c1c:	ed9d 0a00 	vldr	s0, [sp]
 8004c20:	f000 fdd4 	bl	80057cc <__kernel_sinf>
 8004c24:	eeb1 0a40 	vneg.f32	s0, s0
 8004c28:	e7e2      	b.n	8004bf0 <cosf+0x28>
 8004c2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c2e:	ed9d 0a00 	vldr	s0, [sp]
 8004c32:	f000 faf5 	bl	8005220 <__kernel_cosf>
 8004c36:	e7f5      	b.n	8004c24 <cosf+0x5c>
 8004c38:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c3c:	ed9d 0a00 	vldr	s0, [sp]
 8004c40:	2001      	movs	r0, #1
 8004c42:	f000 fdc3 	bl	80057cc <__kernel_sinf>
 8004c46:	e7d3      	b.n	8004bf0 <cosf+0x28>
 8004c48:	3f490fd8 	.word	0x3f490fd8
 8004c4c:	00000000 	.word	0x00000000

08004c50 <sinf>:
 8004c50:	ee10 3a10 	vmov	r3, s0
 8004c54:	b507      	push	{r0, r1, r2, lr}
 8004c56:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <sinf+0x84>)
 8004c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	dc07      	bgt.n	8004c70 <sinf+0x20>
 8004c60:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004cd8 <sinf+0x88>
 8004c64:	2000      	movs	r0, #0
 8004c66:	b003      	add	sp, #12
 8004c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c6c:	f000 bdae 	b.w	80057cc <__kernel_sinf>
 8004c70:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004c74:	db04      	blt.n	8004c80 <sinf+0x30>
 8004c76:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004c7a:	b003      	add	sp, #12
 8004c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c80:	4668      	mov	r0, sp
 8004c82:	f000 f98d 	bl	8004fa0 <__ieee754_rem_pio2f>
 8004c86:	f000 0003 	and.w	r0, r0, #3
 8004c8a:	2801      	cmp	r0, #1
 8004c8c:	d00a      	beq.n	8004ca4 <sinf+0x54>
 8004c8e:	2802      	cmp	r0, #2
 8004c90:	d00f      	beq.n	8004cb2 <sinf+0x62>
 8004c92:	b9c0      	cbnz	r0, 8004cc6 <sinf+0x76>
 8004c94:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c98:	ed9d 0a00 	vldr	s0, [sp]
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f000 fd95 	bl	80057cc <__kernel_sinf>
 8004ca2:	e7ea      	b.n	8004c7a <sinf+0x2a>
 8004ca4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ca8:	ed9d 0a00 	vldr	s0, [sp]
 8004cac:	f000 fab8 	bl	8005220 <__kernel_cosf>
 8004cb0:	e7e3      	b.n	8004c7a <sinf+0x2a>
 8004cb2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cb6:	ed9d 0a00 	vldr	s0, [sp]
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f000 fd86 	bl	80057cc <__kernel_sinf>
 8004cc0:	eeb1 0a40 	vneg.f32	s0, s0
 8004cc4:	e7d9      	b.n	8004c7a <sinf+0x2a>
 8004cc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cca:	ed9d 0a00 	vldr	s0, [sp]
 8004cce:	f000 faa7 	bl	8005220 <__kernel_cosf>
 8004cd2:	e7f5      	b.n	8004cc0 <sinf+0x70>
 8004cd4:	3f490fd8 	.word	0x3f490fd8
 8004cd8:	00000000 	.word	0x00000000

08004cdc <atan2f>:
 8004cdc:	f000 b83e 	b.w	8004d5c <__ieee754_atan2f>

08004ce0 <fmodf>:
 8004ce0:	b508      	push	{r3, lr}
 8004ce2:	ed2d 8b02 	vpush	{d8}
 8004ce6:	eef0 8a40 	vmov.f32	s17, s0
 8004cea:	eeb0 8a60 	vmov.f32	s16, s1
 8004cee:	f000 f8d5 	bl	8004e9c <__ieee754_fmodf>
 8004cf2:	eef4 8a48 	vcmp.f32	s17, s16
 8004cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfa:	d60c      	bvs.n	8004d16 <fmodf+0x36>
 8004cfc:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004d1c <fmodf+0x3c>
 8004d00:	eeb4 8a68 	vcmp.f32	s16, s17
 8004d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d08:	d105      	bne.n	8004d16 <fmodf+0x36>
 8004d0a:	f7ff ff2b 	bl	8004b64 <__errno>
 8004d0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004d12:	2321      	movs	r3, #33	; 0x21
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	ecbd 8b02 	vpop	{d8}
 8004d1a:	bd08      	pop	{r3, pc}
 8004d1c:	00000000 	.word	0x00000000

08004d20 <sqrtf>:
 8004d20:	b508      	push	{r3, lr}
 8004d22:	ed2d 8b02 	vpush	{d8}
 8004d26:	eeb0 8a40 	vmov.f32	s16, s0
 8004d2a:	f000 fa75 	bl	8005218 <__ieee754_sqrtf>
 8004d2e:	eeb4 8a48 	vcmp.f32	s16, s16
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	d60c      	bvs.n	8004d52 <sqrtf+0x32>
 8004d38:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004d58 <sqrtf+0x38>
 8004d3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	d505      	bpl.n	8004d52 <sqrtf+0x32>
 8004d46:	f7ff ff0d 	bl	8004b64 <__errno>
 8004d4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004d4e:	2321      	movs	r3, #33	; 0x21
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	ecbd 8b02 	vpop	{d8}
 8004d56:	bd08      	pop	{r3, pc}
 8004d58:	00000000 	.word	0x00000000

08004d5c <__ieee754_atan2f>:
 8004d5c:	ee10 2a90 	vmov	r2, s1
 8004d60:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004d64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	eef0 7a40 	vmov.f32	s15, s0
 8004d6e:	dc06      	bgt.n	8004d7e <__ieee754_atan2f+0x22>
 8004d70:	ee10 0a10 	vmov	r0, s0
 8004d74:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004d78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004d7c:	dd04      	ble.n	8004d88 <__ieee754_atan2f+0x2c>
 8004d7e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004d82:	eeb0 0a67 	vmov.f32	s0, s15
 8004d86:	bd10      	pop	{r4, pc}
 8004d88:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8004d8c:	d103      	bne.n	8004d96 <__ieee754_atan2f+0x3a>
 8004d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d92:	f000 bd63 	b.w	800585c <atanf>
 8004d96:	1794      	asrs	r4, r2, #30
 8004d98:	f004 0402 	and.w	r4, r4, #2
 8004d9c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004da0:	b943      	cbnz	r3, 8004db4 <__ieee754_atan2f+0x58>
 8004da2:	2c02      	cmp	r4, #2
 8004da4:	d05e      	beq.n	8004e64 <__ieee754_atan2f+0x108>
 8004da6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004e78 <__ieee754_atan2f+0x11c>
 8004daa:	2c03      	cmp	r4, #3
 8004dac:	bf08      	it	eq
 8004dae:	eef0 7a47 	vmoveq.f32	s15, s14
 8004db2:	e7e6      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004db4:	b941      	cbnz	r1, 8004dc8 <__ieee754_atan2f+0x6c>
 8004db6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004e7c <__ieee754_atan2f+0x120>
 8004dba:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004e80 <__ieee754_atan2f+0x124>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	eef0 7a40 	vmovlt.f32	s15, s0
 8004dc6:	e7dc      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004dc8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004dcc:	d110      	bne.n	8004df0 <__ieee754_atan2f+0x94>
 8004dce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004dd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004dd6:	d107      	bne.n	8004de8 <__ieee754_atan2f+0x8c>
 8004dd8:	2c02      	cmp	r4, #2
 8004dda:	d846      	bhi.n	8004e6a <__ieee754_atan2f+0x10e>
 8004ddc:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <__ieee754_atan2f+0x128>)
 8004dde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004de2:	edd4 7a00 	vldr	s15, [r4]
 8004de6:	e7cc      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004de8:	2c02      	cmp	r4, #2
 8004dea:	d841      	bhi.n	8004e70 <__ieee754_atan2f+0x114>
 8004dec:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <__ieee754_atan2f+0x12c>)
 8004dee:	e7f6      	b.n	8004dde <__ieee754_atan2f+0x82>
 8004df0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004df4:	d0df      	beq.n	8004db6 <__ieee754_atan2f+0x5a>
 8004df6:	1a5b      	subs	r3, r3, r1
 8004df8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8004dfc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8004e00:	da1a      	bge.n	8004e38 <__ieee754_atan2f+0xdc>
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	da01      	bge.n	8004e0a <__ieee754_atan2f+0xae>
 8004e06:	313c      	adds	r1, #60	; 0x3c
 8004e08:	db19      	blt.n	8004e3e <__ieee754_atan2f+0xe2>
 8004e0a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8004e0e:	f000 fdf9 	bl	8005a04 <fabsf>
 8004e12:	f000 fd23 	bl	800585c <atanf>
 8004e16:	eef0 7a40 	vmov.f32	s15, s0
 8004e1a:	2c01      	cmp	r4, #1
 8004e1c:	d012      	beq.n	8004e44 <__ieee754_atan2f+0xe8>
 8004e1e:	2c02      	cmp	r4, #2
 8004e20:	d017      	beq.n	8004e52 <__ieee754_atan2f+0xf6>
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d0ad      	beq.n	8004d82 <__ieee754_atan2f+0x26>
 8004e26:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8004e8c <__ieee754_atan2f+0x130>
 8004e2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004e2e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004e90 <__ieee754_atan2f+0x134>
 8004e32:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004e36:	e7a4      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004e38:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004e7c <__ieee754_atan2f+0x120>
 8004e3c:	e7ed      	b.n	8004e1a <__ieee754_atan2f+0xbe>
 8004e3e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004e94 <__ieee754_atan2f+0x138>
 8004e42:	e7ea      	b.n	8004e1a <__ieee754_atan2f+0xbe>
 8004e44:	ee17 3a90 	vmov	r3, s15
 8004e48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	e797      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004e52:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004e8c <__ieee754_atan2f+0x130>
 8004e56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004e5a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004e90 <__ieee754_atan2f+0x134>
 8004e5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004e62:	e78e      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004e64:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004e90 <__ieee754_atan2f+0x134>
 8004e68:	e78b      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004e6a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004e98 <__ieee754_atan2f+0x13c>
 8004e6e:	e788      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004e70:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004e94 <__ieee754_atan2f+0x138>
 8004e74:	e785      	b.n	8004d82 <__ieee754_atan2f+0x26>
 8004e76:	bf00      	nop
 8004e78:	c0490fdb 	.word	0xc0490fdb
 8004e7c:	3fc90fdb 	.word	0x3fc90fdb
 8004e80:	bfc90fdb 	.word	0xbfc90fdb
 8004e84:	08005bcc 	.word	0x08005bcc
 8004e88:	08005bd8 	.word	0x08005bd8
 8004e8c:	33bbbd2e 	.word	0x33bbbd2e
 8004e90:	40490fdb 	.word	0x40490fdb
 8004e94:	00000000 	.word	0x00000000
 8004e98:	3f490fdb 	.word	0x3f490fdb

08004e9c <__ieee754_fmodf>:
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9e:	ee10 5a90 	vmov	r5, s1
 8004ea2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8004ea6:	d009      	beq.n	8004ebc <__ieee754_fmodf+0x20>
 8004ea8:	ee10 2a10 	vmov	r2, s0
 8004eac:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004eb0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004eb4:	da02      	bge.n	8004ebc <__ieee754_fmodf+0x20>
 8004eb6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004eba:	dd04      	ble.n	8004ec6 <__ieee754_fmodf+0x2a>
 8004ebc:	ee60 0a20 	vmul.f32	s1, s0, s1
 8004ec0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8004ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	dbfc      	blt.n	8004ec4 <__ieee754_fmodf+0x28>
 8004eca:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8004ece:	d105      	bne.n	8004edc <__ieee754_fmodf+0x40>
 8004ed0:	4b32      	ldr	r3, [pc, #200]	; (8004f9c <__ieee754_fmodf+0x100>)
 8004ed2:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8004ed6:	ed93 0a00 	vldr	s0, [r3]
 8004eda:	e7f3      	b.n	8004ec4 <__ieee754_fmodf+0x28>
 8004edc:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8004ee0:	d13f      	bne.n	8004f62 <__ieee754_fmodf+0xc6>
 8004ee2:	0219      	lsls	r1, r3, #8
 8004ee4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8004ee8:	2900      	cmp	r1, #0
 8004eea:	dc37      	bgt.n	8004f5c <__ieee754_fmodf+0xc0>
 8004eec:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8004ef0:	d13d      	bne.n	8004f6e <__ieee754_fmodf+0xd2>
 8004ef2:	0227      	lsls	r7, r4, #8
 8004ef4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	da35      	bge.n	8004f68 <__ieee754_fmodf+0xcc>
 8004efc:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8004f00:	bfbb      	ittet	lt
 8004f02:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8004f06:	1a12      	sublt	r2, r2, r0
 8004f08:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8004f0c:	4093      	lsllt	r3, r2
 8004f0e:	bfa8      	it	ge
 8004f10:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8004f14:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8004f18:	bfb5      	itete	lt
 8004f1a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8004f1e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8004f22:	1a52      	sublt	r2, r2, r1
 8004f24:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8004f28:	bfb8      	it	lt
 8004f2a:	4094      	lsllt	r4, r2
 8004f2c:	1a40      	subs	r0, r0, r1
 8004f2e:	1b1a      	subs	r2, r3, r4
 8004f30:	bb00      	cbnz	r0, 8004f74 <__ieee754_fmodf+0xd8>
 8004f32:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8004f36:	bf38      	it	cc
 8004f38:	4613      	movcc	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0c8      	beq.n	8004ed0 <__ieee754_fmodf+0x34>
 8004f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f42:	db1f      	blt.n	8004f84 <__ieee754_fmodf+0xe8>
 8004f44:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8004f48:	db1f      	blt.n	8004f8a <__ieee754_fmodf+0xee>
 8004f4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8004f4e:	317f      	adds	r1, #127	; 0x7f
 8004f50:	4333      	orrs	r3, r6
 8004f52:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8004f56:	ee00 3a10 	vmov	s0, r3
 8004f5a:	e7b3      	b.n	8004ec4 <__ieee754_fmodf+0x28>
 8004f5c:	3801      	subs	r0, #1
 8004f5e:	0049      	lsls	r1, r1, #1
 8004f60:	e7c2      	b.n	8004ee8 <__ieee754_fmodf+0x4c>
 8004f62:	15d8      	asrs	r0, r3, #23
 8004f64:	387f      	subs	r0, #127	; 0x7f
 8004f66:	e7c1      	b.n	8004eec <__ieee754_fmodf+0x50>
 8004f68:	3901      	subs	r1, #1
 8004f6a:	007f      	lsls	r7, r7, #1
 8004f6c:	e7c4      	b.n	8004ef8 <__ieee754_fmodf+0x5c>
 8004f6e:	15e1      	asrs	r1, r4, #23
 8004f70:	397f      	subs	r1, #127	; 0x7f
 8004f72:	e7c3      	b.n	8004efc <__ieee754_fmodf+0x60>
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	da02      	bge.n	8004f7e <__ieee754_fmodf+0xe2>
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	3801      	subs	r0, #1
 8004f7c:	e7d7      	b.n	8004f2e <__ieee754_fmodf+0x92>
 8004f7e:	d0a7      	beq.n	8004ed0 <__ieee754_fmodf+0x34>
 8004f80:	0053      	lsls	r3, r2, #1
 8004f82:	e7fa      	b.n	8004f7a <__ieee754_fmodf+0xde>
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	3901      	subs	r1, #1
 8004f88:	e7d9      	b.n	8004f3e <__ieee754_fmodf+0xa2>
 8004f8a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8004f8e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8004f92:	3182      	adds	r1, #130	; 0x82
 8004f94:	410b      	asrs	r3, r1
 8004f96:	4333      	orrs	r3, r6
 8004f98:	e7dd      	b.n	8004f56 <__ieee754_fmodf+0xba>
 8004f9a:	bf00      	nop
 8004f9c:	08005be4 	.word	0x08005be4

08004fa0 <__ieee754_rem_pio2f>:
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	ee10 6a10 	vmov	r6, s0
 8004fa6:	4b8e      	ldr	r3, [pc, #568]	; (80051e0 <__ieee754_rem_pio2f+0x240>)
 8004fa8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004fac:	429d      	cmp	r5, r3
 8004fae:	b087      	sub	sp, #28
 8004fb0:	eef0 7a40 	vmov.f32	s15, s0
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	dc05      	bgt.n	8004fc4 <__ieee754_rem_pio2f+0x24>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	ed80 0a00 	vstr	s0, [r0]
 8004fbe:	6043      	str	r3, [r0, #4]
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	e01a      	b.n	8004ffa <__ieee754_rem_pio2f+0x5a>
 8004fc4:	4b87      	ldr	r3, [pc, #540]	; (80051e4 <__ieee754_rem_pio2f+0x244>)
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	dc46      	bgt.n	8005058 <__ieee754_rem_pio2f+0xb8>
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80051e8 <__ieee754_rem_pio2f+0x248>
 8004fd0:	4b86      	ldr	r3, [pc, #536]	; (80051ec <__ieee754_rem_pio2f+0x24c>)
 8004fd2:	f025 050f 	bic.w	r5, r5, #15
 8004fd6:	dd1f      	ble.n	8005018 <__ieee754_rem_pio2f+0x78>
 8004fd8:	429d      	cmp	r5, r3
 8004fda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004fde:	d00e      	beq.n	8004ffe <__ieee754_rem_pio2f+0x5e>
 8004fe0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80051f0 <__ieee754_rem_pio2f+0x250>
 8004fe4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004fe8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004fec:	ed80 0a00 	vstr	s0, [r0]
 8004ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	edc4 7a01 	vstr	s15, [r4, #4]
 8004ffa:	b007      	add	sp, #28
 8004ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ffe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80051f4 <__ieee754_rem_pio2f+0x254>
 8005002:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80051f8 <__ieee754_rem_pio2f+0x258>
 8005006:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800500a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800500e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005012:	edc0 6a00 	vstr	s13, [r0]
 8005016:	e7eb      	b.n	8004ff0 <__ieee754_rem_pio2f+0x50>
 8005018:	429d      	cmp	r5, r3
 800501a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800501e:	d00e      	beq.n	800503e <__ieee754_rem_pio2f+0x9e>
 8005020:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80051f0 <__ieee754_rem_pio2f+0x250>
 8005024:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005028:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800502c:	ed80 0a00 	vstr	s0, [r0]
 8005030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	edc4 7a01 	vstr	s15, [r4, #4]
 800503c:	e7dd      	b.n	8004ffa <__ieee754_rem_pio2f+0x5a>
 800503e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80051f4 <__ieee754_rem_pio2f+0x254>
 8005042:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80051f8 <__ieee754_rem_pio2f+0x258>
 8005046:	ee77 7a80 	vadd.f32	s15, s15, s0
 800504a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800504e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005052:	edc0 6a00 	vstr	s13, [r0]
 8005056:	e7eb      	b.n	8005030 <__ieee754_rem_pio2f+0x90>
 8005058:	4b68      	ldr	r3, [pc, #416]	; (80051fc <__ieee754_rem_pio2f+0x25c>)
 800505a:	429d      	cmp	r5, r3
 800505c:	dc72      	bgt.n	8005144 <__ieee754_rem_pio2f+0x1a4>
 800505e:	f000 fcd1 	bl	8005a04 <fabsf>
 8005062:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005200 <__ieee754_rem_pio2f+0x260>
 8005066:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800506a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800506e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005076:	ee17 0a90 	vmov	r0, s15
 800507a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80051e8 <__ieee754_rem_pio2f+0x248>
 800507e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005082:	281f      	cmp	r0, #31
 8005084:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80051f0 <__ieee754_rem_pio2f+0x250>
 8005088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508c:	eeb1 6a47 	vneg.f32	s12, s14
 8005090:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005094:	ee16 2a90 	vmov	r2, s13
 8005098:	dc1c      	bgt.n	80050d4 <__ieee754_rem_pio2f+0x134>
 800509a:	495a      	ldr	r1, [pc, #360]	; (8005204 <__ieee754_rem_pio2f+0x264>)
 800509c:	1e47      	subs	r7, r0, #1
 800509e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80050a2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80050a6:	428b      	cmp	r3, r1
 80050a8:	d014      	beq.n	80050d4 <__ieee754_rem_pio2f+0x134>
 80050aa:	6022      	str	r2, [r4, #0]
 80050ac:	ed94 7a00 	vldr	s14, [r4]
 80050b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050ba:	ed84 0a01 	vstr	s0, [r4, #4]
 80050be:	da9c      	bge.n	8004ffa <__ieee754_rem_pio2f+0x5a>
 80050c0:	eeb1 7a47 	vneg.f32	s14, s14
 80050c4:	eeb1 0a40 	vneg.f32	s0, s0
 80050c8:	ed84 7a00 	vstr	s14, [r4]
 80050cc:	ed84 0a01 	vstr	s0, [r4, #4]
 80050d0:	4240      	negs	r0, r0
 80050d2:	e792      	b.n	8004ffa <__ieee754_rem_pio2f+0x5a>
 80050d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80050d8:	15eb      	asrs	r3, r5, #23
 80050da:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80050de:	2d08      	cmp	r5, #8
 80050e0:	dde3      	ble.n	80050aa <__ieee754_rem_pio2f+0x10a>
 80050e2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80051f4 <__ieee754_rem_pio2f+0x254>
 80050e6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80051f8 <__ieee754_rem_pio2f+0x258>
 80050ea:	eef0 6a40 	vmov.f32	s13, s0
 80050ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80050f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80050f6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80050fa:	eef0 7a40 	vmov.f32	s15, s0
 80050fe:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005102:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005106:	ee15 2a90 	vmov	r2, s11
 800510a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800510e:	1a5b      	subs	r3, r3, r1
 8005110:	2b19      	cmp	r3, #25
 8005112:	dc04      	bgt.n	800511e <__ieee754_rem_pio2f+0x17e>
 8005114:	edc4 5a00 	vstr	s11, [r4]
 8005118:	eeb0 0a66 	vmov.f32	s0, s13
 800511c:	e7c6      	b.n	80050ac <__ieee754_rem_pio2f+0x10c>
 800511e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005208 <__ieee754_rem_pio2f+0x268>
 8005122:	eeb0 0a66 	vmov.f32	s0, s13
 8005126:	eea6 0a25 	vfma.f32	s0, s12, s11
 800512a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800512e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800520c <__ieee754_rem_pio2f+0x26c>
 8005132:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005136:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800513a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800513e:	ed84 7a00 	vstr	s14, [r4]
 8005142:	e7b3      	b.n	80050ac <__ieee754_rem_pio2f+0x10c>
 8005144:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005148:	db06      	blt.n	8005158 <__ieee754_rem_pio2f+0x1b8>
 800514a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800514e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005152:	edc0 7a00 	vstr	s15, [r0]
 8005156:	e733      	b.n	8004fc0 <__ieee754_rem_pio2f+0x20>
 8005158:	15ea      	asrs	r2, r5, #23
 800515a:	3a86      	subs	r2, #134	; 0x86
 800515c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005168:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005210 <__ieee754_rem_pio2f+0x270>
 800516c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005174:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005178:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800517c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005180:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005188:	ed8d 7a04 	vstr	s14, [sp, #16]
 800518c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005190:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005198:	edcd 7a05 	vstr	s15, [sp, #20]
 800519c:	d11e      	bne.n	80051dc <__ieee754_rem_pio2f+0x23c>
 800519e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	bf14      	ite	ne
 80051a8:	2302      	movne	r3, #2
 80051aa:	2301      	moveq	r3, #1
 80051ac:	4919      	ldr	r1, [pc, #100]	; (8005214 <__ieee754_rem_pio2f+0x274>)
 80051ae:	9101      	str	r1, [sp, #4]
 80051b0:	2102      	movs	r1, #2
 80051b2:	9100      	str	r1, [sp, #0]
 80051b4:	a803      	add	r0, sp, #12
 80051b6:	4621      	mov	r1, r4
 80051b8:	f000 f892 	bl	80052e0 <__kernel_rem_pio2f>
 80051bc:	2e00      	cmp	r6, #0
 80051be:	f6bf af1c 	bge.w	8004ffa <__ieee754_rem_pio2f+0x5a>
 80051c2:	edd4 7a00 	vldr	s15, [r4]
 80051c6:	eef1 7a67 	vneg.f32	s15, s15
 80051ca:	edc4 7a00 	vstr	s15, [r4]
 80051ce:	edd4 7a01 	vldr	s15, [r4, #4]
 80051d2:	eef1 7a67 	vneg.f32	s15, s15
 80051d6:	edc4 7a01 	vstr	s15, [r4, #4]
 80051da:	e779      	b.n	80050d0 <__ieee754_rem_pio2f+0x130>
 80051dc:	2303      	movs	r3, #3
 80051de:	e7e5      	b.n	80051ac <__ieee754_rem_pio2f+0x20c>
 80051e0:	3f490fd8 	.word	0x3f490fd8
 80051e4:	4016cbe3 	.word	0x4016cbe3
 80051e8:	3fc90f80 	.word	0x3fc90f80
 80051ec:	3fc90fd0 	.word	0x3fc90fd0
 80051f0:	37354443 	.word	0x37354443
 80051f4:	37354400 	.word	0x37354400
 80051f8:	2e85a308 	.word	0x2e85a308
 80051fc:	43490f80 	.word	0x43490f80
 8005200:	3f22f984 	.word	0x3f22f984
 8005204:	08005bec 	.word	0x08005bec
 8005208:	2e85a300 	.word	0x2e85a300
 800520c:	248d3132 	.word	0x248d3132
 8005210:	43800000 	.word	0x43800000
 8005214:	08005c6c 	.word	0x08005c6c

08005218 <__ieee754_sqrtf>:
 8005218:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800521c:	4770      	bx	lr
	...

08005220 <__kernel_cosf>:
 8005220:	ee10 3a10 	vmov	r3, s0
 8005224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005228:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800522c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005230:	da05      	bge.n	800523e <__kernel_cosf+0x1e>
 8005232:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005236:	ee17 2a90 	vmov	r2, s15
 800523a:	2a00      	cmp	r2, #0
 800523c:	d03d      	beq.n	80052ba <__kernel_cosf+0x9a>
 800523e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8005242:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80052c0 <__kernel_cosf+0xa0>
 8005246:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80052c4 <__kernel_cosf+0xa4>
 800524a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80052c8 <__kernel_cosf+0xa8>
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <__kernel_cosf+0xac>)
 8005250:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005254:	4293      	cmp	r3, r2
 8005256:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80052d0 <__kernel_cosf+0xb0>
 800525a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800525e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80052d4 <__kernel_cosf+0xb4>
 8005262:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005266:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80052d8 <__kernel_cosf+0xb8>
 800526a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800526e:	eeb0 7a66 	vmov.f32	s14, s13
 8005272:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005276:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800527a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800527e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8005282:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8005286:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800528a:	dc04      	bgt.n	8005296 <__kernel_cosf+0x76>
 800528c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005290:	ee36 0a47 	vsub.f32	s0, s12, s14
 8005294:	4770      	bx	lr
 8005296:	4a11      	ldr	r2, [pc, #68]	; (80052dc <__kernel_cosf+0xbc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	bfda      	itte	le
 800529c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	ee06 3a90 	vmovle	s13, r3
 80052a4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80052a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80052ac:	ee36 0a66 	vsub.f32	s0, s12, s13
 80052b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052b8:	4770      	bx	lr
 80052ba:	eeb0 0a46 	vmov.f32	s0, s12
 80052be:	4770      	bx	lr
 80052c0:	ad47d74e 	.word	0xad47d74e
 80052c4:	310f74f6 	.word	0x310f74f6
 80052c8:	3d2aaaab 	.word	0x3d2aaaab
 80052cc:	3e999999 	.word	0x3e999999
 80052d0:	b493f27c 	.word	0xb493f27c
 80052d4:	37d00d01 	.word	0x37d00d01
 80052d8:	bab60b61 	.word	0xbab60b61
 80052dc:	3f480000 	.word	0x3f480000

080052e0 <__kernel_rem_pio2f>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	ed2d 8b04 	vpush	{d8-d9}
 80052e8:	b0d9      	sub	sp, #356	; 0x164
 80052ea:	4688      	mov	r8, r1
 80052ec:	9002      	str	r0, [sp, #8]
 80052ee:	49bb      	ldr	r1, [pc, #748]	; (80055dc <__kernel_rem_pio2f+0x2fc>)
 80052f0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80052f8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80052fc:	1e59      	subs	r1, r3, #1
 80052fe:	1d13      	adds	r3, r2, #4
 8005300:	db27      	blt.n	8005352 <__kernel_rem_pio2f+0x72>
 8005302:	f1b2 0b03 	subs.w	fp, r2, #3
 8005306:	bf48      	it	mi
 8005308:	f102 0b04 	addmi.w	fp, r2, #4
 800530c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8005310:	1c45      	adds	r5, r0, #1
 8005312:	00ec      	lsls	r4, r5, #3
 8005314:	1a47      	subs	r7, r0, r1
 8005316:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80055ec <__kernel_rem_pio2f+0x30c>
 800531a:	9403      	str	r4, [sp, #12]
 800531c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8005320:	eb0a 0c01 	add.w	ip, sl, r1
 8005324:	ae1c      	add	r6, sp, #112	; 0x70
 8005326:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800532a:	2400      	movs	r4, #0
 800532c:	4564      	cmp	r4, ip
 800532e:	dd12      	ble.n	8005356 <__kernel_rem_pio2f+0x76>
 8005330:	9b01      	ldr	r3, [sp, #4]
 8005332:	ac1c      	add	r4, sp, #112	; 0x70
 8005334:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005338:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800533c:	f04f 0c00 	mov.w	ip, #0
 8005340:	45d4      	cmp	ip, sl
 8005342:	dc27      	bgt.n	8005394 <__kernel_rem_pio2f+0xb4>
 8005344:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005348:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80055ec <__kernel_rem_pio2f+0x30c>
 800534c:	4627      	mov	r7, r4
 800534e:	2600      	movs	r6, #0
 8005350:	e016      	b.n	8005380 <__kernel_rem_pio2f+0xa0>
 8005352:	2000      	movs	r0, #0
 8005354:	e7dc      	b.n	8005310 <__kernel_rem_pio2f+0x30>
 8005356:	42e7      	cmn	r7, r4
 8005358:	bf5d      	ittte	pl
 800535a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800535e:	ee07 3a90 	vmovpl	s15, r3
 8005362:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005366:	eef0 7a47 	vmovmi.f32	s15, s14
 800536a:	ece6 7a01 	vstmia	r6!, {s15}
 800536e:	3401      	adds	r4, #1
 8005370:	e7dc      	b.n	800532c <__kernel_rem_pio2f+0x4c>
 8005372:	ecf9 6a01 	vldmia	r9!, {s13}
 8005376:	ed97 7a00 	vldr	s14, [r7]
 800537a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800537e:	3601      	adds	r6, #1
 8005380:	428e      	cmp	r6, r1
 8005382:	f1a7 0704 	sub.w	r7, r7, #4
 8005386:	ddf4      	ble.n	8005372 <__kernel_rem_pio2f+0x92>
 8005388:	eceb 7a01 	vstmia	fp!, {s15}
 800538c:	f10c 0c01 	add.w	ip, ip, #1
 8005390:	3404      	adds	r4, #4
 8005392:	e7d5      	b.n	8005340 <__kernel_rem_pio2f+0x60>
 8005394:	ab08      	add	r3, sp, #32
 8005396:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800539a:	eddf 8a93 	vldr	s17, [pc, #588]	; 80055e8 <__kernel_rem_pio2f+0x308>
 800539e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80055e4 <__kernel_rem_pio2f+0x304>
 80053a2:	9304      	str	r3, [sp, #16]
 80053a4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80053a8:	4656      	mov	r6, sl
 80053aa:	00b3      	lsls	r3, r6, #2
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	ab58      	add	r3, sp, #352	; 0x160
 80053b0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80053b4:	ac08      	add	r4, sp, #32
 80053b6:	ab44      	add	r3, sp, #272	; 0x110
 80053b8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80053bc:	46a4      	mov	ip, r4
 80053be:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80053c2:	4637      	mov	r7, r6
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f1a0 0004 	sub.w	r0, r0, #4
 80053ca:	dc4f      	bgt.n	800546c <__kernel_rem_pio2f+0x18c>
 80053cc:	4628      	mov	r0, r5
 80053ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80053d2:	f000 fb61 	bl	8005a98 <scalbnf>
 80053d6:	eeb0 8a40 	vmov.f32	s16, s0
 80053da:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80053de:	ee28 0a00 	vmul.f32	s0, s16, s0
 80053e2:	f000 fb17 	bl	8005a14 <floorf>
 80053e6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80053ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 80053ee:	2d00      	cmp	r5, #0
 80053f0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80053f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80053f8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80053fc:	ee17 9a90 	vmov	r9, s15
 8005400:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005404:	dd44      	ble.n	8005490 <__kernel_rem_pio2f+0x1b0>
 8005406:	f106 3cff 	add.w	ip, r6, #4294967295
 800540a:	ab08      	add	r3, sp, #32
 800540c:	f1c5 0e08 	rsb	lr, r5, #8
 8005410:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005414:	fa47 f00e 	asr.w	r0, r7, lr
 8005418:	4481      	add	r9, r0
 800541a:	fa00 f00e 	lsl.w	r0, r0, lr
 800541e:	1a3f      	subs	r7, r7, r0
 8005420:	f1c5 0007 	rsb	r0, r5, #7
 8005424:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005428:	4107      	asrs	r7, r0
 800542a:	2f00      	cmp	r7, #0
 800542c:	dd3f      	ble.n	80054ae <__kernel_rem_pio2f+0x1ce>
 800542e:	f04f 0e00 	mov.w	lr, #0
 8005432:	f109 0901 	add.w	r9, r9, #1
 8005436:	4673      	mov	r3, lr
 8005438:	4576      	cmp	r6, lr
 800543a:	dc6b      	bgt.n	8005514 <__kernel_rem_pio2f+0x234>
 800543c:	2d00      	cmp	r5, #0
 800543e:	dd04      	ble.n	800544a <__kernel_rem_pio2f+0x16a>
 8005440:	2d01      	cmp	r5, #1
 8005442:	d078      	beq.n	8005536 <__kernel_rem_pio2f+0x256>
 8005444:	2d02      	cmp	r5, #2
 8005446:	f000 8081 	beq.w	800554c <__kernel_rem_pio2f+0x26c>
 800544a:	2f02      	cmp	r7, #2
 800544c:	d12f      	bne.n	80054ae <__kernel_rem_pio2f+0x1ce>
 800544e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005452:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005456:	b353      	cbz	r3, 80054ae <__kernel_rem_pio2f+0x1ce>
 8005458:	4628      	mov	r0, r5
 800545a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800545e:	f000 fb1b 	bl	8005a98 <scalbnf>
 8005462:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8005466:	ee38 8a40 	vsub.f32	s16, s16, s0
 800546a:	e020      	b.n	80054ae <__kernel_rem_pio2f+0x1ce>
 800546c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005470:	3f01      	subs	r7, #1
 8005472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800547e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005482:	ecac 0a01 	vstmia	ip!, {s0}
 8005486:	ed90 0a00 	vldr	s0, [r0]
 800548a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800548e:	e799      	b.n	80053c4 <__kernel_rem_pio2f+0xe4>
 8005490:	d105      	bne.n	800549e <__kernel_rem_pio2f+0x1be>
 8005492:	1e70      	subs	r0, r6, #1
 8005494:	ab08      	add	r3, sp, #32
 8005496:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800549a:	11ff      	asrs	r7, r7, #7
 800549c:	e7c5      	b.n	800542a <__kernel_rem_pio2f+0x14a>
 800549e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80054a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054aa:	da31      	bge.n	8005510 <__kernel_rem_pio2f+0x230>
 80054ac:	2700      	movs	r7, #0
 80054ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	f040 809b 	bne.w	80055f0 <__kernel_rem_pio2f+0x310>
 80054ba:	1e74      	subs	r4, r6, #1
 80054bc:	46a4      	mov	ip, r4
 80054be:	2000      	movs	r0, #0
 80054c0:	45d4      	cmp	ip, sl
 80054c2:	da4a      	bge.n	800555a <__kernel_rem_pio2f+0x27a>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d07a      	beq.n	80055be <__kernel_rem_pio2f+0x2de>
 80054c8:	ab08      	add	r3, sp, #32
 80054ca:	3d08      	subs	r5, #8
 80054cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8081 	beq.w	80055d8 <__kernel_rem_pio2f+0x2f8>
 80054d6:	4628      	mov	r0, r5
 80054d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80054dc:	00a5      	lsls	r5, r4, #2
 80054de:	f000 fadb 	bl	8005a98 <scalbnf>
 80054e2:	aa44      	add	r2, sp, #272	; 0x110
 80054e4:	1d2b      	adds	r3, r5, #4
 80054e6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80055e8 <__kernel_rem_pio2f+0x308>
 80054ea:	18d1      	adds	r1, r2, r3
 80054ec:	4622      	mov	r2, r4
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	f280 80ae 	bge.w	8005650 <__kernel_rem_pio2f+0x370>
 80054f4:	4622      	mov	r2, r4
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	f2c0 80cc 	blt.w	8005694 <__kernel_rem_pio2f+0x3b4>
 80054fc:	a944      	add	r1, sp, #272	; 0x110
 80054fe:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8005502:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80055e0 <__kernel_rem_pio2f+0x300>
 8005506:	eddf 7a39 	vldr	s15, [pc, #228]	; 80055ec <__kernel_rem_pio2f+0x30c>
 800550a:	2000      	movs	r0, #0
 800550c:	1aa1      	subs	r1, r4, r2
 800550e:	e0b6      	b.n	800567e <__kernel_rem_pio2f+0x39e>
 8005510:	2702      	movs	r7, #2
 8005512:	e78c      	b.n	800542e <__kernel_rem_pio2f+0x14e>
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	b94b      	cbnz	r3, 800552c <__kernel_rem_pio2f+0x24c>
 8005518:	b118      	cbz	r0, 8005522 <__kernel_rem_pio2f+0x242>
 800551a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800551e:	6020      	str	r0, [r4, #0]
 8005520:	2001      	movs	r0, #1
 8005522:	f10e 0e01 	add.w	lr, lr, #1
 8005526:	3404      	adds	r4, #4
 8005528:	4603      	mov	r3, r0
 800552a:	e785      	b.n	8005438 <__kernel_rem_pio2f+0x158>
 800552c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005530:	6020      	str	r0, [r4, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	e7f5      	b.n	8005522 <__kernel_rem_pio2f+0x242>
 8005536:	1e74      	subs	r4, r6, #1
 8005538:	a808      	add	r0, sp, #32
 800553a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800553e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005542:	f10d 0c20 	add.w	ip, sp, #32
 8005546:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800554a:	e77e      	b.n	800544a <__kernel_rem_pio2f+0x16a>
 800554c:	1e74      	subs	r4, r6, #1
 800554e:	a808      	add	r0, sp, #32
 8005550:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005554:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005558:	e7f3      	b.n	8005542 <__kernel_rem_pio2f+0x262>
 800555a:	ab08      	add	r3, sp, #32
 800555c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005560:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005564:	4318      	orrs	r0, r3
 8005566:	e7ab      	b.n	80054c0 <__kernel_rem_pio2f+0x1e0>
 8005568:	f10c 0c01 	add.w	ip, ip, #1
 800556c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8005570:	2c00      	cmp	r4, #0
 8005572:	d0f9      	beq.n	8005568 <__kernel_rem_pio2f+0x288>
 8005574:	9b05      	ldr	r3, [sp, #20]
 8005576:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800557a:	eb0d 0003 	add.w	r0, sp, r3
 800557e:	9b01      	ldr	r3, [sp, #4]
 8005580:	18f4      	adds	r4, r6, r3
 8005582:	ab1c      	add	r3, sp, #112	; 0x70
 8005584:	1c77      	adds	r7, r6, #1
 8005586:	384c      	subs	r0, #76	; 0x4c
 8005588:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800558c:	4466      	add	r6, ip
 800558e:	42be      	cmp	r6, r7
 8005590:	f6ff af0b 	blt.w	80053aa <__kernel_rem_pio2f+0xca>
 8005594:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8005598:	f8dd e008 	ldr.w	lr, [sp, #8]
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a4:	f04f 0c00 	mov.w	ip, #0
 80055a8:	ece4 7a01 	vstmia	r4!, {s15}
 80055ac:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80055ec <__kernel_rem_pio2f+0x30c>
 80055b0:	46a1      	mov	r9, r4
 80055b2:	458c      	cmp	ip, r1
 80055b4:	dd07      	ble.n	80055c6 <__kernel_rem_pio2f+0x2e6>
 80055b6:	ece0 7a01 	vstmia	r0!, {s15}
 80055ba:	3701      	adds	r7, #1
 80055bc:	e7e7      	b.n	800558e <__kernel_rem_pio2f+0x2ae>
 80055be:	9804      	ldr	r0, [sp, #16]
 80055c0:	f04f 0c01 	mov.w	ip, #1
 80055c4:	e7d2      	b.n	800556c <__kernel_rem_pio2f+0x28c>
 80055c6:	ecfe 6a01 	vldmia	lr!, {s13}
 80055ca:	ed39 7a01 	vldmdb	r9!, {s14}
 80055ce:	f10c 0c01 	add.w	ip, ip, #1
 80055d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80055d6:	e7ec      	b.n	80055b2 <__kernel_rem_pio2f+0x2d2>
 80055d8:	3c01      	subs	r4, #1
 80055da:	e775      	b.n	80054c8 <__kernel_rem_pio2f+0x1e8>
 80055dc:	08005fb0 	.word	0x08005fb0
 80055e0:	08005f84 	.word	0x08005f84
 80055e4:	43800000 	.word	0x43800000
 80055e8:	3b800000 	.word	0x3b800000
 80055ec:	00000000 	.word	0x00000000
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	eeb0 0a48 	vmov.f32	s0, s16
 80055f6:	1a98      	subs	r0, r3, r2
 80055f8:	f000 fa4e 	bl	8005a98 <scalbnf>
 80055fc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80055e4 <__kernel_rem_pio2f+0x304>
 8005600:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	db19      	blt.n	800563e <__kernel_rem_pio2f+0x35e>
 800560a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80055e8 <__kernel_rem_pio2f+0x308>
 800560e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005612:	aa08      	add	r2, sp, #32
 8005614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005618:	1c74      	adds	r4, r6, #1
 800561a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800561e:	3508      	adds	r5, #8
 8005620:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005628:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800562c:	ee10 3a10 	vmov	r3, s0
 8005630:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005634:	ee17 3a90 	vmov	r3, s15
 8005638:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800563c:	e74b      	b.n	80054d6 <__kernel_rem_pio2f+0x1f6>
 800563e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005642:	aa08      	add	r2, sp, #32
 8005644:	ee10 3a10 	vmov	r3, s0
 8005648:	4634      	mov	r4, r6
 800564a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800564e:	e742      	b.n	80054d6 <__kernel_rem_pio2f+0x1f6>
 8005650:	a808      	add	r0, sp, #32
 8005652:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8005656:	9001      	str	r0, [sp, #4]
 8005658:	ee07 0a90 	vmov	s15, r0
 800565c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005660:	3a01      	subs	r2, #1
 8005662:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005666:	ee20 0a07 	vmul.f32	s0, s0, s14
 800566a:	ed61 7a01 	vstmdb	r1!, {s15}
 800566e:	e73e      	b.n	80054ee <__kernel_rem_pio2f+0x20e>
 8005670:	ecfc 6a01 	vldmia	ip!, {s13}
 8005674:	ecb6 7a01 	vldmia	r6!, {s14}
 8005678:	eee6 7a87 	vfma.f32	s15, s13, s14
 800567c:	3001      	adds	r0, #1
 800567e:	4550      	cmp	r0, sl
 8005680:	dc01      	bgt.n	8005686 <__kernel_rem_pio2f+0x3a6>
 8005682:	4288      	cmp	r0, r1
 8005684:	ddf4      	ble.n	8005670 <__kernel_rem_pio2f+0x390>
 8005686:	a858      	add	r0, sp, #352	; 0x160
 8005688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800568c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005690:	3a01      	subs	r2, #1
 8005692:	e730      	b.n	80054f6 <__kernel_rem_pio2f+0x216>
 8005694:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8005696:	2a02      	cmp	r2, #2
 8005698:	dc09      	bgt.n	80056ae <__kernel_rem_pio2f+0x3ce>
 800569a:	2a00      	cmp	r2, #0
 800569c:	dc2a      	bgt.n	80056f4 <__kernel_rem_pio2f+0x414>
 800569e:	d043      	beq.n	8005728 <__kernel_rem_pio2f+0x448>
 80056a0:	f009 0007 	and.w	r0, r9, #7
 80056a4:	b059      	add	sp, #356	; 0x164
 80056a6:	ecbd 8b04 	vpop	{d8-d9}
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d1f5      	bne.n	80056a0 <__kernel_rem_pio2f+0x3c0>
 80056b4:	ab30      	add	r3, sp, #192	; 0xc0
 80056b6:	442b      	add	r3, r5
 80056b8:	461a      	mov	r2, r3
 80056ba:	4619      	mov	r1, r3
 80056bc:	4620      	mov	r0, r4
 80056be:	2800      	cmp	r0, #0
 80056c0:	f1a1 0104 	sub.w	r1, r1, #4
 80056c4:	dc51      	bgt.n	800576a <__kernel_rem_pio2f+0x48a>
 80056c6:	4621      	mov	r1, r4
 80056c8:	2901      	cmp	r1, #1
 80056ca:	f1a2 0204 	sub.w	r2, r2, #4
 80056ce:	dc5c      	bgt.n	800578a <__kernel_rem_pio2f+0x4aa>
 80056d0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80055ec <__kernel_rem_pio2f+0x30c>
 80056d4:	3304      	adds	r3, #4
 80056d6:	2c01      	cmp	r4, #1
 80056d8:	dc67      	bgt.n	80057aa <__kernel_rem_pio2f+0x4ca>
 80056da:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80056de:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80056e2:	2f00      	cmp	r7, #0
 80056e4:	d167      	bne.n	80057b6 <__kernel_rem_pio2f+0x4d6>
 80056e6:	edc8 6a00 	vstr	s13, [r8]
 80056ea:	ed88 7a01 	vstr	s14, [r8, #4]
 80056ee:	edc8 7a02 	vstr	s15, [r8, #8]
 80056f2:	e7d5      	b.n	80056a0 <__kernel_rem_pio2f+0x3c0>
 80056f4:	aa30      	add	r2, sp, #192	; 0xc0
 80056f6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80055ec <__kernel_rem_pio2f+0x30c>
 80056fa:	4413      	add	r3, r2
 80056fc:	4622      	mov	r2, r4
 80056fe:	2a00      	cmp	r2, #0
 8005700:	da24      	bge.n	800574c <__kernel_rem_pio2f+0x46c>
 8005702:	b34f      	cbz	r7, 8005758 <__kernel_rem_pio2f+0x478>
 8005704:	eef1 7a47 	vneg.f32	s15, s14
 8005708:	edc8 7a00 	vstr	s15, [r8]
 800570c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005714:	aa31      	add	r2, sp, #196	; 0xc4
 8005716:	2301      	movs	r3, #1
 8005718:	429c      	cmp	r4, r3
 800571a:	da20      	bge.n	800575e <__kernel_rem_pio2f+0x47e>
 800571c:	b10f      	cbz	r7, 8005722 <__kernel_rem_pio2f+0x442>
 800571e:	eef1 7a67 	vneg.f32	s15, s15
 8005722:	edc8 7a01 	vstr	s15, [r8, #4]
 8005726:	e7bb      	b.n	80056a0 <__kernel_rem_pio2f+0x3c0>
 8005728:	aa30      	add	r2, sp, #192	; 0xc0
 800572a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80055ec <__kernel_rem_pio2f+0x30c>
 800572e:	4413      	add	r3, r2
 8005730:	2c00      	cmp	r4, #0
 8005732:	da05      	bge.n	8005740 <__kernel_rem_pio2f+0x460>
 8005734:	b10f      	cbz	r7, 800573a <__kernel_rem_pio2f+0x45a>
 8005736:	eef1 7a67 	vneg.f32	s15, s15
 800573a:	edc8 7a00 	vstr	s15, [r8]
 800573e:	e7af      	b.n	80056a0 <__kernel_rem_pio2f+0x3c0>
 8005740:	ed33 7a01 	vldmdb	r3!, {s14}
 8005744:	3c01      	subs	r4, #1
 8005746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800574a:	e7f1      	b.n	8005730 <__kernel_rem_pio2f+0x450>
 800574c:	ed73 7a01 	vldmdb	r3!, {s15}
 8005750:	3a01      	subs	r2, #1
 8005752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005756:	e7d2      	b.n	80056fe <__kernel_rem_pio2f+0x41e>
 8005758:	eef0 7a47 	vmov.f32	s15, s14
 800575c:	e7d4      	b.n	8005708 <__kernel_rem_pio2f+0x428>
 800575e:	ecb2 7a01 	vldmia	r2!, {s14}
 8005762:	3301      	adds	r3, #1
 8005764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005768:	e7d6      	b.n	8005718 <__kernel_rem_pio2f+0x438>
 800576a:	edd1 7a00 	vldr	s15, [r1]
 800576e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005772:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005776:	3801      	subs	r0, #1
 8005778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800577c:	ed81 7a00 	vstr	s14, [r1]
 8005780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005784:	edc1 7a01 	vstr	s15, [r1, #4]
 8005788:	e799      	b.n	80056be <__kernel_rem_pio2f+0x3de>
 800578a:	edd2 7a00 	vldr	s15, [r2]
 800578e:	edd2 6a01 	vldr	s13, [r2, #4]
 8005792:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005796:	3901      	subs	r1, #1
 8005798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800579c:	ed82 7a00 	vstr	s14, [r2]
 80057a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a4:	edc2 7a01 	vstr	s15, [r2, #4]
 80057a8:	e78e      	b.n	80056c8 <__kernel_rem_pio2f+0x3e8>
 80057aa:	ed33 7a01 	vldmdb	r3!, {s14}
 80057ae:	3c01      	subs	r4, #1
 80057b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057b4:	e78f      	b.n	80056d6 <__kernel_rem_pio2f+0x3f6>
 80057b6:	eef1 6a66 	vneg.f32	s13, s13
 80057ba:	eeb1 7a47 	vneg.f32	s14, s14
 80057be:	edc8 6a00 	vstr	s13, [r8]
 80057c2:	ed88 7a01 	vstr	s14, [r8, #4]
 80057c6:	eef1 7a67 	vneg.f32	s15, s15
 80057ca:	e790      	b.n	80056ee <__kernel_rem_pio2f+0x40e>

080057cc <__kernel_sinf>:
 80057cc:	ee10 3a10 	vmov	r3, s0
 80057d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80057d8:	da04      	bge.n	80057e4 <__kernel_sinf+0x18>
 80057da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80057de:	ee17 3a90 	vmov	r3, s15
 80057e2:	b35b      	cbz	r3, 800583c <__kernel_sinf+0x70>
 80057e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80057e8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005840 <__kernel_sinf+0x74>
 80057ec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005844 <__kernel_sinf+0x78>
 80057f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80057f4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005848 <__kernel_sinf+0x7c>
 80057f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80057fc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800584c <__kernel_sinf+0x80>
 8005800:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005804:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005850 <__kernel_sinf+0x84>
 8005808:	ee60 6a07 	vmul.f32	s13, s0, s14
 800580c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005810:	b930      	cbnz	r0, 8005820 <__kernel_sinf+0x54>
 8005812:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005854 <__kernel_sinf+0x88>
 8005816:	eea7 6a27 	vfma.f32	s12, s14, s15
 800581a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800581e:	4770      	bx	lr
 8005820:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005824:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005828:	eee0 7a86 	vfma.f32	s15, s1, s12
 800582c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005830:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005858 <__kernel_sinf+0x8c>
 8005834:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005838:	ee30 0a60 	vsub.f32	s0, s0, s1
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	2f2ec9d3 	.word	0x2f2ec9d3
 8005844:	b2d72f34 	.word	0xb2d72f34
 8005848:	3638ef1b 	.word	0x3638ef1b
 800584c:	b9500d01 	.word	0xb9500d01
 8005850:	3c088889 	.word	0x3c088889
 8005854:	be2aaaab 	.word	0xbe2aaaab
 8005858:	3e2aaaab 	.word	0x3e2aaaab

0800585c <atanf>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	ee10 5a10 	vmov	r5, s0
 8005862:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005866:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800586a:	eef0 7a40 	vmov.f32	s15, s0
 800586e:	db10      	blt.n	8005892 <atanf+0x36>
 8005870:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005874:	dd04      	ble.n	8005880 <atanf+0x24>
 8005876:	ee70 7a00 	vadd.f32	s15, s0, s0
 800587a:	eeb0 0a67 	vmov.f32	s0, s15
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80059b8 <atanf+0x15c>
 8005884:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80059bc <atanf+0x160>
 8005888:	2d00      	cmp	r5, #0
 800588a:	bfd8      	it	le
 800588c:	eef0 7a40 	vmovle.f32	s15, s0
 8005890:	e7f3      	b.n	800587a <atanf+0x1e>
 8005892:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <atanf+0x164>)
 8005894:	429c      	cmp	r4, r3
 8005896:	dc10      	bgt.n	80058ba <atanf+0x5e>
 8005898:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800589c:	da0a      	bge.n	80058b4 <atanf+0x58>
 800589e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80059c4 <atanf+0x168>
 80058a2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80058ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b2:	dce2      	bgt.n	800587a <atanf+0x1e>
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295
 80058b8:	e013      	b.n	80058e2 <atanf+0x86>
 80058ba:	f000 f8a3 	bl	8005a04 <fabsf>
 80058be:	4b42      	ldr	r3, [pc, #264]	; (80059c8 <atanf+0x16c>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	dc4f      	bgt.n	8005964 <atanf+0x108>
 80058c4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80058c8:	429c      	cmp	r4, r3
 80058ca:	dc41      	bgt.n	8005950 <atanf+0xf4>
 80058cc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80058d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80058d4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80058d8:	2300      	movs	r3, #0
 80058da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80058e8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80059cc <atanf+0x170>
 80058ec:	eddf 5a38 	vldr	s11, [pc, #224]	; 80059d0 <atanf+0x174>
 80058f0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80059d4 <atanf+0x178>
 80058f4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80058f8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80058fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80059d8 <atanf+0x17c>
 8005900:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005904:	eddf 5a35 	vldr	s11, [pc, #212]	; 80059dc <atanf+0x180>
 8005908:	eee7 5a26 	vfma.f32	s11, s14, s13
 800590c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80059e0 <atanf+0x184>
 8005910:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005914:	eddf 5a33 	vldr	s11, [pc, #204]	; 80059e4 <atanf+0x188>
 8005918:	eee7 5a26 	vfma.f32	s11, s14, s13
 800591c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80059e8 <atanf+0x18c>
 8005920:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005924:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80059ec <atanf+0x190>
 8005928:	eea5 7a26 	vfma.f32	s14, s10, s13
 800592c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80059f0 <atanf+0x194>
 8005930:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005934:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80059f4 <atanf+0x198>
 8005938:	eea5 7a26 	vfma.f32	s14, s10, s13
 800593c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005940:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005944:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005948:	d121      	bne.n	800598e <atanf+0x132>
 800594a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800594e:	e794      	b.n	800587a <atanf+0x1e>
 8005950:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005954:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005958:	ee30 0a27 	vadd.f32	s0, s0, s15
 800595c:	2301      	movs	r3, #1
 800595e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005962:	e7be      	b.n	80058e2 <atanf+0x86>
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <atanf+0x19c>)
 8005966:	429c      	cmp	r4, r3
 8005968:	dc0b      	bgt.n	8005982 <atanf+0x126>
 800596a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800596e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005972:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005976:	2302      	movs	r3, #2
 8005978:	ee70 6a67 	vsub.f32	s13, s0, s15
 800597c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005980:	e7af      	b.n	80058e2 <atanf+0x86>
 8005982:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005986:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800598a:	2303      	movs	r3, #3
 800598c:	e7a9      	b.n	80058e2 <atanf+0x86>
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <atanf+0x1a0>)
 8005990:	491b      	ldr	r1, [pc, #108]	; (8005a00 <atanf+0x1a4>)
 8005992:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005996:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800599a:	ed93 0a00 	vldr	s0, [r3]
 800599e:	ee37 7a40 	vsub.f32	s14, s14, s0
 80059a2:	ed92 0a00 	vldr	s0, [r2]
 80059a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	ee70 7a67 	vsub.f32	s15, s0, s15
 80059b0:	bfb8      	it	lt
 80059b2:	eef1 7a67 	vneglt.f32	s15, s15
 80059b6:	e760      	b.n	800587a <atanf+0x1e>
 80059b8:	3fc90fdb 	.word	0x3fc90fdb
 80059bc:	bfc90fdb 	.word	0xbfc90fdb
 80059c0:	3edfffff 	.word	0x3edfffff
 80059c4:	7149f2ca 	.word	0x7149f2ca
 80059c8:	3f97ffff 	.word	0x3f97ffff
 80059cc:	3c8569d7 	.word	0x3c8569d7
 80059d0:	3d4bda59 	.word	0x3d4bda59
 80059d4:	bd6ef16b 	.word	0xbd6ef16b
 80059d8:	3d886b35 	.word	0x3d886b35
 80059dc:	3dba2e6e 	.word	0x3dba2e6e
 80059e0:	3e124925 	.word	0x3e124925
 80059e4:	3eaaaaab 	.word	0x3eaaaaab
 80059e8:	bd15a221 	.word	0xbd15a221
 80059ec:	bd9d8795 	.word	0xbd9d8795
 80059f0:	bde38e38 	.word	0xbde38e38
 80059f4:	be4ccccd 	.word	0xbe4ccccd
 80059f8:	401bffff 	.word	0x401bffff
 80059fc:	08005fbc 	.word	0x08005fbc
 8005a00:	08005fcc 	.word	0x08005fcc

08005a04 <fabsf>:
 8005a04:	ee10 3a10 	vmov	r3, s0
 8005a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a0c:	ee00 3a10 	vmov	s0, r3
 8005a10:	4770      	bx	lr
	...

08005a14 <floorf>:
 8005a14:	ee10 3a10 	vmov	r3, s0
 8005a18:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005a1c:	3a7f      	subs	r2, #127	; 0x7f
 8005a1e:	2a16      	cmp	r2, #22
 8005a20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a24:	dc2a      	bgt.n	8005a7c <floorf+0x68>
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	da11      	bge.n	8005a4e <floorf+0x3a>
 8005a2a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005a8c <floorf+0x78>
 8005a2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3a:	dd05      	ble.n	8005a48 <floorf+0x34>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da23      	bge.n	8005a88 <floorf+0x74>
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <floorf+0x7c>)
 8005a42:	2900      	cmp	r1, #0
 8005a44:	bf18      	it	ne
 8005a46:	4613      	movne	r3, r2
 8005a48:	ee00 3a10 	vmov	s0, r3
 8005a4c:	4770      	bx	lr
 8005a4e:	4911      	ldr	r1, [pc, #68]	; (8005a94 <floorf+0x80>)
 8005a50:	4111      	asrs	r1, r2
 8005a52:	420b      	tst	r3, r1
 8005a54:	d0fa      	beq.n	8005a4c <floorf+0x38>
 8005a56:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005a8c <floorf+0x78>
 8005a5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	ddef      	ble.n	8005a48 <floorf+0x34>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfbe      	ittt	lt
 8005a6c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005a70:	fa40 f202 	asrlt.w	r2, r0, r2
 8005a74:	189b      	addlt	r3, r3, r2
 8005a76:	ea23 0301 	bic.w	r3, r3, r1
 8005a7a:	e7e5      	b.n	8005a48 <floorf+0x34>
 8005a7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005a80:	d3e4      	bcc.n	8005a4c <floorf+0x38>
 8005a82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005a86:	4770      	bx	lr
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e7dd      	b.n	8005a48 <floorf+0x34>
 8005a8c:	7149f2ca 	.word	0x7149f2ca
 8005a90:	bf800000 	.word	0xbf800000
 8005a94:	007fffff 	.word	0x007fffff

08005a98 <scalbnf>:
 8005a98:	ee10 3a10 	vmov	r3, s0
 8005a9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005aa0:	d025      	beq.n	8005aee <scalbnf+0x56>
 8005aa2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005aa6:	d302      	bcc.n	8005aae <scalbnf+0x16>
 8005aa8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005aac:	4770      	bx	lr
 8005aae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005ab2:	d122      	bne.n	8005afa <scalbnf+0x62>
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <scalbnf+0xc8>)
 8005ab6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005b64 <scalbnf+0xcc>
 8005aba:	4298      	cmp	r0, r3
 8005abc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005ac0:	db16      	blt.n	8005af0 <scalbnf+0x58>
 8005ac2:	ee10 3a10 	vmov	r3, s0
 8005ac6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005aca:	3a19      	subs	r2, #25
 8005acc:	4402      	add	r2, r0
 8005ace:	2afe      	cmp	r2, #254	; 0xfe
 8005ad0:	dd15      	ble.n	8005afe <scalbnf+0x66>
 8005ad2:	ee10 3a10 	vmov	r3, s0
 8005ad6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005b68 <scalbnf+0xd0>
 8005ada:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005b6c <scalbnf+0xd4>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	eeb0 7a67 	vmov.f32	s14, s15
 8005ae4:	bfb8      	it	lt
 8005ae6:	eef0 7a66 	vmovlt.f32	s15, s13
 8005aea:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005aee:	4770      	bx	lr
 8005af0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005b70 <scalbnf+0xd8>
 8005af4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005af8:	4770      	bx	lr
 8005afa:	0dd2      	lsrs	r2, r2, #23
 8005afc:	e7e6      	b.n	8005acc <scalbnf+0x34>
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	dd06      	ble.n	8005b10 <scalbnf+0x78>
 8005b02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b06:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005b0a:	ee00 3a10 	vmov	s0, r3
 8005b0e:	4770      	bx	lr
 8005b10:	f112 0f16 	cmn.w	r2, #22
 8005b14:	da1a      	bge.n	8005b4c <scalbnf+0xb4>
 8005b16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b1a:	4298      	cmp	r0, r3
 8005b1c:	ee10 3a10 	vmov	r3, s0
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	dd0a      	ble.n	8005b3c <scalbnf+0xa4>
 8005b26:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005b68 <scalbnf+0xd0>
 8005b2a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005b6c <scalbnf+0xd4>
 8005b2e:	eef0 7a40 	vmov.f32	s15, s0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf18      	it	ne
 8005b36:	eeb0 0a47 	vmovne.f32	s0, s14
 8005b3a:	e7db      	b.n	8005af4 <scalbnf+0x5c>
 8005b3c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005b70 <scalbnf+0xd8>
 8005b40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005b74 <scalbnf+0xdc>
 8005b44:	eef0 7a40 	vmov.f32	s15, s0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	e7f3      	b.n	8005b34 <scalbnf+0x9c>
 8005b4c:	3219      	adds	r2, #25
 8005b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b52:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005b56:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005b78 <scalbnf+0xe0>
 8005b5a:	ee07 3a10 	vmov	s14, r3
 8005b5e:	e7c4      	b.n	8005aea <scalbnf+0x52>
 8005b60:	ffff3cb0 	.word	0xffff3cb0
 8005b64:	4c000000 	.word	0x4c000000
 8005b68:	7149f2ca 	.word	0x7149f2ca
 8005b6c:	f149f2ca 	.word	0xf149f2ca
 8005b70:	0da24260 	.word	0x0da24260
 8005b74:	8da24260 	.word	0x8da24260
 8005b78:	33000000 	.word	0x33000000

08005b7c <_init>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr

08005b88 <_fini>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr
